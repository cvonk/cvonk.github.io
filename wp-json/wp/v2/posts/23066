{"id":23066,"date":"2018-01-21T14:06:03","date_gmt":"2018-01-21T22:06:03","guid":{"rendered":"https:\/\/coertvonk.com\/?p=23066"},"modified":"2022-05-03T12:48:56","modified_gmt":"2022-05-03T19:48:56","slug":"talk-to-your-cd-player","status":"publish","type":"post","link":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066","title":{"rendered":"Talk to your old CD player"},"content":{"rendered":"<p>\r\n    Have you ever wondered why you should buy new devices just because the old ones don&#8217;t support IoT?   Any device controlled by an infrared remote can be transferred into an IoT device with a Adafruit ESP8266, an infrared receiver and LED, and your remote control. With the help of an IR code library, I was able to make a program that does just that.\r\n\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" data-fancybox=\"svg\" data-width=\"249\" data-height=\"143\" href=\"\/wp-content\/uploads\/dialog-4.svg\">\r\n                    <img  title=\"\" loading=\"lazy\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg\" alt=\"Dialog with Google Home\" width=\"249\" height=\"144\"  \/>\r\n                <\/a>\r\n            <\/div>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Triggered with the phrase &#8220;Hey Google&#8221;, the Google Assistant is able to feed the words following the trigger phrase into its database of applets, one of which is IFTTT. Once one of the applets recognizes the phrase, it responds with a statement showing that it has acknowledged the command. In this case the answer phrase is set by the user. The Google Assistant will respond by saying the term set in IFTTT. I set it to &#8220;IR Code Sent.&#8221; The conversation will be something like the one shown in the conversation above.\r\n<\/p>\r\n\r\n<h2>\r\n    Problem analysis\r\n<\/h2>\r\n<p>\r\n    Our goal is to teach the Google Assistant to control a device with an IR signal. In this case we use a Panasonic SC-HC20 CD player.\r\n<\/p>\r\n<p>\r\n    We need a device, controlled by Google Assistant that can mimic an infrared remote control. In this project we will try to build that device and hook it up to Google Assistant using IFTTT (If This Then That). We build this so people do not have to buy new devices just so they can be controlled by &#8220;smart&#8221; devices.\r\n<\/p>\r\n\r\n<h2>\r\n    Design considerations\r\n<\/h2>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/Choices.svg\"><img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Choices.svg\" alt=\"Considerations\" width=\"170\" \/><\/a>\r\n            <\/div>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    We will give an overview of what we found and explain some of the trade-offs that we made.\r\n<\/p>\r\n\r\n<h3>\r\n    Teaching Google Assistant skills\r\n<\/h3>\r\n<p>    \r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/google-home-in-classroom-sml-1.jpg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/google-home-in-classroom-sml-1.jpg\" alt=\"Google Home in classroom learning new tricks\" width=\"400\" \/>\r\n                <\/a>\r\n            <\/div>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Adding Skills to the Google Assistant can be challenging, but IFTTT simplifies the process by setting up the api.ai (Google&#8217;s Voice Recognition Platform) part of the equation. This was normally the tricky part of teaching the Google Assistant, and IFTTT makes this much simpler. Now all we need to do is configure IFTTT and code the transmitting device.\r\n\r\n    <ul>\r\n        <li>\r\n            <a href=\"https:\/\/ifttt.com\/google_assistant\">If This Then That<\/a> (IFTTT) adds custom voice commands to Google Assistant and can sent information to a device using HTTP\r\n        <\/li>\r\n        <li>\r\n            <a href=\"https:\/\/developers.google.com\/assistant\">Actions on Google<\/a> adds a dialog to Google Assistant and supports sending and reading information to\/from devices.\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    Infrared Interface platform\r\n<\/h3>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/IoT-modules-small.png\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/IoT-modules-small.png\" alt=\"Various IoT boards\" width=\"400\" \/>\r\n                <\/a>\r\n            <\/div>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    We need to make a device that can accept commands over WiFi and relay them as infrared commands to the CD player. \r\n    <ul>\r\n        <li>Requirements: small, low power, WiFi, GPIO (general purpose i\/o pins)<\/li>\r\n        <li>Contestants:  Arduino, ESP8266, Arduino 101, ESP32<\/li>\r\n        <li>Winner: Adafruit Feather Huzzah ESP8266.  1 MByte flash enough for over the air updates. Micro USB for code upload \/ debugging.Y<\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    Infrared Interface infrared codes\r\n<\/h3>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/CD-player-remote.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/CD-player-remote.svg\" alt=\"Infrared beam\" width=\"200\" \/>\r\n                <\/a>\r\n            <\/div>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Our device needs to be able to mimic the remote as to control the CD player.\r\n<\/p>\r\n<p>\r\n    <ul>\r\n        <li>\r\n            Requirements: must support the platform; it ideally should recognize the device codes so we don&#8217;t have to use raw IR timings.\r\n        <\/li>\r\n        <li>\r\n            Contestants: A fork from Chris Young\u2019s IRlib; \r\n        <\/li>\r\n        <li>\r\n            Winner:A fork from Chris Young\u2019s IRlib;\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3 id=\"design-router\">\r\n    Traversing the WiFi router\r\n<\/h3>\r\n<p>\r\n    The access router in our home is a jack-of-all-trades. Among its many duties it protects the home network from outside intruders. This comes with a catch: Google Assistant needs access to our home network to control the CD player. This means we need to provide a mechanism in which Google Assistant can contact the CD device.\r\n<\/p>\r\n<p>\r\n    Like with anything else on the internet, there are many choices to consider. The two trains of thought are:\r\n    <ul>\r\n        <li>\r\n            Make an <i>exception in the firewall<\/i> to accept and forward incoming commands to the IR interface. We can also use this router to handle the more resource intense encryption and scrutinize the commands to prevent code injection. Problem is that anything on the internet can access our webserver, so we need an authentication mechanism. There are two protocols that come to mind: HTTP and MQTT. HTTP is the protocol that brings the web pages that you visit to you. We can use it to push messages from Google Assistant to our IR interface. The other protocol, <em>MQTT<\/em>, is designed to provide low latency, assured messaging over fragile networks and efficient distribution to one or many receivers. It is less known but powers Facebook, and is supported by AWS IoT.\r\n        <\/li>\r\n        <li>\r\n            <i>Maintain a connection<\/i> to a web service, so that it can send messages to the IR interface over that existing connection.  When using the HTTP protocol, we need a kludges like long polling or websocket. A more elegant solution is <em>Firebase Cloud messaging<\/em>, but that requires a substantial amount of memory to handle HTTPS and identifiers. It <a href=\"https:\/\/github.com\/esp8266\/Arduino\/issues\/3125\">appears<\/a> to run on ESP8266. The memory is used for HTTPS, UID and authToken.  Problem is that it causes a lot of idle traffic and requires an intermediate server (because IFTTT doesn&#8217;t support it directly).\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    IoT devices are characterized by a small processor, little memory and low power usage.  In this respect MQTT would be ideal. However, this requires a bridge such as <a href=\"https:\/\/www.eclipse.org\/projects\/archives.php\">Ponte<\/a> or web service to translate between HTTP and MQTT. Instead, we decided to go with the more common HTTPS protocol.\r\n<\/p>\r\n\r\n<h2>\r\n    Design, development and unit testing\r\n<\/h2>\r\n\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/circle-data-flow.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/circle-data-flow.svg\" alt=\"Data flow for Infrared Interface\" width=\"500\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Data flow for Infrared Interface\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The design consists of various blocks as illustrated below. We will describe the design, development and the unit testing for these blocks.  We will start the Infrared Interface and work our way up to integrating it with the Google Assistant ecosystem.\r\n<\/p>\r\n<p>\r\n    All code is available through the repository:\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/sandervonk\/esp8266-infrared\">             <img src=\"https:\/\/socialify.git.ci\/sandervonk\/esp8266-infrared\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Infrared Interface\r\n<\/h3>\r\n<p>\r\n    We go straight to the exciting part: the infrared interface.\r\n\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/Data-flow-ESP8266-3.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Data-flow-ESP8266-3.svg\" alt=\"Data flow for Infrared Interface\" width=\"500\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Data flow for Infrared Interface\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Design\r\n<\/h4>\r\n<p>\r\n    The hardware for this project is straightforward. The microcontroller is an ESP8266-based Feather HUZZAH that already has an USB interface for programming and debugging.  \r\n<\/p>\r\n<p>\r\n    The software uses a framework that provides: online WiFi SSID\/passwd configuration, saves fatal exception details to non-volatile memory and supports over-the-air (OTA) software updates.\r\n<\/p>\r\n\r\n<h4>\r\n    Development\r\n<\/h4>\r\n<p>\r\n    The ESP8266 is connected to an Infrared Receiver to decoding signals from the original remote control of the CD player. To send infrared codes to the CD player it uses a transistor to drive an IR LED.\r\n<\/p>\r\n\r\n<h5>\r\n    Hardware\r\n<\/h5>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/IR-Interface-small-2.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/IR-Interface-small-2.svg\" alt=\"Schematic of WiFi\/IR interface\" width=\"600\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                WiFi\/IR interface schematic\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Build the circuit as shown in the schematic above.\r\n\r\n    <ol>\r\n        <li>\r\n            <cspan class=\"hilight\">Gather<\/cspan> the parts shown in the table below.  Be careful to use the PN2222A or 2N222A transistor (not the P2N2222A).\r\n            <table class=\"cvonk-table small grey-background\">\r\n                <tr>\r\n                    <th>Label<\/th>\r\n                    <th>Part#<\/th>\r\n                    <th>Description<\/th>\r\n                    <th>Information<\/th>\r\n                    <th>We paid<\/th>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>IR1<\/td>\r\n                    <td>Vishay TSOP38238<\/td>\r\n                    <td>Infrared Receiver 38kHz<\/td>\r\n                    <td><a href=\"https:\/\/www.mouser.com\/datasheet\/2\/427\/tsop382-531411.pdf\">datasheet<\/a><\/td>\r\n                    <td>$ 1.08<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>D1<\/td>\r\n                    <td>Everlight EL-SIR333-A<\/td>\r\n                    <td>Infrared Diode 875nm 1.5V<sub>drop<\/sub><\/td>\r\n                    <td>datasheet<\/td>\r\n                    <td>$ 0.39<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>T1<\/td>\r\n                    <td>PN2222Atfr<\/td>\r\n                    <td>NPN Transistor<\/td>\r\n                    <td><a href=\"https:\/\/www.mouser.com\/datasheet\/2\/308\/PN2222A-1121407.pdf\">datasheet<\/a><\/td>\r\n                    <td>$ 0.49<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>PCB1<\/td>\r\n                    <td>Feather HUZZAH ESP8266<\/td>\r\n                    <td>Microcontroller board<\/td>\r\n                    <td><a href=\"https:\/\/learn.adafruit.com\/adafruit-feather-huzzah-esp8266\/downloads\">detail<\/a><\/td>\r\n                    <td>$ 16.95<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>R1<\/td>\r\n                    <td>1k&#x2126; &frac14;W<\/td>\r\n                    <td>Resistor<\/td>\r\n                    <td><\/td>\r\n                    <td>$ 0.02<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>R2<\/td>\r\n                    <td>68&#x2126; &frac14;W<\/td>\r\n                    <td>Resistor<\/td>\r\n                    <td><\/td>\r\n                    <td>$ 0.02<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td><\/td>\r\n                    <td>Feather Proto board<\/td>\r\n                    <td><\/td>\r\n                    <td><a href=\"https:\/\/www.adafruit.com\/product\/2884\">detail<\/a><\/td>\r\n                    <td>$ 4.95<\/td>\r\n                <\/tr>\r\n            <\/table>\r\n        <\/li>\r\n        <li>\r\n            <cspan class=\"hilight\">Assemble<\/cspan> the circuit using a breadboard or prototyping board. The illustration below shows the pinouts.\r\n\r\n            <div class=\"align-center\">\r\n                <figure>\r\n                    <div class=\"flex-container tight\">\r\n                        <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/ir-interface-pinout-6.svg\">\r\n                            <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/ir-interface-pinout-6.svg\" alt=\"Semiconductor pinouts ir-interface\" width=\"300\" \/>\r\n                        <\/a>\r\n                    <\/div>\r\n                    <figcaption>\r\n                        Semiconductor pinouts\r\n                    <\/figcaption>\r\n                <\/figure>\r\n            <\/div>\r\n        <\/li>\r\n        <li>\r\n            <cspan class=\"hilight\">Test <code>T1<\/code> and <code>D1<\/code><\/cspan>. Disconnect <code>R1<\/code> from the ESP8266 module, and connect it to the 3.3V rail to verify that the voltage drop over <code>R1<\/code> is approximately 3.4 V, indicating that the current through the infrared diode is 3.4V\/68&#x2126;=50mA. Reconnect the resistor to the ESP8266. Alternatively you can use camcorder to view the infrared light.\r\n        <\/li>\r\n        <li>\r\n            Note that we used the 5 Volt rails (labeled <code>USB<\/code> to supply the Infrared LED with sufficient current.\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/protoboard-b-small.jpg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/protoboard-b-small.jpg\" alt=\"We assemble it for prosperity on a prototyping board\" width=\"400\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                We assemble it for prosperity on a prototyping board\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h5>\r\n    Software\r\n<\/h5>\r\n<p>\r\n    When IFTTT makes the web request via Webhooks, the host of the website, in this case an Adafruit Huzzah Feather ESP8266 receives the command, and checks the command against its list of valid commands. If the command checks out, then it is matched to the corresponding IR command. It then sends the value out to the CD player, which completes the action.\r\n\r\n    <ol>\r\n        <li>\r\n            <cspan class=\"hilight\">Prepare<\/cspan> your Arduino IDE or Microsoft Visual Studio environment. Install the board support and libraries listed in the table below.\r\n\r\n            <table class=\"cvonk-table small grey-background\"><caption>IDE, board support and external libraries<\/caption>\r\n                <tr>\r\n                    <th>Type<\/th>\r\n                    <th>Component<\/th>\r\n                    <th>Author<\/th>\r\n                    <th>Version tested<\/th>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>IDE<\/td>\r\n                    <td><a href=\"https:\/\/www.arduino.cc\/\">Arduino<\/a><\/td>\r\n                    <td>arduino.cc and community<\/td>\r\n                    <td>1.8.5<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>Board support<\/td>\r\n                    <td><a href=\"https:\/\/learn.adafruit.com\/adafruit-feather-huzzah-esp8266\/using-arduino-ide\">ESP8266<\/a><\/td>\r\n                    <td>esp8266 community<\/td>\r\n                    <td>2.4.0<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>Library<\/td>\r\n                    <td><a href=\"https:\/\/github.com\/tzapu\/WiFiManager\">WiFiManager<\/a><\/td>\r\n                    <td>tzapu<\/td>\r\n                    <td>0.12.0<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>Library<\/td>\r\n                    <td>ESP8266 Framework<\/td>\r\n                    <td>Coert Vonk<\/td>\r\n                    <td>1.0.0<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>Library<\/td>\r\n                    <td><a href=\"https:\/\/github.com\/cvonk\/esp8266-fatal\">ESP8266 Fatal<\/a><\/td>\r\n                    <td>Coert Vonk, forked from Krzysztof<\/td>\r\n                    <td>1.0.0<\/td>\r\n                <\/tr>\r\n                <tr>\r\n                    <td>Library<\/td>\r\n                    <td><a href=\"https:\/\/github.com\/crankyoldgit\/IRremoteESP8266\">IRremoteESP8266<\/a><\/td>\r\n                    <td>Sebastien Warin et al.<\/td>\r\n                    <td>2.3.1<\/td>\r\n                <\/tr>\r\n            <\/table>\r\n        <\/li>\r\n        <li>\r\n            <cspan class=\"hilight\">Training<\/cspan> is required so that the device issues the correct infrared codes to the CD player. to capture the infrared codes from the existing remote control, we used the example <code>IRrecvDumpV2<\/code> from the <code>IRremoteESP8266<\/code> library. \r\n            <ol>\r\n                <li>Compile and upload it to the device over USB Serial, then open the Serial Monitor.<\/li>\r\n                <li>Press the relevant buttons and note the button pressed and codes generated. E.g. for my CD player it shows the the manufacture&#8217;s address as <code>0x4004<\/code> (Panasonic) and the code for &#8220;play&#8221; as <code>0x05505005<\/code>.<\/li>\r\n            <\/ol>\r\n        <\/li>\r\n        <li>\r\n            <cspan class=\"hilight\">Program<\/cspan> the device using the code from GitHub.\r\n            <ol>\r\n                <li>Copy or clone <a href=\"https:\/\/github.com\/sandervonk\/esp8266-infrared\/blob\/master\/ir-interface\/ir-interface.ino\"><code>ir-interface.c<\/code><\/a>.<\/li>\r\n                <li>Update the code with your own codes.<\/li>\r\n                <li>Compile and upload it to the device over USB Serial.  Subsequent uploads may be performed using over-the-air (OTA) updates.<\/li>\r\n                <li>The first time the board starts up it will be in Access Point mode. Use a computer or phone to connect to WiFi network.  If it doesn&#8217;t automatically connect you to the device, use a browser with any address. Use the browser to configure your networks SSID and password.  These values will be saved in EEPROM so next time the device can connect directly.<\/li>\r\n                <li>Open a serial monitor and note the IP address assigned to the device.<\/li>\r\n            <\/ol>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h4>\r\n    Unit testing\r\n<\/h4>\r\n<p>\r\n    <ol>\r\n        <li>\r\n            Test the <cspan class=\"hilight\">webserver<\/cspan> pointing a webbrowser at <code>http:\/\/ir-interface.local\/ir\/ir<\/code>.  You should see the infrared menu.\r\n        <\/li>\r\n        <li>\r\n            Test a <cspan class=\"hilight\">keyword<\/cspan> by pointing a webbrowser at e.g. <code>http:\/\/ir-interface.local\/ir?req=play<\/code>.  The CD player should start playing.  The image below shows the pulse train on an oscilloscope\r\n            <div class=\"align-center\">\r\n                <figure>\r\n                    <div class=\"flex-container tight\">\r\n                        <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/infrared-pulsetrain.svg\">\r\n                            <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/infrared-pulsetrain.svg\" alt=\"Infrared pulse train\" width=\"250\" \/>\r\n                        <\/a>\r\n                    <\/div>\r\n                    <figcaption>\r\n                        Infrared pulse train\r\n                    <\/figcaption>\r\n                <\/figure>\r\n            <\/div>\r\n        <\/li>\r\n        <li>\r\n            Test the remaining keywords\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h3>\r\n    Access router\r\n<\/h3>\r\n<p>\r\n    The <a href=\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#design-router\">design<\/a> relies on the router as an integral part of the solution.  It functions as a remote proxy and translates between HTTPS used on the internet and HTTP on the local area network.\r\n<\/p>\r\n\r\n<h4>\r\n    Design\r\n<\/h4>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/reverse-proxy-protocol-ir-2.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/reverse-proxy-protocol-ir-2.svg\" alt=\"Reverse proxy messages\" width=\"550\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Reverse proxy messages\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Development\r\n<\/h4>\r\n<p>\r\n    Install a reverse-proxy and TLS-certificates on your WiFi router.  Detailed instructions for routers with DD-WRT firmware can be found at <a href=\"\/sw\/networking\/dd-wrt-reverse-proxy-https-asus-rt-ac68-pound-letsencrypt-23660\">DD-WRT Reverse Proxy and HTTPS<\/a>.  Alternatively, you can configure <i>port forwarding<\/i> on your WiFi router.  In that case you need to use <code>http<\/code> instead of <code>https<\/code>.\r\n<\/p>\r\n\r\n<h4>\r\n    Unit testing\r\n<\/h4>\r\n<p>\r\n    Drumroll please &#8230;\r\n    <ol>\r\n        <li>Use a webbrowser to access <code>https:\/\/ir.home.domain.com\/ir<\/code>.  It should respond with a list of valid commands.<\/li>\r\n        <li>Use a webbrowser to issue <code>https:\/\/ir.home.domain.com\/ir?req=play<\/code>.  It should respond with &#8220;Sending play&#8221;.<\/li>\r\n        <li>Continue with testing the other keywords.<\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h3>\r\n    If This Then That\r\n<\/h3>\r\n<p>\r\n    If This Then That, commonly referred to as IFTTT, is a web service that preforms actions through multiple services when a applet is triggered, you can customize both the trigger and the action using <a href=\"htps:\/\/www.ifttt.com\/create\">their interface<\/a>. In this project we use the Google Assistant as the trigger and Webhooks to preform the web request.\r\n<\/p>\r\n\r\n<h4>\r\n    Design\r\n<\/h4>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/data-flow-IFTTT-2.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/data-flow-IFTTT-2.svg\" alt=\"Data flow from Google Home to If This Then That\" width=\"650\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Data flow from Google Home to If This Then That\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Development\r\n<\/h4>\r\n<p>\r\n    The tricky part is setting up IFTTT. To do this go to the IFTTT site; click on <span class=\"hp41-key\">Continue with Google<\/span> and create a new applet (Profile Dropdown &raquo; New Applet)\r\n\r\n    <ol style=\"list-style:upper-alpha\">\r\n        <li>\r\n            Start by specifying a <cspan class=\"hilight\">trigger<\/cspan> by clicking the <span class=\"hp41-cikey\">+this<\/span> and selecting &#8220;Google Assistant&#8221; from the list of services. \r\n            <ol>\r\n                <li>\r\n                    Click <span class=\"hp41-key\">Connect<\/span> to authorize IFTTT to manage voice commands\r\n                <\/li>\r\n                <li>\r\n                    Click <span class=\"hp41-key\">Say a phrase with a text ingredient<\/span>, and fill in the trigger fields:\r\n                    <ul>\r\n                        <li>What do you want to say? = <code>CD $<\/code><\/li>\r\n                        <li>What&#8217;s another way to say it? = <code>remote $<\/code>\r\n                        <li>What do you want the Assistant to say in response? = <code>Sending IR Code<\/code><\/li>\r\n                        <li>Press <span class=\"hp41-key\">Create Trigger<\/span><\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ol>\r\n        <\/li>\r\n        <li>\r\n            Specify the <cspan class=\"hilight\">Action<\/cspan> by clicking the <span class=\"hp41-cikey\">+that<\/span>.\r\n            <ol start=\"3\">\r\n                <li>\r\n                    Choose action service = Select &#8220;Webhooks&#8221; and press <span class=\"hp41-key\">Connect<\/span>\r\n                <\/li>\r\n                <li>\r\n                    Choose action = Make a web request\r\n                <\/li>\r\n                <li>\r\n                    Fill in the action fields\r\n                    <ul>\r\n                        <li>URL = <code>https:\/\/ir.home.domain.com\/ir?req={{TextField}}<\/code><\/li>\r\n                        <li>Method = <code>GET<\/code><\/li>\r\n                        <li>Content Type = <code>text\/plain<\/code><\/li>\r\n                        <li>Press <span class=\"hp41-key\">Create Action<\/span><\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    Press <span class=\"hp41-key\">Finish<\/span>\r\n                <\/li>\r\n            <\/ol>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h2>\r\n    Testing\r\n<\/h2>\r\n<p>\r\n    Now for the fun part:\r\n    <ol>\r\n        <li>\r\n            <cspan class=\"hilight\">Prepare<\/cspan>\r\n            <ul>\r\n                <li>While still on the IFTTT site at the <i>My Applets > Google Assistant<\/i>, click <span class=\"hp41-key\">Check now<\/span>.<\/li>\r\n                <li>Connect to the serial port of the ESP8266 using the Serial Monitor on the Arduino IDE<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            <cspan class=\"hilight\">Give it a shot<\/cspan>\r\n            <ul>\r\n                <li>Use a Google Home (or on another Assistant enabled device), and say &#8220;Hey Google CD Play&#8221;.<\/li>\r\n                <li>The Google Home should reply with &#8220;Sending IR Code&#8221;.<\/li>\r\n                <li>On the Serial Monitor, you should see &#8220;Sending Play&#8221;.<\/li>\r\n                <li>The CD player should start.<\/li>\r\n                <li>Give yourself a pat on the back and continue with testing the other keywords.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">            \r\n                I hope this device will help you modernize your home without spending hundreds on replacement devices. To further modernize your home you can build your own smart alarm clock that syncs alarms and events from Google Calendar\r\nESP8266 reads Google Calendar\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Describes how to use a microcontroller and infrared LED, to let Google Assistant control infrared enabled devices.","protected":false},"author":4,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[441],"tags":[361,466,459],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Talk to your old CD Player - Sander Vonk<\/title>\n<meta name=\"description\" content=\"Describes how to use a microcontroller and infrared LED, to let Google Assistant control devices. Talk to your CD player using Google Home.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Talk to your old CD Player - Sander Vonk\" \/>\n<meta property=\"og:description\" content=\"Describes how to use a microcontroller and infrared LED, to let Google Assistant control devices. Talk to your CD player using Google Home.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2018-01-21T22:06:03+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-03T19:48:56+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Sander\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/image\/\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/image\/\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#primaryimage\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#webpage\",\"url\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066\",\"name\":\"Talk to your old CD Player - Sander Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#primaryimage\"},\"datePublished\":\"2018-01-21T22:06:03+00:00\",\"dateModified\":\"2022-05-03T19:48:56+00:00\",\"description\":\"Describes how to use a microcontroller and infrared LED, to let Google Assistant control devices. Talk to your CD player using Google Home.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coertvonk.com\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Arduino\",\"item\":\"https:\/\/coertvonk.com\/category\/sw\/arduino\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Talk to your old CD player\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/521ea61187d3b92aa6edc27efb066099\"},\"headline\":\"Talk to your old CD player\",\"datePublished\":\"2018-01-21T22:06:03+00:00\",\"dateModified\":\"2022-05-03T19:48:56+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#webpage\"},\"wordCount\":2010,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg\",\"keywords\":[\"arduino uno\",\"atmega328p\",\"google-assistant\"],\"articleSection\":[\"Arduino\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/521ea61187d3b92aa6edc27efb066099\",\"name\":\"Sander\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/image\/\",\"url\":\"http:\/\/2.gravatar.com\/avatar\/50d5e0c60134564102be740dadcda2ce?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/2.gravatar.com\/avatar\/50d5e0c60134564102be740dadcda2ce?s=96&d=mm&r=g\",\"caption\":\"Sander\"},\"description\":\"Student at MVHS.\",\"url\":\"https:\/\/coertvonk.com\/author\/sander-vonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Talk to your old CD Player - Sander Vonk","description":"Describes how to use a microcontroller and infrared LED, to let Google Assistant control devices. Talk to your CD player using Google Home.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066","og_locale":"en_US","og_type":"article","og_title":"Talk to your old CD Player - Sander Vonk","og_description":"Describes how to use a microcontroller and infrared LED, to let Google Assistant control devices. Talk to your CD player using Google Home.","og_url":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066","og_site_name":"Coert Vonk","article_published_time":"2018-01-21T22:06:03+00:00","article_modified_time":"2022-05-03T19:48:56+00:00","og_image":[{"url":"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg"}],"twitter_card":"summary","twitter_misc":{"Written by":"Sander","Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coertvonk.com\/#\/schema\/person\/image\/","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/image\/"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"]},{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#primaryimage","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg"},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#webpage","url":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066","name":"Talk to your old CD Player - Sander Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#primaryimage"},"datePublished":"2018-01-21T22:06:03+00:00","dateModified":"2022-05-03T19:48:56+00:00","description":"Describes how to use a microcontroller and infrared LED, to let Google Assistant control devices. Talk to your CD player using Google Home.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coertvonk.com\/category\/sw"},{"@type":"ListItem","position":3,"name":"Arduino","item":"https:\/\/coertvonk.com\/category\/sw\/arduino"},{"@type":"ListItem","position":4,"name":"Talk to your old CD player"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/521ea61187d3b92aa6edc27efb066099"},"headline":"Talk to your old CD player","datePublished":"2018-01-21T22:06:03+00:00","dateModified":"2022-05-03T19:48:56+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#webpage"},"wordCount":2010,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/sw\/arduino\/talk-to-your-cd-player-23066#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/dialog-4.svg","keywords":["arduino uno","atmega328p","google-assistant"],"articleSection":["Arduino"],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/coertvonk.com\/#\/schema\/person\/521ea61187d3b92aa6edc27efb066099","name":"Sander","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coertvonk.com\/#\/schema\/person\/image\/","url":"http:\/\/2.gravatar.com\/avatar\/50d5e0c60134564102be740dadcda2ce?s=96&d=mm&r=g","contentUrl":"http:\/\/2.gravatar.com\/avatar\/50d5e0c60134564102be740dadcda2ce?s=96&d=mm&r=g","caption":"Sander"},"description":"Student at MVHS.","url":"https:\/\/coertvonk.com\/author\/sander-vonk"}]}},"_links":{"self":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/23066"}],"collection":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=23066"}],"version-history":[{"count":10,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/23066\/revisions"}],"predecessor-version":[{"id":32852,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/23066\/revisions\/32852"}],"wp:attachment":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=23066"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=23066"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=23066"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}