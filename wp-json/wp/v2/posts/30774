{"id":30774,"date":"2015-10-06T10:54:04","date_gmt":"2015-10-06T17:54:04","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=30774"},"modified":"2022-04-28T19:40:58","modified_gmt":"2022-04-29T02:40:58","slug":"faster-parameterized-multiplier-in-verilog","status":"publish","type":"post","link":"/\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774","title":{"rendered":"A faster multiplier circuit"},"content":{"rendered":"<p>\r\n    Implements a carry-save array multiplier using a circuit of logic gates.  Written in Verilog HDL for Altera and Xilinx FPGA&#8217;s.\r\n<\/p>\r\n<h2 style=\"counter-reset: h2 5 h3\">\r\n    Carry-save array multiplier\r\n<\/h2>\r\n\r\n<p>\r\n    <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-logo-implementation-multiply.svg\"><img class=\"alignright wp-image-17213\"  title=\"\"  src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"75\" \/><\/a>\r\n\r\n    \\(\\)\r\n    The propagating carry limits the performance of the <a href=\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772\">previous algorithm.<\/a> Here we investigates methods of implementing binary multiplication with a smaller latency. Low latency demands an efficient algorithm and high performance circuitry to limit propagation delays. Crucial to the performance of multipliers are high-speed adders. [<a href=\"http:\/\/i.stanford.edu\/pub\/cstr\/reports\/csl\/tr\/94\/617\/CSL-TR-94-617.pdf\">Bewick<\/a>]\r\n<\/p>\r\n<p>\r\n    The speed of the multiplier is directly related to this execution time of these <em>Digital Signal Processing<\/em> (DSP) applications.\r\n<\/p>\r\n<p>\r\n    Since multiplication dominates the execution time of most DSP algorithms, so there is a need of high-speed multiplier. Examples are convolution, Fast Fourier Transform (FFT), filtering and in ALU of microprocessors.\r\n<\/p>\r\n\r\n<h3>\r\n    Carry-save Array Multiplier\r\n<\/h3>\r\n<p>\r\n    An important advance in improving the speed of multipliers, pioneered by Wallace, is the use of carry save adders (CSA). Even though the building block is still the multiplying adder (<code>ma<\/code>), the topology of prevents a ripple carry by ensuring that, wherever possible, the carry-out signal propagates downward and not sideways.\r\n<\/p>\r\n<p>\r\n    The illustration below gives an example of this multiplication process.\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-carry-save-example.png\">\r\n                <img class=\"wp-image-16502\" title=\"(c) Copyright 2016 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-example.png\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"371\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-example.png 435w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-example-400x358.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-example-250x224.png 250w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-example-300x268.png 300w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-example-350x313.png 350w\" sizes=\"(max-width: 435px) 100vw, 435px\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                Inside a carry-save array multiplier\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Again, the building block is the multiplying adder (<code>ma<\/code>) as describe on the <a href=\"\/technology\/unfinished\/fpga-math-verilog-12758\/5\">previous page<\/a>. However, the topology is so that the carry-out from one adder is not connected to the carry-in of the next adder. Hence preventing a ripple carry. The circuit diagram below shows the connections between these blocks.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/multiplier\/4-bit carry-save.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017 by Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/logic-simulation\/multiplier\/4-bit carry-save.svg\" alt=\"\" width=\"600\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"bottom: 10%; right: 0%;\">\r\n                        Animate\r\n                    <\/button>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                4-bit carry-save array multiplier\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The observant reader might notice that <code>ma<sub>0x<\/sub><\/code> can be replaced with simple AND gates, <code>ma<sub>4x<\/sub><\/code> can be replaced by adders. Also the block <code>ma<sub>43<\/sub><\/code> is not needed. More interesting, the the ripple adder in the last row, can be replace with the faster carry look ahead adder.\r\n<\/p>\r\n<p>\r\n    Similar to the carry-propagate array multiplier, using Verilog HDL we can generate instances of <code>ma<\/code> blocks based on the word length of the multiplicand and multiplier (<code>N<\/code>). To describe the circuit in Verilog HDL, we need to derive the rules that govern the connections between the blocks.\r\n<\/p>\r\n<p>\r\n    Start by numbering the output ports based on their location in the matrix. For this circuit, we have the output signals <em>sum<\/em> (<code>s)<\/code> and <em>carry-out<\/em> (<code>c<\/code>). E.g. <span style=\"font-family: monospace;\">c_13<\/span> identifies the carry-out signal for the block in row <code>1<\/code> and column <code>3<\/code>. Next, we express the input signals as a function of the output signal names <code>s<\/code> and <code>c<\/code> and do the same for the product itself as shown in the table below.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-carry-save-tbl3.png\">\r\n                <img class=\"wp-image-16724\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3.png\" alt=\"\" width=\"400\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3.png 714w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3-356x400.png 356w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3-223x250.png 223w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3-267x300.png 267w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3-312x350.png 312w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3-445x500.png 445w, https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-tbl3-668x750.png 668w\" sizes=\"(max-width: 714px) 100vw, 714px\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                Function for output signals &#8216;so&#8217; and &#8216;co&#8217; and output signals &#8216;x&#8217;, &#8216;y&#8217;, &#8216;si&#8217;, &#8216;ci&#8217; and &#8216;p&#8217;\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Based on this table, we can now express the interconnects using Verilog HDL using <code>?:<\/code> expressions.\r\n    <pre class=\"brush: verilog; title: ; toolbar: false; notranslate\" title=\"\">generate genvar ii, jj;\r\n    for ( ii = 0; ii <;= N; ii = ii + 1) begin: gen_ii\r\n        for ( jj = 0; jj <; N; jj = jj + 1) begin: gen_jj\r\n            math_multiplier_ma_block ma(\r\n                .x ( ii <; N ? a&#091;jj&#093; : (jj > 0) ? c[N][jj-1] : 1'b0 ),\r\n                .y ( ii <; N ? b&#091;ii&#093; : 1'b1 ),\r\n                .si ( ii > 0  jj <; N - 1 ? s&#091;ii-1&#093;&#091;jj+1&#093; : 1'b0 ),\r\n                .ci ( ii > 0 ? c[ii-1][jj] : 1'b0 ),\r\n                .so ( s[ii][jj] ),\r\n                .co ( c[ii][jj] ) );\r\n            if ( ii == N ) assign p[N+jj] = s[N][jj];\r\n        end\r\n        assign p[ii] = s[ii][0];\r\n    end\r\nendgenerate<\/pre>\r\n<\/p>\r\n<p>\r\n    The complete Verilog HDL source code along with the test bench and constraints is available at:\r\n\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGAmath\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Results\r\n<\/h4>\r\n<p>\r\n    The propagation delay \\(t_{pd}\\) depends size \\(N\\) and the value of operands. For a given size \\(N\\), the maximum propagation delay occurs when the low order bit cause a carry\/sum that propagate to the highest order bit. This worst-case propagation delay is linear with \\(2N\\), this makes this carry-save multiplier is about <em>33% faster<\/em> as the ripple-carry multiplier. Note that the average propagation delay is about half of this.\r\n<\/p>\r\n<p>\r\n    The post-map Timing Analysis tool shows the worst-case propagation delays for the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Terasic Altera Cyclone IV DE0-Nano<\/a>. The exact value depends on the model and speed grade of the FPGA, the silicon itself, voltage and the die temperature.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"results\">\r\n                    <tr>\r\n                        <th>\\(N\\)<\/th>\r\n                        <th colspan=\"3\">Timing Analysis<\/th>\r\n                        <th>Measured<\/th>\r\n                    <\/tr>\r\n                    <tr style=\"border-bottom: 1px solid #ddd;\">\r\n                        <th><\/th>\r\n                        <th>slow 85\u00b0C<\/th>\r\n                        <th>slow 0\u00b0C<\/th>\r\n                        <th>fast 0\u00b0C<\/th>\r\n                        <th>actual<\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">4-bits<\/td>\r\n                        <td style=\"text-align: right;\">9.0 ns<\/td>\r\n                        <td style=\"text-align: right;\">8.0 ns<\/td>\r\n                        <td style=\"text-align: right;\">5.6 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">8-bits<\/td>\r\n                        <td style=\"text-align: right;\">18.7 ns<\/td>\r\n                        <td style=\"text-align: right;\">16.8 ns<\/td>\r\n                        <td style=\"text-align: right;\">11.4 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">16-bits<\/td>\r\n                        <td style=\"text-align: right;\">30.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">27.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">18.3 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">27-bits<\/td>\r\n                        <td style=\"text-align: right;\">46.8 ns<\/td>\r\n                        <td style=\"text-align: right;\">41.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">27.7 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">32-bits<\/td>\r\n                        <td style=\"text-align: right;\">57.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">51.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">34.3 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-carry-save-measurements.svg\">\r\n                    <img class=\"wp-image-16751\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-multiplier-carry-save-measurements.svg\" alt=\"\" width=\"100%\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Propagation delay in carry-save array multiplier\r\n            <\/figcaption>\r\n    <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Other multipliers\r\n<\/h3>\r\n<p>\r\n    The <em><a href=\"https:\/\/www.researchgate.net\/publication\/3476184_A_Suggestion_for_a_Fast_Multiplier\" class=\"broken_link\">Wallace Multiplier<\/a><\/em> decreases the latency by reorganizing the additions. Wikipedia has a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Wallace_tree\">good description of the algorithm<\/a>. Due to the irregular routing, they can be difficult to route on a FPGA. As a consequence, additional wire delays may cause it to perform slower than carry-safe array multipliers.\r\n<\/p>\r\n<p>\r\n    The Wallace Multiplier can be combined with Booth Coding. The <em><a href=\"https:\/\/www.researchgate.net\/publication\/30957338_A_signed_binary_multiplication_technique\" class=\"broken_link\">Booth Multiplier<\/a><\/em> (alt) uses, say, 2 bits of the multiplier in generating each partial product thereby using only half the number of rows. Booth Multipliers with more fancy VLSI technique such as 0.6\u03bc\u0016 BiCMOS process using emitter coupled logic makes 53&#215;53 multipliers possible with a latency of less than 2.6 nanoseconds [<a href=\"http:\/\/i.stanford.edu\/pub\/cstr\/reports\/csl\/tr\/94\/617\/CSL-TR-94-617.pdf\">ref<\/a>].\r\n<\/p>\r\n<p>\r\n    Booth multiplication is a technique that allows for smaller, faster multiplication circuits, by reordering the values to be multiplied. It is the standard technique used in chip design.\r\n<\/p>\r\n<p>\r\n    Vedic arithmetic is the ancient system of Indian mathematics which has a unique technique of calculations based on 16 Sutras (Formulae)\r\n<\/p>\r\n<p>\r\n    Another algorithm is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Karatsuba_algorithm\">Karatsuba<\/a>. <a href=\"http:\/\/www.andraka.com\/multipli.php\">Overview<\/a>.\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Following this &#8220;Carry-save array multiplier using logic gates&#8221;, the <a href=\"\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776\">next chapter<\/a> shows an implementation of the divider introduced in <a href=\"\/inquiries\/computer-math\/math-operations-using-gates-30710\">Chapter 7<\/a> of the inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8220;.\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>","protected":false},"excerpt":{"rendered":"Investigates methods of implementing binary multiplication with less latency.","protected":false},"author":41,"featured_media":17213,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[420],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Carry-save array multiplier using logic gates - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Implements a carry-save array multiplier using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Carry-save array multiplier using logic gates - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Implements a carry-save array multiplier using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-06T17:54:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-29T02:40:58+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg\",\"caption\":\"(c) Copyright 2016 Coert Vonk\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#webpage\",\"url\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774\",\"name\":\"Carry-save array multiplier using logic gates - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#primaryimage\"},\"datePublished\":\"2015-10-06T17:54:04+00:00\",\"dateModified\":\"2022-04-29T02:40:58+00:00\",\"description\":\"Implements a carry-save array multiplier using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Building math circuits\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\/building-math-circuits\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"A faster multiplier circuit\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"A faster multiplier circuit\",\"datePublished\":\"2015-10-06T17:54:04+00:00\",\"dateModified\":\"2022-04-29T02:40:58+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#webpage\"},\"wordCount\":450,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg\",\"articleSection\":[\"Building math circuits\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"/\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Carry-save array multiplier using logic gates - Coert Vonk","description":"Implements a carry-save array multiplier using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774","og_locale":"en_US","og_type":"article","og_title":"Carry-save array multiplier using logic gates - Coert Vonk","og_description":"Implements a carry-save array multiplier using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","og_url":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774","og_site_name":"Coert Vonk","article_published_time":"2015-10-06T17:54:04+00:00","article_modified_time":"2022-04-29T02:40:58+00:00","twitter_card":"summary","twitter_image":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#primaryimage","inLanguage":"en-US","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg","caption":"(c) Copyright 2016 Coert Vonk"},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#webpage","url":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774","name":"Carry-save array multiplier using logic gates - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#primaryimage"},"datePublished":"2015-10-06T17:54:04+00:00","dateModified":"2022-04-29T02:40:58+00:00","description":"Implements a carry-save array multiplier using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coert.vonk.one\/category\/hw"},{"@type":"ListItem","position":3,"name":"Building math circuits","item":"https:\/\/coert.vonk.one\/category\/hw\/building-math-circuits"},{"@type":"ListItem","position":4,"name":"A faster multiplier circuit"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"A faster multiplier circuit","datePublished":"2015-10-06T17:54:04+00:00","dateModified":"2022-04-29T02:40:58+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#webpage"},"wordCount":450,"commentCount":0,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-multiply.svg","articleSection":["Building math circuits"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"/\/author\/cvonk"}]}},"_links":{"self":[{"href":"/\/wp-json\/wp\/v2\/posts\/30774"}],"collection":[{"href":"/\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"/\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/comments?post=30774"}],"version-history":[{"count":10,"href":"/\/wp-json\/wp\/v2\/posts\/30774\/revisions"}],"predecessor-version":[{"id":32794,"href":"/\/wp-json\/wp\/v2\/posts\/30774\/revisions\/32794"}],"wp:featuredmedia":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/media\/17213"}],"wp:attachment":[{"href":"/\/wp-json\/wp\/v2\/media?parent=30774"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"/\/wp-json\/wp\/v2\/categories?post=30774"},{"taxonomy":"post_tag","embeddable":true,"href":"/\/wp-json\/wp\/v2\/tags?post=30774"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}