{"id":31963,"date":"2022-03-03T14:11:19","date_gmt":"2022-03-03T22:11:19","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=31963"},"modified":"2022-05-03T12:33:04","modified_gmt":"2022-05-03T19:33:04","slug":"debugging","status":"publish","type":"post","link":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963","title":{"rendered":"Debugging"},"content":{"rendered":"<p>\r\n    Describes methods for debugging the pool interface. Includes JTAG debugging and post-mortem coredump analysis.\r\n<\/p>\r\n\r\n<h2>\r\n    Run time debug\r\n<\/h2>\r\n<p>\r\n    Using `menuconfig`, the user can configure different levels to console logging. The verbosity is specified as None (0), Errors (1), Warnings and errors (2).\r\n\r\n    <ul>\r\n        <li>OPNPOOL_DBGLVL_DATALINK<\/li>\r\n        <li>OPNPOOL_DBGLVL_NETWORK<\/li>\r\n        <li>OPNPOOL_DBGLVL_POOLSTATE<\/li>\r\n        <li>OPNPOOL_DBGLVL_POOLTASK<\/li>\r\n        <li>OPNPOOL_DBGLVL_MQTTTASK<\/li>\r\n        <li>OPNPOOL_DBGLVL_HASSTASK<\/li>\r\n        <li>OPNPOOL_DBGLVL_HTTPD<\/li>\r\n    <\/ul>\r\n<\/p>\r\n<h2>\r\n    Post mortem\r\n<\/h2>\r\n<p>\r\n    The device includes support to generate core dumps on unrecoverable errors. This allows post-mortem analysis of the software state at the moment of failure. This way you can find what task, the instruction and what call stack lead to the crash. The core dump is written to the <code>coredump<\/code> partition in flash. \r\n<\/p>\r\n<p>\r\n    As we will see in the Interface chapter, the <code>mqtt_task<\/code> will read this coredump from flash and forward it over MQTT. \r\n<\/p>\r\n\r\n<h2>\r\n    GDB over JTAG\r\n<\/h2>\r\n<p>\r\n    The ESP32 supports the <a href=\"https:\/\/openocd.org\/\">Open On-Chip Debugger<\/a>. Say goodbye to <code>ESP_LOG<\/code>, and explore the world that was once the exclusive domain of in-circuit emulators. Using special pins on the ESP32, your computer can set break points, inspect variables and single step instructions.\r\n\r\n    <div class=\"flex-container tight\">\r\n        <figure>\r\n            <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-openocd-scaled.jpg\"><img  title=\"\" loading=\"lazy\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-openocd-1024x683.jpg\" alt=\"\" width=\"525\" height=\"350\" class=\"alignnone size-large wp-image-32127\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-openocd-1024x683.jpg 1024w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-openocd-400x267.jpg 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-openocd-768x512.jpg 768w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-openocd-1536x1024.jpg 1536w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-openocd-2048x1365.jpg 2048w\" sizes=\"(max-width: 525px) 100vw, 525px\" \/><\/a>\r\n            <figcaption>\r\n                OPNpool with ESP-PROG and computer\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    ESP32 board and JTAG adapter\r\n<\/h3>\r\n<p>\r\n    The JTAG interface hooks directly to the CPU. That allows it do stop the CPU, set breakpoints and have access to whatever the CPU has access to.\r\n<\/p>\r\n<p>\r\n    The JTAG header is available on the OPNpool board.  This 10 pin header should be connected to a JTAG\/USB interface, such as the ESP-PROG. With the interface, make sure to set the <code>JTAG PWR SEL<\/code> jumper for 3.3V. Also try to keep the connection short (&lt;10 cm).\r\n<\/p>\r\n<p>\r\n    <details>\r\n        <summary>\r\n            Another option is to use the ESP-WROVER-KIT development board.\r\n        <\/summary>\r\n        <div style=\"margin-left: 2em; color: grey;\">\r\n            The ESP-WROVER-KIT has an integrated JTAG\/USB interface what is available over the first of two USB channels. (The second channel is for the serial port.)  If you go this route, make sure to connect the JTAG jumpers on JP2 to prevent <code>Error: libusb_open() failed with LIBUSB_ERROR_NOT_SUPPORTED<\/code>.\r\n        <\/div>\r\n    <\/details>\r\n<\/p>\r\n\r\n<h3>\r\n    OpenOCD and driver\r\n<\/h3>\r\n<p>    \r\n    Under Windows, install the 64-bit <a href=\"https:\/\/ftdichip.com\/drivers\/d2xx-drivers\/\">FTDI D2xx Driver<\/a> setup executable;\r\n    <ol>\r\n        <li>\r\n            Using micro-USB cables, connect JTAG adapter and the serial port on the OPNpool board to the computer. \r\n        <\/li>\r\n        <li>\r\n            Wait until USB ports are recognized by Windows and drivers are installed. If they do not install automatically, then do so manually using the driver setup from <a href=\"https:\/\/ftdichip.com\/drivers\/d2xx-drivers\/\">FTDI<\/a>.\r\n        <\/li>\r\n        <li>\r\n            Install and run the <a href=\"https:\/\/zadig.akeo.ie\/\">Zadig tool<\/a> (&ge; v2.7).\r\n            <ul>\r\n                <li>\r\n                    <code>Options \u00bb List All Devices<\/code>\r\n                <\/li>\r\n                <li>\r\n                    The list of devices should contain two ESP-PROG specific USB entries with driver name &#8220;FTDIBUS (vxxxx)&#8221;:\r\n                    <ul>\r\n                        <li>\r\n                            <code>Dual RS232-HS (Interface 0)<\/code>, connected to the JTAG port\r\n                        <\/li>\r\n                        <li>\r\n                            <code>Dual RS232-HS (Interface 1)<\/code>, connected to the UART port\r\n                        <\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    Select <code>Dual RS232-HS (Interface 0)<\/code>, and reinstall attached driver to the \u201cWinUSB (v6xxxxx)\u201d, see the picture below.\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Windows Device Manager should no longer show the JTAG port, because <code>WinUSB<\/code> is a user-space driver.\r\n        <\/li>\r\n    <\/ol>\r\n\r\n    <div class=\"flex-container tight\">\r\n        <figure>\r\n            <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-zadig.png\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-zadig.png\" alt=\"\" width=\"500\" class=\"alignnone size-full wp-image-32125\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-zadig.png 717w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-debug-zadig-400x177.png 400w\" sizes=\"(max-width: 717px) 100vw, 717px\" \/><\/a>    \r\n            <figcaption>\r\n                Zadig to configure WinUSB driver.\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Compile and debug\r\n<\/h3>\r\n<p>\r\n    Set up the OpenOCD configuration\r\n    <ol>\r\n        <li>\r\n            <code><cspan class=\"hp41-key\">F1<\/cspan> \u00bb Select OpenOCD Board Configuration<\/code>.\r\n        <\/li>\r\n        <li>\r\n            Choose the <code>ESP32 chip (via ESP-PROG)<\/code>.  (Unless you use the ESP-WROVER-KIT of course.)\r\n            <ul>\r\n                <li>\r\n                    Note that WROVER modules use a 1.8 SPI flash because of PSRAM limitations.\r\n                <\/li>\r\n                <li>\r\n                    Others such as WROOM modules use 3.3V SPI flash.  This flash voltage is important, because <code>GPIO12<\/code> is shared with SPI flash.  Selecting the wrong voltage may cause flash uploads to fail.\r\n                <\/li>\r\n            <\/ul>  \r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    See if OpenOCD starts\r\n    <ol>\r\n        <li>\r\n            <code><cspan class=\"hp41-key\">F1<\/cspan> \u00bb ESP-IDF: OpenOCD Manager<\/code>.\r\n        <\/li>\r\n        <li>\r\n            Choose <code>Start OpenOCD<\/code>.\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    Build the code with symbols and without optimalizations.\r\n\r\n    <ol>\r\n        <li>\r\n            <code><cspan class=\"hp41-key\">F1<\/cspan> \u00bb ESP-IDF: Launch GUI configuration tool<\/code>\r\n        <\/li>\r\n        <li>\r\n            Specify the <code>Debug (-Og)<\/code> compiler optimalization level.\r\n        <\/li>\r\n        <li>\r\n            Press <cspan class=\"hp41-key\">^e<\/cspan> <cspan class=\"hp41-key\">d<\/cspan> to build, upload and monitor over the serial port. \r\n            <ul>\r\n                <li>\r\n                    If the &#8220;search documentation&#8221; keyboard shortcut is also assigned to <cspan class=\"hp41-key\">^e<\/cspan> <cspan class=\"hp41-key\">d<\/cspan>, then first remove that binding.\r\n                <\/li>\r\n                <li>\r\n                    Note that you can also upload the binary over JTAG (<code>program_esp filename.bin 0x10000 verify<\/code>).\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    From the VSCode debug side bar (<cspan class=\"hp41-key\">^e<\/cspan> <cspan class=\"hp41-key\">d<\/cspan>), click on the green arrow at the top and select <code>Launch<\/code> to connect to the OPNpool device.\r\n<\/p>\r\n\r\n<h4>\r\n    Notes\r\n<\/h4>\r\n<p>\r\n    <ul>\r\n        <li>\r\n            There are only two hardware breakpoints\r\n        <\/li>\r\n        <li>\r\n            After hitting a break point, you may still have to select the corresponding task\r\n        <\/li>\r\n        <li>\r\n            To determine the image location in flash, OpenOCD uses the address of the first `app` in the partition table. When using OTA updates, this will be the <code>factory<\/code> image instead of the OTA downloaded application. To work around this, specify <code>esp32 appimage_offset <offset><\/code> (see <a href=\"https:\/\/docs.espressif.com\/projects\/esp-idf\/en\/latest\/esp32\/api-guides\/jtag-debugging\/tips-and-quirks.html\">docs.espressif.com<\/a>).\r\n        <\/li>\r\n        <li>\r\n            You may only want to debug the 1st core (<code>set ESP32_ONLYCPU 1<\/code>)\r\n        <\/li>\r\n        <li>\r\n            Espressif has more info in <a href=\"https:\/\/docs.espressif.com\/projects\/esp-idf\/en\/latest\/esp32\/api-guides\/jtag-debugging\/index.html\">Espressif JTAG Debugging<\/a>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Continue reading to learn about the <a href=\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/protocol-31965\">communication protocol<\/a>.\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Describes methods for debugging the pool interface.  Includes JTAG debugging and post-mortem coredump analysis.","protected":false},"author":41,"featured_media":32091,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[434],"tags":[463,455,461,460],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Methods for debugging the pool interface - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Describes methods for debugging the pool interface. Includes JTAG debugging and post-mortem coredump analysis.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Methods for debugging the pool interface - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Describes methods for debugging the pool interface. Includes JTAG debugging and post-mortem coredump analysis.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2022-03-03T22:11:19+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-03T19:33:04+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#primaryimage\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#webpage\",\"url\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963\",\"name\":\"Methods for debugging the pool interface - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#primaryimage\"},\"datePublished\":\"2022-03-03T22:11:19+00:00\",\"dateModified\":\"2022-05-03T19:33:04+00:00\",\"description\":\"Describes methods for debugging the pool interface. Includes JTAG debugging and post-mortem coredump analysis.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Embedded\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/embedded\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"OPNpool design\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/embedded\/opnpool-design\"},{\"@type\":\"ListItem\",\"position\":5,\"name\":\"Debugging\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Debugging\",\"datePublished\":\"2022-03-03T22:11:19+00:00\",\"dateModified\":\"2022-05-03T19:33:04+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#webpage\"},\"wordCount\":665,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\",\"keywords\":[\"esp-idf\",\"esp32\",\"iot\",\"pool\"],\"articleSection\":[\"OPNpool design\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"https:\/\/coert.vonk.one\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Methods for debugging the pool interface - Coert Vonk","description":"Describes methods for debugging the pool interface. Includes JTAG debugging and post-mortem coredump analysis.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963","og_locale":"en_US","og_type":"article","og_title":"Methods for debugging the pool interface - Coert Vonk","og_description":"Describes methods for debugging the pool interface. Includes JTAG debugging and post-mortem coredump analysis.","og_url":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963","og_site_name":"Coert Vonk","article_published_time":"2022-03-03T22:11:19+00:00","article_modified_time":"2022-05-03T19:33:04+00:00","twitter_card":"summary","twitter_image":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#primaryimage","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg"},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#webpage","url":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963","name":"Methods for debugging the pool interface - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#primaryimage"},"datePublished":"2022-03-03T22:11:19+00:00","dateModified":"2022-05-03T19:33:04+00:00","description":"Describes methods for debugging the pool interface. Includes JTAG debugging and post-mortem coredump analysis.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coert.vonk.one\/category\/sw"},{"@type":"ListItem","position":3,"name":"Embedded","item":"https:\/\/coert.vonk.one\/category\/sw\/embedded"},{"@type":"ListItem","position":4,"name":"OPNpool design","item":"https:\/\/coert.vonk.one\/category\/sw\/embedded\/opnpool-design"},{"@type":"ListItem","position":5,"name":"Debugging"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Debugging","datePublished":"2022-03-03T22:11:19+00:00","dateModified":"2022-05-03T19:33:04+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#webpage"},"wordCount":665,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg","keywords":["esp-idf","esp32","iot","pool"],"articleSection":["OPNpool design"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"https:\/\/coert.vonk.one\/author\/cvonk"}]}},"_links":{"self":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31963"}],"collection":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/comments?post=31963"}],"version-history":[{"count":10,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31963\/revisions"}],"predecessor-version":[{"id":32318,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31963\/revisions\/32318"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media\/32091"}],"wp:attachment":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media?parent=31963"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/categories?post=31963"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/tags?post=31963"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}