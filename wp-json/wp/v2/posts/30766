{"id":30766,"date":"2015-10-03T10:45:18","date_gmt":"2015-10-03T17:45:18","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=30766"},"modified":"2022-04-28T19:37:42","modified_gmt":"2022-04-29T02:37:42","slug":"parameterized-adder-and-subtractor-in-verilog","status":"publish","type":"post","link":"/\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766","title":{"rendered":"Adder and subtractor circuits"},"content":{"rendered":"<p>\r\n    Implements an adder and subtractor using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#8217;s.\r\n<\/p>\r\n\r\n<h2 style=\"counter-reset: h2 2 h3\">\r\n    Adder and subtractor using logic gates\r\n<\/h2>\r\n<p>\r\n    <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-logo-implementation-add.svg\"><img class=\"alignright wp-image-17212 \"  title=\"\"  src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\" alt=\"(c) Copyright 2016-2022 Coert Vonk\" width=\"75\" \/><\/a>\r\n\r\n    The inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8221; introduced the <em>carry-propagate adder<\/em> and the <em>borrow-propagate subtractor. <\/em>Here we will recapitulate and implement these using Verilog HDL.\\(\\)\r\n<\/p>\r\n\r\n<h3>\r\n    Carry-propagate adder\r\n<\/h3>\r\n<p>\r\n    The <em>full adder<\/em> (<code>fa<\/code>) forms the basic building block. This full adder adds two 1-bit values <em>a<\/em> and <em>b<\/em> to the incoming carry<em> (c<sub>i<\/sub><\/em>), and outputs a 1-bit sum (<em>s<\/em>) and a 1-bit outgoing carry (<em>c<sub>o<\/sub><\/em>). The circuit and Boolean equations, shown below, give the relations between these inputs and outputs.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/adder\/fa-block.html\">\r\n                        <img loading=\"lazy\" class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/logic-simulation\/adder\/fa-block.svg\" alt=\"\" width=\"204\" height=\"200\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"top: 0%; right: 0%;\">\r\n                            Animate\r\n                        <\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{aligned}\r\n                            s &#038;= a \\oplus b \\oplus c_i\\\\\r\n                            c_o &#038;= a \\cdot b + c_i \\cdot (a \\oplus b)\r\n                        \\end{aligned}\r\n                        \\nonumber\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>\r\n                1-bit full adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    To build a <em>n<\/em>-bit propagate-adder, we combine <em>n<\/em> <code>fa<\/code> blocks. The circuits adds the least significant bits and passes the carry on to the next bit, and so on. Combining the output bits forms the sum <em>s<\/em>. The circuit shown below gives an example of a 4-bit carry-propagate adder.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/adder\/4-bit carry-propagate.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/logic-simulation\/adder\/4-bit carry-propagate.svg\" alt=\"\" width=\"420\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"top: 0%; right: 0%;\">\r\n                        Animate\r\n                    <\/button>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                4-bit carry-propagate adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    We describe the circuit using array instantiation. In this <code>a[]<\/code> and <code>b[]<\/code> are the summands, <code>c<sub>i<\/sub>[]<\/code> is the in-coming carry, <code>c<sub>o<\/sub>[]<\/code> is the out-going carry and <code>s[]<\/code> is the sum.\r\n<\/p>\r\n<p>\r\n    <pre class=\"brush: verilog; title: ; toolbar: false; notranslate\" title=\"\">math_adder_fa_block fa [N-1:0] ( .a  ( a ),\r\n    .b  ( b ),\r\n    .ci ( {c[N-2:0], 1'b0} ),\r\n    .s  ( s[N-1:0] ),\r\n    .co ( {s[N], c[N-2:0]}) );<\/pre>\r\n<\/p>\r\n<p>\r\n    The compiler will optimize the <code>fa<\/code> blocks with forced inputs, but most <code>fa<\/code> blocks will compile to a RTL netlist as shown below.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math_adder_ripplecary_rtl_fablock.svg\">\r\n                <img class=\"wp-image-16637\" title=\"(c) Copyright 2016 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math_adder_ripplecary_rtl_fablock.svg\" alt=\"(c) Copyright 2016-2022 Coert Vonk\" width=\"350\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                1-bit full adder (fa) block in RTL\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The 4-bit adder compiles into the daisy chained <code>fa<\/code> blocks as shown.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math_adder_ripplecary_rtl.svg\">\r\n                <img class=\"wp-image-16639\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math_adder_ripplecary_rtl.svg\" alt=\"(c) Copyright 2016-2022 Coert Vonk\" width=\"600\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                4-bit carry-propagate adder in RTL\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The complete Verilog HDL code along with the test bench and constraint files are available through GitHub for <a href=\"https:\/\/www.avnet.com\/shop\/us\/products\/avnet-engineering-services\/aes-s6mb-lx9-g-3074457345628965461\/\">Xilinx (Spartan-6 LX9<\/a>) and <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Altera (Cyclone IV DE0-Nano)<\/a> boards.\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGAmath\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Results\r\n<\/h4>\r\n<p>\r\n    The propagation delay \\(t_{pd}\\) depends on size <em>N<\/em> and the value of operands. For a given size <em>N<\/em>, adding the value <code>1<\/code> to an operand that contains all zeroes causes the longest propagation delay.\r\n<\/p>\r\n<p>\r\n    The worst-case propagation delays for the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Altera Cyclone IV on the DE0-Nano<\/a> are found using the post-map Timing Analysis tool. The exact values depend on the model and speed grade of the FPGA, the silicon itself, voltage and the die temperature.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"results\">\r\n                    <tr>\r\n                        <th>\\(N\\)<\/th>\r\n                        <th colspan=\"3\">Timing Analysis<\/th>\r\n                        <th>Measured<\/th>\r\n                    <\/tr>\r\n                    <tr style=\"border-bottom: 1px solid #ddd;\">\r\n                        <th><\/th>\r\n                        <th>slow 85\u00b0C<\/th>\r\n                        <th>slow 0\u00b0C<\/th>\r\n                        <th>fast 0\u00b0C<\/th>\r\n                        <th>actual<\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">4-bits<\/td>\r\n                        <td style=\"text-align: right;\">6.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">6.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">4.3 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">8-bits<\/td>\r\n                        <td style=\"text-align: right;\">8.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">7.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">5.4 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">16-bits<\/td>\r\n                        <td style=\"text-align: right;\">15.7 ns<\/td>\r\n                        <td style=\"text-align: right;\">13.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">9.7 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">27-bits<\/td>\r\n                        <td style=\"text-align: right;\">20.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">18.0 ns<\/td>\r\n                        <td style=\"text-align: right;\">12.3 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">32-bits<\/td>\r\n                        <td style=\"text-align: right;\">26.0 ns<\/td>\r\n                        <td style=\"text-align: right;\">23.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">15.7 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">42-bits<\/td>\r\n                        <td style=\"text-align: right;\">30.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">26.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">18.1 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-ripplecarry-measurements2.svg\">\r\n                    <img class=\"wp-image-16751\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-adder-ripplecarry-measurements2.svg\" alt=\"\" width=\"100%\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Propagation delay in propagate-carry adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Borrow-propagate subtractor\r\n<\/h3>\r\n<p>\r\n    Similar to addition, the simplest subtraction method is <em>borrow-propagate<\/em>, as introduced in <a href=\"https:\/\/coert.vonk.one\/inquiries\/computer-math\/math-operations-using-gates-30710#rippleborrowsubtractor\">Chapter 7<\/a> of the inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8220;. Again, we will start by building a 1-bit subtractor (<code>fs<\/code>). The inputs <em>a<\/em> and <em>b<\/em> represent the 1-bit binary numbers being added. Output <em>d<\/em>, the difference. <em>l<sub>i<\/sub><\/em> and <em>l<sub>o<\/sub><\/em> are the incoming and outgoing borrow\/loan signals.\r\n<\/p>\r\n<p>\r\n    The outputs <em>d<\/em> and <em>l<sub>o<\/sub><\/em> can be expressed as a function of the inputs. The difference <em>d<\/em> is an Exclusive-OR function, just as the sum was for addition.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/subtractor\/fs-block.html\">\r\n                        <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/logic-simulation\/subtractor\/fs-block.svg\" alt=\"\" width=\"204\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"bottom: 0%; right: 0%;\">\r\n                            Animate\r\n                        <\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{align*}\r\n                            d&#038;=a \\oplus b \\oplus l_i \\\\\r\n                            l_o&#038;=\\overline{a} \\cdot b + l_i \\cdot (\\overline{a \\oplus b})\r\n                        \\end{align*}\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>\r\n                1-bit full subtractor\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    To build a 4-bit subtractor we combine four of these building blocks.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/subtractor\/4-bit borrow-propagate.html\">\r\n                        <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/logic-simulation\/subtractor\/4-bit borrow-propagate.svg\" alt=\"\" width=\"453\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"top: 0%; right: 0%;\">\r\n                            Animate\r\n                        <\/button>\r\n                    <\/a>\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>\r\n                4-bit borrow-propagate subtractor\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The implementation of the borrow-propagate subtractor is very similar to the adder can be found at GitHub.\r\n\r\n    <div class=\"flex-container tight\">\r\n         <a href=\"https:\/\/github.com\/cvonk\/FPGAmath\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Combined adder and subtractor\r\n<\/h3>\r\n<p>\r\n    Another method to subtract is based around the fact that \\(a &#8211; b = a + (-b)\\). This allows us to build a circuit that can add or subtract. When the operation input <em>op<\/em> equals <code>1<\/code>, it subtracts <em>b<\/em> from <em>a<\/em>, otherwise it adds the values.\r\n<\/p>\r\n<p>\r\n    Under two&#8217;s complement, subtracting <em>b<\/em> is the same as adding the bit-wise complement of <em>b<\/em> and adding <code>1<\/code>. The inputs <em>b<\/em> is negated by inverting its bits (using an XOR with signal <em>op<\/em>), and <code>1<\/code> is added by setting the least significant carry input to <code>1<\/code>. We can build this a 4-bit adder\/subtractor using <code>fa<\/code> blocks as shown below, where <em>r<\/em> is the result.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-addersubtractor-circuit.svg\">\r\n                    <img class=\"wp-image-17119 size-full\" title=\"(c) Copyright 2015-2022 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-addersubtractor-circuit.svg\" alt=\"(c) Copyright 2015-2022 Coert Vonk\" width=\"450\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                4-bit combined adder and subtractor\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Note that the circuit also includes a overflow detection for two&#8217;s complement. Overflow occurs when <em>c<sub>2<\/sub><\/em> differs from the final carry-out <em>c<sub>3<\/sub><\/em>.\r\n<\/p>\r\n<p>\r\n    In all these ripple carry adder and subtractors, the carry propagates from the lowest to the highest bit position. This propagation causes a delay that is linear with the number bits.\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Moving on from this math adder and subtractor using logic gates, the <a href=\"\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769\">next chapter<\/a> explores faster circuits.\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>","protected":false},"excerpt":{"rendered":"Implements an adder and subtractor using Verilog HDL.","protected":false},"author":5,"featured_media":17212,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[420],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Math adder and subtractor using logic gates - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Implements an adder and subtractor using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Math adder and subtractor using logic gates - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Implements an adder and subtractor using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-03T17:45:18+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-29T02:37:42+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Johan Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\",\"caption\":\"(c) Copyright 2016 Coert Vonk\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#webpage\",\"url\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766\",\"name\":\"Math adder and subtractor using logic gates - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#primaryimage\"},\"datePublished\":\"2015-10-03T17:45:18+00:00\",\"dateModified\":\"2022-04-29T02:37:42+00:00\",\"description\":\"Implements an adder and subtractor using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Building math circuits\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\/building-math-circuits\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Adder and subtractor circuits\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb\"},\"headline\":\"Adder and subtractor circuits\",\"datePublished\":\"2015-10-03T17:45:18+00:00\",\"dateModified\":\"2022-04-29T02:37:42+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#webpage\"},\"wordCount\":764,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\",\"articleSection\":[\"Building math circuits\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb\",\"name\":\"Johan Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g\",\"caption\":\"Johan Vonk\"},\"description\":\"I see education as the foundation upon which entrepreneurs are able to build innovative organizations and execute their vision for the future.\",\"sameAs\":[\"https:\/\/coert.vonk.one\/family\/johan\"],\"url\":\"/\/author\/johan-vonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Math adder and subtractor using logic gates - Coert Vonk","description":"Implements an adder and subtractor using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766","og_locale":"en_US","og_type":"article","og_title":"Math adder and subtractor using logic gates - Coert Vonk","og_description":"Implements an adder and subtractor using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","og_url":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766","og_site_name":"Coert Vonk","article_published_time":"2015-10-03T17:45:18+00:00","article_modified_time":"2022-04-29T02:37:42+00:00","twitter_card":"summary","twitter_image":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","twitter_misc":{"Written by":"Johan Vonk","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"]},{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#primaryimage","inLanguage":"en-US","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","caption":"(c) Copyright 2016 Coert Vonk"},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#webpage","url":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766","name":"Math adder and subtractor using logic gates - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#primaryimage"},"datePublished":"2015-10-03T17:45:18+00:00","dateModified":"2022-04-29T02:37:42+00:00","description":"Implements an adder and subtractor using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coert.vonk.one\/category\/hw"},{"@type":"ListItem","position":3,"name":"Building math circuits","item":"https:\/\/coert.vonk.one\/category\/hw\/building-math-circuits"},{"@type":"ListItem","position":4,"name":"Adder and subtractor circuits"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb"},"headline":"Adder and subtractor circuits","datePublished":"2015-10-03T17:45:18+00:00","dateModified":"2022-04-29T02:37:42+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#webpage"},"wordCount":764,"commentCount":0,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/parameterized-adder-and-subtractor-in-verilog-30766#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","articleSection":["Building math circuits"],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb","name":"Johan Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/#personlogo","inLanguage":"en-US","url":"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g","contentUrl":"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g","caption":"Johan Vonk"},"description":"I see education as the foundation upon which entrepreneurs are able to build innovative organizations and execute their vision for the future.","sameAs":["https:\/\/coert.vonk.one\/family\/johan"],"url":"/\/author\/johan-vonk"}]}},"_links":{"self":[{"href":"/\/wp-json\/wp\/v2\/posts\/30766"}],"collection":[{"href":"/\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"/\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/comments?post=30766"}],"version-history":[{"count":10,"href":"/\/wp-json\/wp\/v2\/posts\/30766\/revisions"}],"predecessor-version":[{"id":32797,"href":"/\/wp-json\/wp\/v2\/posts\/30766\/revisions\/32797"}],"wp:featuredmedia":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/media\/17212"}],"wp:attachment":[{"href":"/\/wp-json\/wp\/v2\/media?parent=30766"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"/\/wp-json\/wp\/v2\/categories?post=30766"},{"taxonomy":"post_tag","embeddable":true,"href":"/\/wp-json\/wp\/v2\/tags?post=30766"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}