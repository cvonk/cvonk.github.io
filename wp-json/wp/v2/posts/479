{"id":479,"date":"2009-11-18T08:50:00","date_gmt":"2009-11-18T16:50:00","guid":{"rendered":"http:\/\/www.coertvonk.com\/?p=479"},"modified":"2022-04-30T11:58:45","modified_gmt":"2022-04-30T18:58:45","slug":"snapshap-backup-rsync","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479","title":{"rendered":"Snapshot backup on Synology"},"content":{"rendered":"<p>\r\n    Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.\r\n<\/p>\r\n<p>\r\n    It uses &#8220;snapshot&#8221;-style backups with hard links to create the illusion of multiple, full backups without much of the space or processing overhead.\r\n<\/p>\r\n<p>\r\n    Scripts and configuration examples are given for \r\n\r\n    <ul>\r\n        <li>Linux clients<\/li>\r\n        <li>Windows clients (using cygwin)<\/li>\r\n        <li>Synology server<\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    Twenty years ago, I stumbled across Art Muler&#8217;s snapback script. At the time, my backup solution lacked a <em>bash<\/em> shell, so I massaged the script to run under <em>ash<\/em>. I also extended the snapshot rotation mechanism, and made it more robust to interrupted backups. Like so many other tools, it uses &#8220;snapshot&#8221;-style backups with hard links to create the illusion of multiple, full backups without much of the space or processing overhead.\r\n<\/p>\r\n<p>\r\n    The code is available at\r\n<\/p>\r\n<p>\r\n    <div class=\"flex-container tight\">\r\n        <figure>\r\n            <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/Snapshot_backup\"><img  title=\"\" src=https:\/\/socialify.git.ci\/cvonk\/Snapshot_backup\/image?description=1&#038;issues=1&#038;language=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\"\/><\/a>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h2>\r\n    Server side <!----------------------- SERVER SIDE ----------------------->\r\n<\/h2>\r\n<p>\r\n    Using the Synology control panel, create user &#8220;backup&#8221; with administrator rights, and make sure you can <code>ssh<\/code> into your box.  Here we&#8217;ll assume it is called <code>backup<\/code>.\r\n<\/p>\r\n\r\n<h3>\r\n    Scripts\r\n<\/h3>\r\n<p>\r\n    From the backup account (ssh backup@backup), create <code>~\/bin\/backup<\/code>, and give it execute-permissions (<em>chmod 755<\/em>)\r\n\r\n    <details>\r\n        <summary>\r\n            Source code <code>~\/bin\/backup<\/code>\r\n        <\/summary>\r\n        <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">#\/bin\/bash\r\n# GPL $Id$\r\necho \"start cron job\" | \/bin\/logger -s -t backup -p error\r\n\r\nLOGGER=\/bin\/logger\r\nCONFIG_DIR=${HOME}\/config\r\nRSYNC_BACKUP=${HOME}\/bin\/backup-using-rsync\r\nBACKUP_DIR=${HOME}\/data\r\nAWK=\/bin\/awk\r\nDF=\/bin\/df\r\nPASSWD_FILE=${HOME}\/.rsync.passwd\r\nLS=\/bin\/ls\r\nSED=\/bin\/sed\r\n\r\necho \"Starting $0 ...\"\r\necho \"Starting $0 ...\" | $LOGGER -s -t backup -p error\r\necho $USER\r\nwhoami\r\n\r\nif [ `whoami` != \"backup\" ]; then\r\n    echo \"This script must be run as backup\" 1>&2\r\n    exit 1\r\nfi\r\n\r\nIFS=$(echo -en \"\\n\\b\")\r\n\r\npushd ${CONFIG_DIR} \r\nfor node in *\/* ; do\r\n    echo \"${node}\"\r\n    $RSYNC_BACKUP \\\r\n        --password-file=${PASSWD_FILE} \\\r\n    --exclude-from=\"${CONFIG_DIR}\/${node}\" \\\r\n    $* \\\r\n    \"${node}\" \\\r\n    \"${BACKUP_DIR}\/${node}\" 2>&1 | $LOGGER -s -t backup -p error\r\ndone\r\npopd\r\n\r\n$DF -h  ${BACKUP_DIR} 2>&1 | $LOGGER -s -t backup -p error\r\n$DF -hi ${BACKUP_DIR} 2>&1 | $LOGGER -s -t backup -p error\r\n( cd ${BACKUP_DIR} ; $LS -dl --quote-name --time-style=long-iso *\/*\/* | awk '{ printf(\"stored backups: %08s \", $6); for (i=8;i<=NF;i++){printf \"%s \", $i}; printf \"\\n\"; }' ) | $LOGGER -s -t backup -p error\r\n\r\necho \"Done $0 ..\"\r\n            &#091;\/code&#093;\r\n    <\/details>\r\n<\/p>\r\n<p>\r\n    From the backup account (ssh backup@backup), create <code>~\/bin\/backup-using-rsync<\/code>, and give it execute-permissions (<em>chmod 755<\/em>)\r\n\r\n    <details>\r\n        <summary>\r\n            Source code <code>~\/bin\/backup-using-rsync<\/code>\r\n        <\/summary>\r\n    #!\/bin\/bash\r\n# GPL $Id$\r\n# ----------------------------------------------------------------------\r\n# rotating-filesystem-snapshot utility using 'rsync'\r\n#\r\n# inspired by http:\/\/www.mikerubel.org\/computers\/rsync_snapshots\r\n# ----------------------------------------------------------------------\r\n# probably still runs under \/bin\/ash if you want ..\r\n\r\n#set -o nounset  # do not allow uninitialized variables\r\n#set -o errexit  # exit if any statement returns an error value\r\n\r\n\r\n# ------------- file locations -----------------------------------------\r\n\r\n#SNAPSHOT_DEV=\"\/dev\/sda2\"\r\nSNAPSHOT_DIR=~backup\/data\r\nLOCKFILE=~backup\/`basename $0`.pid\r\n\r\n# ------------- system commands used by this script --------------------\r\n\r\nECHO=\/bin\/echo\r\nCUT=\/bin\/cut\r\nPING=\/bin\/ping\r\nGREP=\/bin\/grep\r\nSED=\/bin\/sed\r\nAWK=\/bin\/awk\r\nPS=\/bin\/ps\r\nDIRNAME=\/bin\/dirname\r\nDATE=\/bin\/date\r\n\r\n# after parsing the command line parameters, these the following commands\r\n# will be prefixed with $DRY\r\n\r\n\r\n#MOUNT=\/bin\/mount\r\nMKDIR=\/bin\/mkdir\r\nCHMOD=\/bin\/chmod\r\nRM=\/bin\/rm\r\nMV=\/bin\/mv\r\nCP=\/bin\/cp\r\nTOUCH=\/bin\/touch\r\nRSYNC=\/bin\/rsync\r\n\r\n# ------------- other local variables ----------------------------------\r\n\r\nPROGRAM=`basename $0`\r\nUSAGE=\"\r\nUsage: $PROGRAM [--parameters] SRC DST\r\n    --verbose              - increase verbosity\r\n    --quiet                - decrease verbosity\r\n    --exclude=PATTERN      - exclude files matching PATTERN\r\n    --exclude-from=FILE    - patterns listed in FILE\r\n    --include-from=FILE    - don't exclude patterns listed in FILE\r\n    --dry-run              - do not start any file transfers\r\n                                just report the actions it would have taken\r\n    --remove-last-daily    - remove the last backup\r\n    --version              - shows revision number\r\nExample:\r\n    $PROGRAM --verbose --exclude-from=\/etc\/backup\/hostname\/module rsync:\/\/hostname\/module $SNAPSHOT_DIR\/hostname\/module\r\n\"\r\n\r\n# ------------- the script itself --------------------------------------\r\n\r\n\r\nusage() {\r\n    $ECHO \"$USAGE\"\r\n}\r\n\r\ncase \"$1\" in\r\n    --help|\"\")\r\n        usage\r\n        exit 0\r\n        ;;\r\n    --version)\r\n        REVISION=`$ECHO '$Revision 0.1$'|tr -cd '0-9.'`\r\n        $ECHO \"$PROGRAM version $REVISION\"\r\n        exit 0\r\n        ;;\r\n    --help)\r\n        usage\r\n        exit 0\r\n        ;;\r\nesac\r\n\r\n# ------ print the error message to stderr, and remount r\/o-------------\r\n\r\n\r\ndie() {\r\n    $ECHO \"$PROGRAM: $*\"\r\n    $ECHO \"use '$PROGRAM --help' for help\"\r\n    #$MOUNT -t ext3 -o remount,ro $SNAPSHOT_DEV $SNAPSHOT_DIR\r\n    exit 1\r\n}\r\n\r\n# ------ execute a command, and exit on error --------------------------\r\n\r\n\r\ncheckExit() {\r\n#    $* || die \"ERROR: $*\"\r\n        \"$1\" \"$2\" \"$3\" \"$4\" \"$5\" \"$6\" \"$7\" \"$8\" \"$9\" || die \"ERROR: $*\"\r\n}\r\n\r\n# ----- returns 0 if $LOCKFILE exists, 1 otherwise ---------------------\r\n\r\n\r\nremoveOldLock() {\r\n    if [ -e ${LOCKFILE} ] ; then\r\n        a=`cat ${LOCKFILE}`                                                                                                                   \r\n        if ! `$PS | $AWK \"\\\\$1 == \\\"$a\\\" { exit 1 }\"` ; then                                                                                    \r\n            $ECHO \"$PROGRAM:isLocked: WARNING cleaning old lockfile\"                                                                          \r\n            rm -f $LOCKFILE                                                                                                                   \r\n        fi\r\n    fi                                                                                                                                    \r\n}\r\n\r\nisLockedOBSOLETE() {\r\n    if [ ! -e $LOCKFILE ] ; then\r\n        return 0\r\n    fi\r\n\r\n    # if the process that created the lock is dead, then cleanup its lockfile     \r\n    a=`cat ${LOCKFILE}`                                                 \r\n    if ! `$PS | $AWK \"\\\\$1 == \\\"$a\\\" { exit 1 }\"` ; then\r\n        $ECHO \"$PROGRAM:isLocked: WARNING cleaning old lockfile\"\r\n        rm -f $LOCKFILE                                         \r\n        return 0;                                                       \r\n    fi                                                 \r\n                                                                    \r\n    return 1;\r\n}\r\n\r\n\r\n# ------- cleanup TERM, EXIT and INT traps -----------------------------\r\n\r\ncleanup() {\r\n    trap - EXIT HUP INT QUIT TERM\r\n\r\n    if [ -e $LOCKFILE ] ; then    \r\n        LOCKFILE_PROCID=`cat $LOCKFILE`\r\n        if [ \"$$\" = \"$LOCKFILE_PROCID\" ] ; then\r\n            $RM -f $LOCKFILE\r\n        else\r\n            $ECHO \"$PROGRAM: Can't remove lockfile ($LOCKFILE)\"\r\n            $ECHO \"process $LOCKFILE_PROCID created the lock, while this process is $$)\"\r\n        fi\r\n    fi\r\n    exit $1\r\n}\r\n\r\n\r\n# ----- print to stdout when the debug level $VERB >= $1 ---------------\r\n\r\nverbose() {\r\n    local LEVEL=\"$1\"\r\n    [ ! -z \"$LEVEL\" ] || die \"verbose: unspecified LEVEL\"\r\n\r\n    if [ $VERB -ge $LEVEL ] ; then\r\n        shift\r\n        echo \"$PROGRAM: $*\"\r\n    fi\r\n}\r\n\r\n\r\n# ------ prints directory, if debug level $VERB >= $1 ------------------\r\n\r\n\r\nverbose_ls() {\r\n    [ $VERB -lt $1 ] || ( shift ; ls -l \"$*\/\" )\r\n}\r\n\r\n\r\n# --- returns 0 if rsyncd is running on host $1, 1 otherwise -----------\r\n\r\nrsyncRunningOnRemote() {\r\n    local SOURCE=$1\r\n    local HOSTNAME\r\n\r\n    [ ! -z \"$SOURCE\" ] || die \"rsyncRunningOnRemote: unspecified source\"\r\n\r\n    # was if $ECHO $SOURCE | grep '^rsync:\/\/'  2>\/dev\/null >\/dev\/null ; then\r\n\r\n        if [ -z \"$SSH\" ] ; then\r\n            HOSTNAME=`$ECHO \"$SOURCE\" | $CUT -d\/ -f3`:\r\n        else\r\n            HOSTNAME=`$ECHO \"$SOURCE\" | $CUT -d: -f1`\r\n        fi\r\n        echo $HOSTNAME >&2\r\n        if $RSYNC $SSH $PWDFILE $HOSTNAME:  2>\/dev\/null >\/dev\/null ; then\r\n            return 0\r\n        else\r\n            return 1\r\n        fi\r\n#    else\r\n#        return 1\r\n#    fi\r\n}\r\n\r\n# ------ returns the name of the oldest daily\/weekly backup directory --\r\n\r\n\r\nfindOldest() {\r\n    local TYPE=\"$1\"\r\n    local ALL_DAILY\r\n    local OLDEST_DAILY\r\n\r\n    [ ! -z \"$TYPE\" ] || die \"findOldest: unspecified duration {daily|weekly}\"\r\n\r\n    ALL_DAILY=`ls -d -r \"$DST\/$TYPE\".* 2>\/dev\/null`\r\n    OLDEST_DAILY=`$ECHO $ALL_DAILY | $SED \"s,^$DST\/,,\" | $CUT -d' ' -f1`\r\n\r\n    echo $OLDEST_DAILY\r\n}\r\n\r\n# ----- returns 0 if weekly backup should be made, 1 otherwise ---------\r\n\r\n\r\nshouldMakeWeeklyBackup() {\r\n    local OLDEST_DAILY\r\n    local TODAY_DAY TODAY_YEAR\r\n    local OLDEST_DAILY_DAY OLDEST_DAILY_YEAR\r\n\r\n    OLDEST_DAILY=`findOldest daily`\r\n\r\n    # no point in making a weekly backup, if there is no daily one\r\n    if [ -z $OLDEST_DAILY ] ; then\r\n        return 1\r\n    fi\r\n\r\n    # only make a weekly backup if the oldest daily backup is at least 7 days old\r\n\r\n    TODAY_DAY=`$DATE +%j | $SED 's\/^0*\/\/g'` # leading 0 would represent Octal\r\n    TODAY_YEAR=`$DATE +%Y`\r\n\r\n    OLDEST_DAILY_DAY=`$DATE -r \"$DST\/$OLDEST_DAILY\" +%j | $SED 's\/^0*\/\/g'`\r\n    OLDEST_DAILY_YEAR=`$DATE -r \"$DST\/$OLDEST_DAILY\" +%Y`\r\n\r\n\r\n#$DATE -r \"$DST\/$OLDEST_DAILY\" +%j | $SED 's\/^0*\/\/g' >&2\r\n#echo OLDEST_DAILY_DAY=${OLDEST_DAILY_DAY} >&2\r\n#echo OLDEST_DAILY_YEAR=${OLDEST_DAILY_YEAR} >&2\r\n\r\n    DAY_OF_FIRST_WEEKLY=$((OLDEST_DAILY_DAY+7))\r\n\r\n    if [ $TODAY_YEAR -ne $OLDEST_DAILY_YEAR ] ; then\r\n        TODAY_DAY=$((TODAY_DAY+356*(TODAY_YEAR-OLDEST_DAILY_YEAR)))\r\n    fi\r\n\r\n    if [ $TODAY_DAY -lt $DAY_OF_FIRST_WEEKLY ] ; then\r\n        verbose 2 \"No weekly backup, $TODAY_DAY -lt $DAY_OF_FIRST_WEEKLY\"\r\n        return 1\r\n    fi\r\n\r\n    # make a weekly backup, if the last weekly backup was >= 14 days ago, or\r\n    # there was no last weekly backup.\r\n\r\n    TODAY_DAY=`$DATE +%j | $SED 's\/^0*\/\/g'`\r\n    TODAY_YEAR=`$DATE +%Y`\r\n\r\n    if [ -d \"$DST\/weekly.0\" ] ; then\r\n        LAST_WEEKLY_DAY=`$DATE -r \"$DST\/weekly.0\" +%j | $SED 's\/^0*\/\/g'`\r\n        LAST_WEEKLY_YEAR=`$DATE -r \"$DST\/weekly.0\" +%Y`\r\n    else\r\n        LAST_WEEKLY_DAY=0\r\n        LAST_WEEKLY_YEAR=0\r\n    fi\r\n\r\n    DAY_OF_NEXT_WEEKLY=$((LAST_WEEKLY_DAY+14))\r\n    if [ $TODAY_YEAR -ne $LAST_WEEKLY_YEAR ] ; then\r\n        TODAY_DAY=$((TODAY_DAY+365))\r\n    fi\r\n\r\n    if [ $TODAY_DAY -ge $DAY_OF_NEXT_WEEKLY ] ; then\r\n        verbose 2 \"Weekly backup, today($TODAY_DAY) -ge next($DAY_OF_NEXT_WEEKLY)\"\r\n        return 0\r\n    else\r\n        verbose 2 \"No weekly backup, today($TODAY_DAY) -ge next($DAY_OF_NEXT_WEEKLY)\"\r\n        return 1\r\n    fi\r\n}\r\n\r\n\r\n# ----- renumber the $1 {daily,weekly} backups, starting at $2 ---------\r\n\r\n\r\nrenumber() {\r\n    local TYPE=\"$1\"\r\n    local START=\"$2\"\r\n\r\n    [ ! -z \"$TYPE\" ] || die \"renumber: missing TYPE\"\r\n    [ ! -z \"$START\" ] || die \"renumber: missing START\"\r\n\r\n    [ \"$TYPE\" = \"daily\" ] || [ \"$TYPE\" = \"weekly\" ] || die \"renumber: incorrect TYPE\"\r\n\r\necho RENUMBER\r\n\r\n    for item in \"$DST\/$TYPE\".* ; do\r\n        $MV \"$item\" \"$item.tmp\"\r\n    done\r\n        \r\n    COUNT=$START\r\n    for item in \"$DST\/$TYPE\".* ; do\r\n        ITEM_NEW=`$DIRNAME \"$item\"`\/$TYPE.$COUNT\r\n        $MV \"$item\" \"$ITEM_NEW\"\r\n        COUNT=$((COUNT+1))\r\n    done    \t\r\n}\r\n\r\n# ----- create the backup ------------------------------------ ---------\r\n\r\n\r\nbackup() {\r\n    local OLDEST_DAILY\r\n\r\n#echo 1\r\n#echo \\\"$DST\\\"\r\n#    echo $MKDIR -p \"$DST\" || die \"backup: $MKDIR -p $DST\"\r\n#echo 2\r\n\r\n    verbose 2 \"STEP 0: the status quo\"\r\n    verbose_ls 2 \"$DST\"\r\n\r\n    if shouldMakeWeeklyBackup ; then\r\n\r\n        verbose 2 \"STEP 1: delete weekly.2 backup, if it exists\"\r\n    \r\n        if [ -d \"$DST\/weekly.2\" ] ; then\r\n            $RM -rf \"$DST\/weekly.2\"\r\n        fi ;\r\n    \r\n        verbose_ls 2 \"$DST\"\r\n        verbose 2 \"STEP 2: shift the middle weekly backups(s) back by one,\"\\\r\n                    \"if they exist\"\r\n    \r\n        renumber weekly 1\r\n\r\n        verbose_ls 2 \"$DST\"\r\n\r\n        OLDEST_DAILY=`findOldest daily`\r\n#echo OLDEST_DAILY=${OLDEST_DAILY}\r\n\r\n        verbose 2 \"STEP 3: make a hard-link-only (except for dirs) copy of\"\\\r\n                    \"$OLDEST_DAILY, into weekly.0\"\r\n\r\n        if [ -d \"$DST\/$OLDEST_DAILY\" ] ; then\r\n            #echo $CP -al \"$DST\/$OLDEST_DAILY\" \"$DST\/weekly.0\"\r\n            $CP -al \"$DST\/$OLDEST_DAILY\" \"$DST\/weekly.0\"\r\n        fi\r\n\r\n        verbose_ls 2 \"$DST\"\r\n        \r\n        # note: do *not* update the mtime of weekly.0; it will reflect\r\n        # when daily.7 was made, which should be correct.\r\n    else\r\n        verbose 2 \"STEP 1: no weekly backup needed, skipping STEP 2 and 3\"\r\n    fi\r\n\r\n    verbose 2 \"STEP 4: delete daily.7 backup, if it exists\"\r\n\r\n    if [ -d \"$DST\/daily.7\" ] ; then\r\n        $RM -rf \"$DST\/daily.7\"\r\n    fi\r\n    \r\n    verbose_ls 2 \"$DST\"\r\n    verbose 2 \"STEP 5: shift the middle backups(s) back by one, if they exist\"\r\n\r\n    renumber daily 1\r\n\r\n    verbose_ls 2 \"$DST\"\r\n    verbose 2 \"STEP 6: make a hard-link-only (except for dirs) copy of the\"\\\r\n            \"latest backup, if that exists\"\r\n\r\n    if [ -d \"$DST\/daily.1\" ] ; then\r\n        $CP -al \"$DST\/daily.1\" \"$DST\/daily.0\"\r\n    else\r\n        $MKDIR -p \"$DST\/daily.0\"\r\n        $CHMOD 755 \"$DST\/daily.0\"\r\n    fi;\r\n\r\n    verbose_ls 2 \"$DST\"\r\n    verbose 2 \"STEP 7: rsync from $SRC to $DST\/daily.0\"\r\n\r\n    # (notice that rsync behaves like cp --remove-destination by default, so\r\n    # the destination is unlinked first.  If it were not so, this would copy\r\n    # over the other backup(s) too!\r\n\r\n    verbose 1 \"$RSYNC $SSH $PWDFILE  --archive --delete --delete-excluded $PARAM $SRC $DST\/daily.0\"\r\n    verbose 0 \"$SRC\"\r\n\r\n    echo ============================================================\r\n    echo $DRY $RSYNC $SSH $PWDFILE --archive --delete --delete-excluded $PARAM --exclude-from=\\\"$EXCLUDEFROM\\\" \\\"$SRC\\\" \\\"$DST\/daily.0\\\"\r\n    echo ============================================================\r\n    \r\n    # --compress\r\n    $DRY $RSYNC $SSH $PWDFILE --archive --delete --delete-excluded $PARAM --exclude-from=\"$EXCLUDEFROM\" \"$SRC\" \"$DST\/daily.0\"\r\n\r\n    verbose 1 \"$RSYNC done\"\r\n    verbose 2 \"STEP 8: update the mtime of daily.0 to reflect the backup time\"\r\n\r\n    $TOUCH \"$DST\/daily.0\"\r\n\r\n    # at the end of the week, the oldest daily backup, becomes last weeks\r\n    # backup\r\n\r\n    verbose_ls 2 \"$DST\"\r\n    verbose 1 \"STEP 9: done\"\r\n}\r\n\r\n# ----- remove the last daily backup -----------------------------------\r\n\r\n\r\nremoveLastDaily() {\r\n    verbose 2 \"STEP 1: renumbering daily backups starting at ($DST\/daily.0)\"\r\n\r\n    renumber daily 0\r\n\r\n    verbose 2 \"STEP 2: deleting the newest backup, if it exists \"\\\r\n                \"($DST\/daily.0)\"\r\n\r\n    if [ -d \"$DST\/daily.0\" ] ; then\r\n        $RM -rf \"$DST\/daily.0\"\r\n\r\n        verbose 2 \"STEP 3: renumbering daily backups starting at \"\\\r\n                    \"($DST\/daily.0)\"\r\n\r\n        renumber daily 0\r\n    fi\r\n}\r\n\r\n# ----- remount the file system ----------------------------------------\r\n\r\nremount() {\r\n    local MOUNT_MODE=\"$1\"\r\n    [ ! -z \"$MOUNT_MODE\" ] || die \"remount, missing MOUNT_MODE\"\r\n\r\n    #$MOUNT -t ext3 -o remount,$MOUNT_MODE $SNAPSHOT_DEV $SNAPSHOT_DIR\r\n}\r\n\r\n# ------------- trap errors --------------------------------------------\r\n\r\nfunction err_trap_handler()\r\n{\r\n    SCRIPTNAME=\"$0\"\r\n    LASTLINE=\"$1\"\r\n    LASTERR=\"$2\"\r\n    \r\n    die \"${SCRIPTNAME}: line ${LASTLINE}: exit status of last command: ${LASTERR}\"\r\n}\r\n\r\n# ------------- main ---------------------------------------------------\r\n\r\nPARAM=\r\nVERB=0\r\nDRY=\r\nREMOVE_LAST_DAILY=\r\nSSH=\r\nPWDFILE=\r\nSRC=\r\nDST=\r\nEXCLUDEFROM=\r\n\r\n# trap commands with non-zero exit code\r\ntrap 'err_trap_handler ${LINENO} $?' ERR\r\n\r\nwhile [ -n \"$1\" ] ; do\r\n    case $1 in\r\n            --verbose)\r\n            shift\r\n            VERB=$((VERB+1))\r\n            [ $VERB -ge 2 ] && PARAM=\"$PARAM --verbose\"\r\n            ;;\r\n        --quiet)\r\n            PARAM=\"$PARAM $1\"\r\n            shift\r\n            [ $VERB -eq 0 ] || VERB=$((VERB-1))\r\n            ;;\r\n        --help | -h)\r\n            shift;\r\n            usage\r\n            exit 1;\r\n            ;;\r\n        --dry-run)\r\n            PARAM=\"$PARAM $1\"\r\n            shift;\r\n            DRY=\"$ECHO\"\r\n            ;;\r\n        --remove-last-daily)\r\n            shift;\r\n            REMOVE_LAST_DAILY=y\r\n            ;;\r\n        --password-file*)\r\n            PWDFILE=\"$1\"\r\n            shift\r\n            ;;\r\n        --exclude-from*)\r\n            EXCLUDEFROM=${1:15}\r\n            shift\r\n            ;;\r\n        -*)\r\n            PARAM=\"$PARAM $1\"\r\n            shift\r\n            ;;\r\n        *)\r\n            if [ -z \"$SRC\" ] ; then\r\n            if [[ \"$1\" == *\\.ssh* ]] ; then\r\n                    # use rsync over SSH to backup remove hosts\r\n                    # assumes that ~\/.ssh\/config contains the connection info\r\n                    #   such as port# and keys to use.\r\n                    SSH=\"-e '\/bin\/ssh'\"\r\n                    PWDFILE=\"\"\t\t\t# ignore \"--password-file\"\r\n                    SRC=${1\/\\\/\/:}\/\t\t# replace \/ with :\r\n                    echo RSYNCoSSH SSH=$SSH SRC=$SRC\r\n                else\r\n                    # use rsyhostdomain nc protocol to backup hosts on the LAN\r\n                    SRC=rsync:\/\/backup@$1\r\n                    PARAM=\"$PARAM --chmod=u=rwx\"\t# make everything accessible\r\n                    echo RSYNC PARAM=$PARAM SRC=$SRC\r\n                fi\r\n            else\r\n                if [ -z \"$DST\" ] ; then\r\n                    DST=$1\r\n                else\r\n                    die \"ignoring parameter '$1'\"\r\n                fi\r\n            fi\r\n            shift\r\n        ;;\r\n    esac\r\ndone\r\n\r\nRSYNC_VERS=`$RSYNC --version | $AWK '$1 == \"rsync\" && $2 == \"version\" { print $3 }'`\r\n\r\n[ ! -z \"$SRC\" ] || die \"source not specified\"\r\n[ ! -z \"$DST\" ] || die \"destination not specified\"\r\n\r\n# [ `id -u` = 0 ] || die \"only root can do that\"\r\n\r\n#was:\r\n#trap 'cleanup' TERM EXIT INT  # catch kill, script exit and int\r\n\r\n# The 1st trap removes the lock at the end of the script.  The 2nd trap causes the\r\n# script to terminate after receiving one of the specified signals.  Before the\r\n# script terminates, the trap for \"signal EXIT\" is executed, effectively removing\r\n# the lock.\r\ntrap 'cleanup' EXIT\r\ntrap 'exit 2' HUP INT QUIT TERM\r\n\r\necho testing for lock\r\nif [ -z $DRY ] ; then\r\n    mkdir -p \/var\/lock\r\n\r\n    echo removing old lock\r\n    removeOldLock\r\n    \r\n        echo creating new lock\r\n    if ( set -o noclobber ; echo \"$$\" > $LOCKFILE ) 2> \/dev\/null ; then\r\n        trap 'cleanup' TERM EXIT INT  # clean up lockfile at kill, script exit or ^c\r\n    else\r\n        die \"Failed to acquire lock: $LOCKFILE held by $(cat $LOCKFILE)\"\r\n    fi\r\n            echo got the lock\r\nfi\r\n\r\nverbose 2 \"Backup '$SRC' -> '$DST'\"\r\nverbose 2 \"parameters: '$PARAM'\"\r\n\r\nif [ ! -z $REMOVE_LAST_DAILY ] ; then\r\n    removeLastDaily\r\n    exit 0\r\nfi\r\n\r\nif rsyncRunningOnRemote \"$SRC\" ; then\r\n    remount rw\r\n    backup\r\n    RET=$?\r\n    remount ro\r\nelse\r\n    $ECHO \"RSYNC daemon not running on '$SRC'\"\r\n    RET=1\r\nfi\r\n\r\nexit $RET<\/pre>\r\n    <\/details>\r\n<\/p>\r\n\r\n<h3>\r\n    Configuration files\r\n<\/h3>\r\n<p>\r\n    The configuration file name indicate what machines should be backed up. The contents of the file dictate what files should be excluded from the backup.\r\n<\/p>\r\n\r\n<h4>\r\n    For Windows clients\r\n<\/h4>\r\n<p>\r\n    For example, the file <code>~\/config\/hostname\/users<\/code>, tells the the script that module \"users\" on client \"hostname\" should be backed up.\r\n\r\n    <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">- \/User Name\/Documents\/.emacs.d\/auto-save-list\/\r\n- \/User Name\/Documents\/.bash_history\r\n- \/User Name\/Videos\/Layout\/releases\/*\/*.iso<\/pre>\r\n    <\/details>\r\n<\/p>\r\n<p>\r\n    Create a configuration file: <code>~\/config\/hostname\/settings<\/code>\r\n\r\n    <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">- \/Default\/\r\n- \/Default User\/\r\n- \/HelpAssistant\/\r\n- \/LocalService\/\r\n- \/NetworkService\/\r\n- \/All Users\/Microsoft\/Windows Defender\/\r\n- \/All Users\/Microsoft\/Search\/\r\n- \/All Users\/Microsoft\/RAC\/\r\n- \/All Users\/Microsoft\/eHome\/\r\n- \/*\/ntuser.dat*\r\n- \/*\/AppData\/\r\n- \/*\/Application Data\/\r\n- \/*\/Local Settings\/\r\n- \/*\/My Documents\/\r\n- \/*\/NetHood\/\r\n- \/*\/PrintHood\/\r\n- \/*\/Recent\/\r\n- \/*\/Searches\/<\/pre>\r\n<\/p>\r\n\r\n<h4>\r\n    For Linux clients\r\n<\/h4>\r\n<p>\r\n    We will connect to Linux clients over secure shell (SSH).\r\n    We assume you are familiar with configuring SSH.\r\n<\/p>\r\n<p>\r\n    Install the server's private key <code>~\/.ssh\/remote.key<\/code> and create <code>~\/.ssh\/config<\/code> with the connection details.  The alias of the remote system must end in <code>.ssh<\/code>.  This lets the script know to establish an SSH connection.\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">Host remote.ssh\r\n\tIdentityFile ~\/.ssh\/remote.key\r\n\tPort 22\r\n\tUser username\r\n\tHostname remote.com\r\n\tPasswordAuthentication no<\/pre>\r\n<\/p>\r\n<p>\r\n    Using password authentication, copy the public key to the client\r\n<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">[backup@backup]$ scp ~\/.ssh\/remote backup@remote.com:~\/.ssh\/authorized_keys<\/pre>\r\n<\/p>\r\n<p>\r\n    Create a matching configuration file: <code>~\/config\/remote.ssh\/users<\/code> as shown earlier.\r\n<\/p>\r\n\r\n<h2>\r\n    Client side <!----------------------- CLIENT SIDE ----------------------->\r\n<\/h2>\r\n<p>\r\n    We will use plain <code>rsync<\/code> for Windows clients, but run it over SSH for Linux clients.\r\n<\/p>\r\n<h3>\r\n    Linux\r\n<\/h3>\r\n<p>\r\n    Make sure <code>rsync<\/code> and the SSH deamon are installed.  Make sure you can ssh in from the server using its alias (from ~\/.ssh\/config).\r\n<\/p>\r\n<h4>\r\n    SQL databases\r\n<\/h2>\r\n<p>\r\n    To backup a SQL database, you need to first dump it to file on the host, so it becomes part of the backup.\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/bash\r\n\/bin\/whoami\r\nset -x\r\nFILESTOKEEP=3\r\nBKBASE=${HOME}\/sql_backup\r\nFNBASE=${BKBASE}\/`date +%Y-%m-%d`\r\nmkdir -p ${BKBASE}\r\necho ${FNBASE}\r\nfor ii in dbase1 dbase2 ; do\r\n    echo \"${FNBASE}_${ii}\"\r\n    mysqldump --defaults-extra-file=${BKBASE}\/.${ii}.cnf my_${ii} | gzip > ${FNBASE}_${ii}.sql.gz\r\n    ls -tr ${BKBASE}\/*${ii}.sql.gz | head -n -3 | xargs --no-run-if-empty rm &2>\/dev\/null\r\ndone<\/pre>\r\n<\/p>\r\n<p>\r\n    Create a configuration file for each SQL database.  For example <code>dbase1.cnf<\/code>\r\n\r\n    <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">[client]\r\nuser=my_dbase1_user\r\npassword=\"your_dbase1_passwd\"\r\nno-tablespaces<\/pre>\r\n<\/p>\r\n\r\n<h3>\r\n    MS Windows\r\n<\/h3>\r\n<p>\r\n    MS Windows does not include native versions of the popular rsync or rsyncd.  We will install a CygWin-based rsync:\r\n\r\n    <ol>\r\n        <li>\r\n            Download and install <em>cwRsyncServer_4.1.0_Installer.zip<\/em> to <code>\"C:\\Program Files (x86)\\rsyncd\"<\/code>.  Let it create a new service account \"backup\"\r\n        <\/li>\r\n        <li>\r\n            Download and install <em>cwRsync_5.5.0_Installer<\/em>.  Use these binaries to overwrite the ones <code>\"C:\\Program Files (x86)\\rsyncd\"<\/code>.        \r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    Create a secrets file (<code>C:\\Program Files (x86)\\rsyncd\\rsyncd.secrets\"<\/code>). Yeah, yeah, I know .. but it beats no authentication.\r\n\r\n    <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">backup:your_rsync_password<\/pre>\r\n<\/p>\r\n<p>\r\n    To hide the backup user, change\/add the Windows registry HKEY_LOCAL_MACHINE > SOFTWARE > Microsoft > Windows NT > CurrentVersion > Winlogon > SpecialAccounts > UserList > \"backup\", to dword:00000000\r\n<\/p>\r\n<p>\r\n    Configure the rsync deamon (<code>C:\\Program Files (x86)\\rsyncd\\rsyncd.conf<\/code>)\r\n\r\n    <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">use chroot = false\r\nstrict modes = false\r\nhosts allow = backup localhost\r\nauth users = backup\r\nsecrets file = rsyncd.secrets\r\nlog file = rsyncd.log\r\n\r\n[users]\r\n    path = \/cygdrive\/c\/Users\/\r\n    read only = yes\r\n    list = yes\r\n\r\n[settings]\r\n    path = \/cygdrive\/c\/Users\/\r\n    read only = yes\r\n    list = yes<\/pre>\r\n<\/p>\r\n<p>\r\n    Make sure the service starts automatically (Computer Management > Services and Applications > Services > RsyncServer).  Change the startup type to <em>automatic<\/em>, apply and start the service.  I had to add the startup parameter \"--start RsyncServer\".\r\n<\/p>\r\n<p>\r\n    Verify that your PC is listening (<code>netstat -na | Select-String \"873\"<\/code>), and the firewall allows the incoming connection to <code>rsync.exe<\/code>.\r\n<\/p>\r\n\r\n<h2>\r\n    Back on the server <!----------------------- BACK ON THE SERVER ----------------------->\r\n<\/h2>\r\n\r\n<h3>\r\n    Run some tests, and start a backup\r\n<\/h3>\r\n<p>\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">[backup@backup]$ rsync rsync:\/\/hostname\/users\/     # test rsync (requires passwd)\r\n\r\nbackup --verbose --verbose\r\n# #meanwhile ..\r\ntail -f \/var\/log\/messages<\/pre>\r\n<\/p>\r\n\r\n<h3>\r\n    Schedule a daily backup\r\n<\/h3>\r\n<p>\r\n    Using the Synology control panel use the Task Scheduler to schedule <code>\/var\/services\/homes\/backup\/bin\/backup -v<\/code> to run daily.  \r\n<\/p>\r\n\r\n<h2>\r\n    Reporting <!----------------------- REPORTING ----------------------->\r\n<\/h2>\r\n<p>\r\n    The <code>backup<\/code> script relies on syslog to communicate with the outside world. We will use logwatch to dig through the syslog files. You can download logwatch from <a href=\"https:\/\/sourceforge.net\/projects\/logwatch\/files\/logwatch-7.6\/\">logwatch<\/a>.  Just run the install schript on the server, and point it to your python binary (\/bin\/python).\r\n<\/p>\r\n\r\n<h3>\r\n    Setup\r\n<\/h3>\r\n<\/p>\r\n    Logwatch is set up to run once a day and generates a single email gathering the backup log analysis. To allow logwatch to check <em>backup-using-rsync<\/em> logs you need to install this script & conf file.\r\n<\/p>\r\n<p>\r\n    Define which log files should be analyzed (<em>vi \/etc\/logwatch\/conf\/logfiles\/backup.conf<\/em>)\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\"># GPL $Id$\r\n# defines which log files should be analyzed for service backup\r\n\r\nLogFile = messages\r\nArchive = messages-*<\/pre>\r\n<\/p>\r\n<p>\r\n    On the syslog server, define the service and script, but creating the following files:\r\n\r\n    <details>\r\n        <summary>\r\n            Logwatch configuration <code>\/etc\/logwatch\/conf\/services\/backup.conf<\/code>\r\n        <\/summary>\r\n\r\n        <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\"># GPL $Id$\r\n# defines the service logwatch\r\n\r\nTitle = \"BACKUP script (backup)\"\r\n\r\nLogFile = messages\r\n*OnlyService = backup\r\n*OnlyHost = backup\r\n*RemoveHeaders =<\/pre>\r\n    <\/details>\r\n<\/p>\r\n<p>\r\n    <details>\r\n        <summary>\r\n            Logwatch script <code>\/etc\/logwatch\/scripts\/services\/backup<\/code>\r\n        <\/summary>\r\n        <pre class=\"brush: perl; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/perl\r\n# GPL $Id$\r\n# script for BACK logwatch for service backup\r\n\r\n# example:\r\n#  export show_only_server=truus.lan.vonk\r\n#  logwatch --archives --range yesterday \\\r\n#           --hostname back.vonk --service backup --mailto root\r\n\r\n$ShowOnlyServer    = $ENV{'show_only_server'}    || \"\";\r\n$ShowSuccess       = $ENV{'show_successful'}     || 1;\r\n$ShowFailed        = $ENV{'show_failed'}         || 1;\r\n$ShowIOerror       = $ENV{'show_io_error'}       || 1;\r\n$ShowVanishedFiles = $ENV{'show_vanished_files'} || 1;\r\n$ShowFailedFiles   = $ENV{'show_failed_files'}   || 1;\r\n$ShowDiskFree      = $ENV{'show_disk_free'}      || 1;\r\n$ShowStored        = $ENV{'show_stored'}         || 1;\r\n$ShowUnmatched     = $ENV{'show_unmatched'}      || ( $ShowOnlyServer eq \"\" );\r\n\r\n\r\nsub showServer {\r\n    my($server) = @_;\r\n    return ( length($ShowOnlyServer) == 0 or ( $ShowOnlyServer eq $server ) );\r\n}\r\n\r\n\r\nwhile (defined($ThisLine = <STDIN>)) {\r\n\r\n    if ( ($Server,$Service) = \r\n    \t ($ThisLine =~ \/RSYNC daemon not running on \\'rsync:\\\/\\\/(.*?)\\\/(.*?)\\'\/i ) ) {\r\n\r\n        $CurrServer=\"\";\r\n        $CurrService=\"\";\r\n        if ( showServer($Server) ) {\r\n            $Failed->{$Server}->{$Service}++;\r\n        }\r\n\r\n    } elsif ( ($Server,$Service) = \r\n        ($ThisLine =~ \/rsync-backup: rsync:\\\/\\\/(.*?)\\\/(.*?)$\/i ) ) {\r\n\r\n        $CurrServer=$Server;\r\n        $CurrService=$Service;\r\n        if ( showServer($Server) ) {\r\n            $Success->{$Server}->{$Service}++;\r\n        }\r\n\r\n    } elsif ( ($FileName,$Service) =\r\n        ($ThisLine =~ \/file has vanished: \\\"(.*?)\\\" \\(in (.*?)\\).*$\/i ) ) {\r\n\r\n        if ( showServer($Server) ) {\r\n            $VanishedFiles->{$CurrServer}->{$Service}->{$FileName}++;\r\n        }\r\n\r\n    } elsif ( ($FileName,$Service) =\r\n        ($ThisLine =~ \/rsync: read errors mapping \\\"(.*?)\\\" \\(in (.*?)\\):.*$\/i ) ) {\r\n\r\n        if ( showServer($Server) ) {\r\n            $FailedFiles->{$CurrServer}->{$Service}->{$FileName}++;\r\n        }\r\n\r\n    } elsif ( ($ThisLine =~ \/IO error encountered -- skipping file deletion\/ ) ) {\r\n\r\n        if ( showServer($Server) ) {\r\n            $IOerror->{$CurrServer}->{$CurrService}++;\r\n        }\r\n\r\n    } elsif ( ($Date,$Server,$Service,$Period) = \r\n            ($ThisLine =~ \/stored backups: (.*?) (.*?)\\\/(.*?)\\\/(.*?)$\/i )) {\r\n\r\n        if ( showServer($Server) ) {\r\n            $StoredBackup->{$Server}->{$Service}->{$Period} = $Date;\r\n        }\r\n\r\n    } elsif ( ($ThisLine =~ \/ERROR: file corruption in\/ ) or\r\n        ($ThisLine =~ \/rsync error: some files could not be transferred\/ ) or\r\n        ($ThisLine =~ \/rsync: failed to connect to nis.vonk\/ ) or\r\n        ($ThisLine =~ \/rsync error: error in socket IO \\(code 10\\) at clientserver.c\/ ) or\r\n        ($ThisLine =~ \/--help\/ ) or \r\n        ($ThisLine =~ \/rsync-backup: ERROR:\/ ) ) {\r\n        # ignore\r\n\r\n    } elsif ( ($ThisLine =~ \/Filesystem\/ ) or\r\n        ($ThisLine =~ \/\\\/dev\\\/md0\/ ) ) {\r\n\r\n        push @DiskFreeList,$ThisLine;\r\n\r\n    } else {\r\n        # Report any unmatched entries...\r\n        push @OtherList,$ThisLine;\r\n    }\r\n}\r\n\r\nif ($ShowSuccess) {\r\n    if (keys %{$Success}) {\r\n        print \"\\nSuccessful Backups:\\n\";\r\n        foreach\t$Server (sort {$a cmp $b} keys %{$Success}) {\r\n            foreach $Service (sort {$a cmp $b} keys %{$Success->{$Server}}) {\r\n            print \"\\t\" . $Server . \"\/\" . $Service;\r\n            $count = $Success->{$Server}->{$Service};\r\n            if ( $count > 1 ) {\r\n                print \" (\" . $count . \" times)\";\r\n            } \r\n            print \"\\n\";\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nif ($ShowFailed) {\r\n    if (keys %{$Failed}) {\r\n        print \"\\nFailed Backups:\\n\";\r\n        foreach\t$Server (sort {$a cmp $b} keys %{$Failed}) {\r\n            foreach $Service (sort {$a cmp $b} keys %{$Failed->{$Server}}) {\r\n            print \"\\t\" . $Server . \"\/\" . $Service;\r\n            $count = $Failed->{$Server}->{$Service};\r\n            if ( $count > 1 ) {\r\n                print \" (\" . $count . \" times)\";\r\n            } \r\n            print \"\\n\";\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nif ($ShowFailedFiles) {\r\n    if (keys %{$FailedFiles}) {\r\n        print \"\\nFiles skipped due to file locking:\\n\";\r\n        foreach\t$Server (sort {$a cmp $b} keys %{$FailedFiles}) {\r\n            foreach $Service (sort {$a cmp $b} keys %{$FailedFiles->{$Server}}) {\r\n                print \"\\t\" . $Server . \"\/\" . $Service . \"\\n\";\r\n                foreach $FileName (sort {$a cmp $b} keys %{$FailedFiles->{$Server}->{$Service}}) {\r\n                    print \"\\t\\t\";\r\n                    my $len=length($FileName);\r\n                    if ( $len > 40 ) {\r\n                        print \"..\" . substr( $FileName, $len - 38, 38);\r\n                    } else {\r\n                        print $Filename;\r\n                    }\r\n                    $count = $FailedFiles->{$Server}->{$Service}->{$FileName};\r\n                    if ( $count > 1 ) {\r\n                        print \" (\" . $count . \" times)\";\r\n                    } \r\n                    print \"\\n\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nif ($ShowIOerror) {\r\n    if (keys %{$IOerror}) {\r\n        print \"\\nOld files not deleted as a precaution for an IO error:\\n\";\r\n        foreach\t$Server (sort {$a cmp $b} keys %{$IOerror}) {\r\n            foreach $Service (sort {$a cmp $b} keys %{$IOerror->{$Server}}) {\r\n                print \"\\t\" . $Server . \"\/\" . $Service;\r\n                $count = $IOerror->{$Server}->{$Service};\r\n                if ( $count > 1 ) {\r\n                    print \" (\" . $count . \" times)\";\r\n                } \r\n                print \"\\n\";\r\n            }\r\n    \t}\r\n    }\r\n}\r\n\r\nif ($ShowVanishedFiles) {\r\n    if (keys %{$VanishedFiles}) {\r\n\tprint \"\\nFiles that vanished:\\n\";\r\n\tforeach\t$Server (sort {$a cmp $b} keys %{$VanishedFiles}) {\r\n\t    foreach $Service (sort {$a cmp $b} keys %{$VanishedFiles->{$Server}}) {\r\n\t\tprint \"\\t\" . $Server . \"\/\" . $Service . \"\\n\";\r\n\t\tforeach $FileName (sort {$a cmp $b} keys %{$VanishedFiles->{$Server}->{$Service}}) {\r\n\t\t    print \"\\t\\t\";\r\n\t\t    my $len=length($FileName);\r\n\t\t    if ( $len > 40 ) {\r\n                print \"..\" . substr( $FileName, $len - 38, 38);\r\n\t\t    } else {\r\n                print $Filename;\r\n\t\t    }\r\n\t\t    $count = $VanishedFiles->{$Server}->{$Service}->{$FileName};\r\n\t\t    if ( $count > 1 ) {\r\n                print \" (\" . $count . \" times)\";\r\n\t\t    } \r\n\t\t    print \"\\n\";\r\n\t\t}\r\n\t    }\r\n\t}\r\n    }\r\n}\r\n\r\nif ($ShowStored) {\r\n    if (keys %{$StoredBackup}) {\r\n        print \"\\nStored Backups:\\n\";\r\n        foreach\t$Server (sort {$a cmp $b} keys %{$StoredBackup}) {\r\n            foreach $Service (sort {$a cmp $b} keys %{$StoredBackup->{$Server}}) {\r\n                print \"\\t\" . $Server . \"\/\" . $Service . \"\\n\";\r\n                foreach $Period (sort {$a cmp $b} keys %{$StoredBackup->{$Server}->{$Service}}) {\r\n                    print \"\\t\\t\" . $StoredBackup->{$Server}->{$Service}->{$Period} . \r\n                    \" (\" . $Period . \")\\n\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nif (($ShowDiskFree) and ($#DiskFreeList >= 0)) {\r\n    print \"\\nDisk Space:\\n\\n\";\r\n    print @DiskFreeList;\r\n}\r\n\r\nif (($#OtherList >= 0) and ($ShowUnmatched)) {\r\n   print \"\\n**Unmatched Entries**\\n\";\r\n   print @OtherList;\r\n}\r\n\r\nexit(0);<\/pre>\r\n    <\/details>\r\n<\/p>\r\n\r\n<h3>\r\n    Give it a spin\r\n<\/h3>\r\n<p>\r\n    On the syslog server, generate a  logwatch report\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">logwatch --archives --hostlimit backup --service backup | less<\/pre>\r\n<\/p>\r\n<h3>\r\n    Run it every day\r\n<\/h3>\r\n<p>\r\n    On the syslog server, schedule a cronjob to execute logwatch for this service (as root, <em>crontab -e<\/em>)\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">0 2 * * * \/usr\/sbin\/logwatch --archives --range yesterday --hostlimit backup --service backup --mailto you@domain.com\r\n0 1 * * * export show_only_server=hostname ; \/usr\/sbin\/logwatch --archives --range yesterday --service backup --hostlimit backup --mailto you@domain.com<\/pre>\r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.","protected":false},"author":41,"featured_media":6612,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[316],"tags":[37,36,286,38],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Snapshot backup on Synology - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Snapshot backup on Synology - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2009-11-18T16:50:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-30T18:58:45+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png\" \/>\n\t<meta property=\"og:image:width\" content=\"300\" \/>\n\t<meta property=\"og:image:height\" content=\"300\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"1 minute\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png\",\"width\":300,\"height\":300},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#webpage\",\"url\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479\",\"name\":\"Snapshot backup on Synology - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#primaryimage\"},\"datePublished\":\"2009-11-18T16:50:00+00:00\",\"dateModified\":\"2022-04-30T18:58:45+00:00\",\"description\":\"Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coertvonk.com\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Application\",\"item\":\"https:\/\/coertvonk.com\/category\/sw\/application\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Snapshot backup on Synology\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Snapshot backup on Synology\",\"datePublished\":\"2009-11-18T16:50:00+00:00\",\"dateModified\":\"2022-04-30T18:58:45+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#webpage\"},\"wordCount\":139,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png\",\"keywords\":[\"Appliance\",\"Backup Server\",\"Embedded\",\"Linux\"],\"articleSection\":[\"Application\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"http:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Snapshot backup on Synology - Coert Vonk","description":"Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479","og_locale":"en_US","og_type":"article","og_title":"Snapshot backup on Synology - Coert Vonk","og_description":"Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.","og_url":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479","og_site_name":"Coert Vonk","article_published_time":"2009-11-18T16:50:00+00:00","article_modified_time":"2022-04-30T18:58:45+00:00","og_image":[{"width":300,"height":300,"url":"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"1 minute"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png","width":300,"height":300},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#webpage","url":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479","name":"Snapshot backup on Synology - Coert Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#primaryimage"},"datePublished":"2009-11-18T16:50:00+00:00","dateModified":"2022-04-30T18:58:45+00:00","description":"Describes how to make daily and weekly backups using rsync, while preventing file duplication between the different backups.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coertvonk.com\/category\/sw"},{"@type":"ListItem","position":3,"name":"Application","item":"https:\/\/coertvonk.com\/category\/sw\/application"},{"@type":"ListItem","position":4,"name":"Snapshot backup on Synology"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Snapshot backup on Synology","datePublished":"2009-11-18T16:50:00+00:00","dateModified":"2022-04-30T18:58:45+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#webpage"},"wordCount":139,"commentCount":0,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/sw\/application\/snapshap-backup-rsync-479#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/backup-appliance-using-dns-313.png","keywords":["Appliance","Backup Server","Embedded","Linux"],"articleSection":["Application"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"http:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/479"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=479"}],"version-history":[{"count":10,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/479\/revisions"}],"predecessor-version":[{"id":32845,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/479\/revisions\/32845"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/6612"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=479"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=479"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=479"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}