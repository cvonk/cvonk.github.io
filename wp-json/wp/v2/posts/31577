{"id":31577,"date":"2015-10-19T19:45:54","date_gmt":"2015-10-20T02:45:54","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=31577"},"modified":"2022-05-03T12:52:26","modified_gmt":"2022-05-03T19:52:26","slug":"note-level-segmentation-and-buffering","status":"publish","type":"post","link":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577","title":{"rendered":"Note level segmentation and buffering"},"content":{"rendered":"<p>\r\n    Note level segmentation and buffering for pitch detection on Arduino (<code>segment.cpp<\/code>, <code>segmentbuf.cpp<\/code>).  Describes the algorithms used for note level segmentation. Part of the project <a href=\"\/category\/sw\/pitch-detector\">Arduino Pitch Detector<\/a>.\\(\\)\r\n<\/p>\r\n<p>\r\n    The segmentation algorithm determines the beginning and duration of each note. The algorithm is based on a rule-based model published by <a href=\"http:\/\/193.166.3.2\/pub\/sci\/audio\/dafx\/2000\/profs.sci.univr.it\/%257Edafx\/Final-Papers\/pdf\/Monti_DAFX00poster.pdf\">Monty in 2000<\/a>. Other algorithms were published by <a href=\"http:\/\/eamusic.dartmouth.edu\/~larry\/ucsc_classes\/UCSC_CLASSES_2011_2012\/Music_150x\/readings\/week_6_temporal_gestalts\/temporal%20gestalt%20perception.pdf\">Tenney in 1980<\/a> and <a href=\"http:\/\/cis.ofai.at\/cgi-bin\/get-tr?paper=oefai-tr-2001-11.pdf\">Cambouropoulos in 1997<\/a>. The target platform is small embedded systems around an 8-bit RISC-based \u03bcController, running at 16 MHz, with 2 kByte SRAM and 32 kByte Flash memory (Arduino UNO R3). The choice of target places limitations on CPU usage and memory footprint.\r\n<\/p>\r\n<p>\r\n    The algorithm takes two characteristics into consideration:\r\n    <ol>\r\n        <li>\r\n            Note <strong>pitch<\/strong>, related to the fundamental frequency (<em>f<sub>0<\/sub><\/em>) of the signal.\r\n            <ul>\r\n                <li>The class Frequency determines the fundamental frequency using autocorrelation as described by Brown [<a href=\"http:\/\/academics.wellesley.edu\/Physics\/brown\/pubs\/acptrv89P2346-P2354.pdf\">Brown, 1990<\/a>]. The pitch is given by a MIDI number <em>m = 69 + 12 * log2(f\/440)<\/em>. With a window size of 200 samples and a modest sample rate of 9,615 S\/s, the implementation is able to detect frequencies between 98 Hz (note G2) to about 2,637 Hz (note E6).<\/li>\r\n                <li>Another option was to use a FFT and the correlation theorem, while this might be faster, is has a larger memory footprint.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Energy <strong>envelope<\/strong>, related to the loudness of the signal.\r\n            <ul>\r\n                <li>The class Microphone determines the peak-to-peak amplitude of the signal for each window of samples. Using a window size of 200 samples at 9,615 S\/s, this results in 48 envelope points per second. This same envelop may be used for beat detection. At a tempo of 160 beats\/min, this corresponds to 18 samples\/beat. Other methods considered were the Hilbert transform, or the sum of the root-mean-square amplitudes, both of which were found to computational intensive.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    Based on these characteristics, the algorithm determines the beginning (onset) and the duration of the notes, by applying rules:\r\n    <ol>\r\n        <li>\r\n            The pitch is considered constant when the fundamental frequency stays within a piano key distance (+\/- 3%). In other words, when it rounds to the same MIDI pitch.\r\n        <\/li>\r\n        <li>\r\n            A note <strong>onset<\/strong> is recognized when the pitch lasts for a minimum note duration.\r\n            <ul>\r\n                <li>This eliminates errors concerning spurious notes. The advantage of this approach over using only the amplitude envelope, is that even in glissando or legato the onset is easily detected.<\/li>\r\n                <li>The disadvantage is that the onset is only recognized after this minimum note duration.<\/li>\r\n                <li>Another concern is that during the release. Because the fundamental frequency disappears first, followed by harmonics one after, the algorithm may erroneously recognize these harmonics as a new note.<\/li>\r\n                <li>A minimum note duration (<code>MIN_SEGMENT_DURATION<\/code>) of 40 msec, corresponds to about two sample windows.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            The note <strong>duration<\/strong> is the time from its onset to its termination. The termination is determined by either:\r\n\r\n            <ol style=\"list-style-type: lower-alpha;\">\r\n                <li>\r\n                    The recognition of silence\r\n                    <ul>\r\n                        <li>Silence is recognized when the signal energy falls below the noise floor.<\/li>\r\n                        <li>A noise floor (<code>AUDIBLE_THRESHOLD<\/code>) of 20 (15% of full scale) seems to work well with a automatic gain control microphone.<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    The pitch changing\r\n                    <ul>\r\n                        <li>A pitch change is recognized when a different pitch remains constant for the minimum note duration. This implies that the system allows the pitch to have different values during the decaying part of a note.<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    The energy increasing during the decay\r\n                    <ul>\r\n                        <li>Therefore, if the energy rises during the decay phase of the note, I can assume that another note with the same pitch has been played. A threshold is applied, so only significant increases in energy will cause a new note to be recognized. A threshold (<code>SEGMENT_ENERGY_INCR_THRESHOLD<\/code>) of 40% above the energy of the prior window has yielded good results.<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ol>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Now that we know the frequency and note duration, it is time to visualize the information. This is the topic of the <a href=\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/visualizing-the-notes-31579\">next part<\/a>.\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Note level segmentation and buffering for pitch detection on Arduino.  Describes the algorithms used for note level segmentation.","protected":false},"author":41,"featured_media":18417,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[433],"tags":[361,466,472],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Note level segmentation and buffering for pitch detection on Arduino - Johan Vonk<\/title>\n<meta name=\"description\" content=\"Note level segmentation and buffering for pitch detection on Arduino. Describes the algorithms used for note level segmentation.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Note level segmentation and buffering for pitch detection on Arduino - Johan Vonk\" \/>\n<meta property=\"og:description\" content=\"Note level segmentation and buffering for pitch detection on Arduino. Describes the algorithms used for note level segmentation.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-20T02:45:54+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-03T19:52:26+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png\" \/>\n\t<meta property=\"og:image:width\" content=\"300\" \/>\n\t<meta property=\"og:image:height\" content=\"300\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#primaryimage\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png\",\"width\":300,\"height\":300},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#webpage\",\"url\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577\",\"name\":\"Note level segmentation and buffering for pitch detection on Arduino - Johan Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#primaryimage\"},\"datePublished\":\"2015-10-20T02:45:54+00:00\",\"dateModified\":\"2022-05-03T19:52:26+00:00\",\"description\":\"Note level segmentation and buffering for pitch detection on Arduino. Describes the algorithms used for note level segmentation.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Arduino\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/arduino\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Pitch detection\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/arduino\/pitch-detector\"},{\"@type\":\"ListItem\",\"position\":5,\"name\":\"Note level segmentation and buffering\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Note level segmentation and buffering\",\"datePublished\":\"2015-10-20T02:45:54+00:00\",\"dateModified\":\"2022-05-03T19:52:26+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#webpage\"},\"wordCount\":599,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png\",\"keywords\":[\"arduino uno\",\"atmega328p\",\"auto-correlation\"],\"articleSection\":[\"Pitch detection\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"https:\/\/coert.vonk.one\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Note level segmentation and buffering for pitch detection on Arduino - Johan Vonk","description":"Note level segmentation and buffering for pitch detection on Arduino. Describes the algorithms used for note level segmentation.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577","og_locale":"en_US","og_type":"article","og_title":"Note level segmentation and buffering for pitch detection on Arduino - Johan Vonk","og_description":"Note level segmentation and buffering for pitch detection on Arduino. Describes the algorithms used for note level segmentation.","og_url":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577","og_site_name":"Coert Vonk","article_published_time":"2015-10-20T02:45:54+00:00","article_modified_time":"2022-05-03T19:52:26+00:00","og_image":[{"width":300,"height":300,"url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#primaryimage","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png","width":300,"height":300},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#webpage","url":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577","name":"Note level segmentation and buffering for pitch detection on Arduino - Johan Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#primaryimage"},"datePublished":"2015-10-20T02:45:54+00:00","dateModified":"2022-05-03T19:52:26+00:00","description":"Note level segmentation and buffering for pitch detection on Arduino. Describes the algorithms used for note level segmentation.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coert.vonk.one\/category\/sw"},{"@type":"ListItem","position":3,"name":"Arduino","item":"https:\/\/coert.vonk.one\/category\/sw\/arduino"},{"@type":"ListItem","position":4,"name":"Pitch detection","item":"https:\/\/coert.vonk.one\/category\/sw\/arduino\/pitch-detector"},{"@type":"ListItem","position":5,"name":"Note level segmentation and buffering"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Note level segmentation and buffering","datePublished":"2015-10-20T02:45:54+00:00","dateModified":"2022-05-03T19:52:26+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#webpage"},"wordCount":599,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/sw\/arduino\/pitch-detector\/note-level-segmentation-and-buffering-31577#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/johan-pitch-detector-logo4.png","keywords":["arduino uno","atmega328p","auto-correlation"],"articleSection":["Pitch detection"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"https:\/\/coert.vonk.one\/author\/cvonk"}]}},"_links":{"self":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31577"}],"collection":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/comments?post=31577"}],"version-history":[{"count":5,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31577\/revisions"}],"predecessor-version":[{"id":32773,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31577\/revisions\/32773"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media\/18417"}],"wp:attachment":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media?parent=31577"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/categories?post=31577"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/tags?post=31577"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}