{"id":30769,"date":"2015-10-04T10:48:11","date_gmt":"2015-10-04T17:48:11","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=30769"},"modified":"2022-05-03T13:04:01","modified_gmt":"2022-05-03T20:04:01","slug":"faster-parameterized-adder-in-verilog","status":"publish","type":"post","link":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769","title":{"rendered":"A faster adder circuit"},"content":{"rendered":"<p>\r\n    Implements carry-lookahead adders using circuits of logic gates  Written in Verilog HDL for Altera and Xilinx FPGA&#8217;s.\r\n<\/p>\r\n<h2 style=\"counter-reset: h2 3 h3\">\r\n    Carry-lookahead adders\r\n<\/h2>\r\n\r\n<p>\r\n    <img class=\"alignright wp-image-17212 \"  title=\"\"  src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"75\" \/>\r\n\r\n    This chapter introduces algorithms to reduce the delay when adding numbers. We will look at two carry-lookahead adders using logic gates. \\(\\)\r\n<\/p>\r\n\r\n<h3>\r\n    Carry-lookahead adder\r\n<\/h3>\r\n<p>\r\n    Adding a <em>carry-lookahead<\/em> circuit can make the carry generation much faster. The individual bit adders no longer calculate outgoing carries, but instead generate propagate and generate signals.\r\n<\/p>\r\n<p>\r\n    We define a Partial Full Adder (<code>pfa<\/code>) module with the usual ports <em>a<\/em> and <em>b<\/em> for the summands, carry input <em>c<sub>i<\/sub><\/em> , the sum <em>s<\/em>, and two new signals propagate <em>p<\/em> and generate <em>g<\/em>. The <em>propagate<\/em> (<em>p<\/em>) indicates that the bit would not generate the carry bit itself, but will pass through a carry from a lower bit. The <em>generate<\/em> (<em>g<\/em>) signal indicates that the bit generates a carry independent of the incoming carry. The functionality of the <code>pfa<\/code> module is expression the circuit and Boolean equations shown below.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-pfa-block.svg\">\r\n                    <img class=\"aligncenter wp-image-17120\" title=\"(c) Copyright 2016 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-adder-pfa-block.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"164\" \/>\r\n                <\/a>\r\n                <div>\r\n                    $$\r\n                        \\begin{align*}\r\n                            g &#038;=a \\cdot b \\\\\r\n                            p &#038;=a \\oplus b \\\\\r\n                            s &#038;=p \\oplus c_i\r\n                        \\end{align*}\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>\r\n                1-bit partial full adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    For bit position <em>n<\/em>, the outgoing carry <em>c<sub>n<\/sub><\/em> is a function of <em>p<sub>n<\/sub><\/em>, <em>g<sub>n<\/sub><\/em> and the incoming carry <em>c<sub>i,n<\/sub><\/em>. Except for bit position <em>0<\/em>, the incoming carry equals the outgoing carry of the previous <code>pfa<\/code>, \\(c_{i,n}=c_{o,n-1}\\)\r\n    $$\r\n        \\begin{align*}\r\n            c_n &#038;= g_n + c_{in_{n}} \\cdot p_n \\\\\r\n            &#038;= g_n + c_{n-1} \\cdot p_n\r\n        \\end{align*}\r\n    $$\r\n<\/p>\r\n<p>\r\n    For a 4-bit <code>cla<\/code> this results in the following equations for the carryout signals:\r\n    $$\r\n        \\begin{align*}\r\n            c_0&#038; = g_0 + c_i \\cdot p_0 \\\\\r\n            c_1&#038; = g_1 + c_0 \\cdot p_1 \\\\\r\n            c_2&#038; = g_2 + c_1 \\cdot p_2 \\\\\r\n            c_3&#038; = g_3 + c_2 \\cdot p_3 \\\\\r\n        \\end{align*}\r\n    $$\r\n<\/p>\r\n<p>\r\n    Substituting the <em>c<sub>n-1<\/sub><\/em>\r\n    <div class=\"scale-font\">\r\n        $$\r\n            \\begin{align*}\r\n                c_0 &#038;= g_0 + c_{i} \\cdot p_0 \\\\\r\n                c_1 &#038;= g_1 + (g_0 + c_{i} \\cdot p_0) \\cdot p_1 \\\\\r\n                &#038;= g_1 + g_0 \\cdot p_1 + c_{i} \\cdot p_0 \\cdot p_1 \\\\\r\n                c_2 &#038;= g_2 + (g_1 + g_0 \\cdot p_1 + c_{i} \\cdot p_0 \\cdot p_1) \\cdot p_2 \\\\\r\n                &#038;= g_2 + g_1 \\cdot p_2 + g_0 \\cdot p_1 \\cdot p_2 + c_{i} \\cdot p_0 \\cdot p_1 \\cdot p_2 \\\\\r\n                c_3 &#038;= g_3 + (g_2 + g_1 \\cdot p_2 + g_0 \\cdot p_1 \\cdot p_2 + c_{i} \\cdot p_0 \\cdot p_1 \\cdot p_2) \\cdot p_3 \\\\\r\n                &#038;= g_3 + g_2 \\cdot p_3 + g_1 \\cdot p_2 \\cdot p_3 + g_0 \\cdot p_1 \\cdot p_2 \\cdot p_3 +c_{i} \\cdot p_0 \\cdot p_1 \\cdot p_2 \\cdot p_3\r\n            \\end{align*}\r\n        $$\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The outgoing carries <em>c<sub>0\u20263<\/sub><\/em> no longer depend on each other, thereby eliminating the &#8220;ripple effect&#8221;. The outgoing carries can now be implemented with only 3 gate delays (1 for p\/g generation, 1 for the ANDs and 1 for the final OR assuming gates with 5 inputs).\r\n<\/p>\r\n<p>\r\n    The circuit below gives an example of a 4-bit carry look-ahead adder.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-lookahead-circuit-4-bit.svg\">\r\n                <img class=\"wp-image-17122\" title=\"(c) Copyright 2016 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-adder-lookahead-circuit-4-bit.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"350\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                4-bit carry-lookahead adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The complexity of the carry look-ahead increases dramatically with the bit number. Instead of calculating higher bit carries, one may daisy chaining the carry logic as shown for the 12-bit adder below.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-lookahead-circuit-12-bit.svg\">\r\n                <img class=\"wp-image-17123\" title=\"(c) Copyright 2016 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-adder-lookahead-circuit-12-bit.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"600\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                12-bit carry-lookahead adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    An implementation can be found at GitHub\r\n\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGAmath\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Results\r\n<\/h4>\r\n<p>\r\n    The propagation delay <em>t<sub>pd<\/sub><\/em> depends on size <em>n<\/em> and the value of operands. For a given size <em>n<\/em>, adding the value <em>1<\/em> to an operand that contains all zeroes causes the longest propagation delay. The post-map Timing Analysis tool reveals the worst-case propagation delays for the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Terasic Altera Cyclone IV DE0-Nano<\/a>. The exact value depends on the model and speed grade of the FPGA, the silicon itself, voltage and the die temperature.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"results\">\r\n                    <tr>\r\n                        <th>\\(N\\)<\/th>\r\n                        <th colspan=\"3\">Timing Analysis<\/th>\r\n                        <th>Measured<\/th>\r\n                    <\/tr>\r\n                    <tr style=\"border-bottom: 1px solid #ddd;\">\r\n                        <th><\/th>\r\n                        <th>slow 85\u00b0C<\/th>\r\n                        <th>slow 0\u00b0C<\/th>\r\n                        <th>fast 0\u00b0C<\/th>\r\n                        <th>actual<\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">4-bits<\/td>\r\n                        <td style=\"text-align: right;\">8.1 ns<\/td>\r\n                        <td style=\"text-align: right;\">7.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">5.3 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">8-bits<\/td>\r\n                        <td style=\"text-align: right;\">9.8 ns<\/td>\r\n                        <td style=\"text-align: right;\">8.7 ns<\/td>\r\n                        <td style=\"text-align: right;\">6.2 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">16-bits<\/td>\r\n                        <td style=\"text-align: right;\">10.0 ns<\/td>\r\n                        <td style=\"text-align: right;\">8.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">6.2 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">27-bits<\/td>\r\n                        <td style=\"text-align: right;\">15.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">13.5 ns<\/td>\r\n                        <td style=\"text-align: right;\">9.5 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">32-bits<\/td>\r\n                        <td style=\"text-align: right;\">21.8 ns<\/td>\r\n                        <td style=\"text-align: right;\">19.7 ns<\/td>\r\n                        <td style=\"text-align: right;\">13.6 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">42-bits<\/td>\r\n                        <td style=\"text-align: right;\">24.4 ns<\/td>\r\n                        <td style=\"text-align: right;\">21.7 ns<\/td>\r\n                        <td style=\"text-align: right;\">14.9 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-lookaheadcarry-measurement3.svg\">\r\n                    <img class=\"wp-image-16751\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-adder-lookaheadcarry-measurement3.svg\" alt=\"\" width=\"100%\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Propagation delay in 1-level carry-lookahead adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Multi-level carry-lookahead adder\r\n<\/h3>\r\n<p>\r\n    To improve speed for larger word sizes, we can add a second level of carry look ahead. To facilitate this, we extend the <code>cla<\/code> circuit by adding \\(p_{i,j}\\) and \\(g_{i,j}\\) outputs. The propagate signal \\(p_{i,j}\\) indicates that an incoming carry propagates from bit position \\(i\\) to \\(j\\). The generate signal \\(g_{i,j}\\) indicates that a carry is generated at bit position \\(j\\), or if a carry out is generated at a lower bit position and propagates to position \\(j\\).\r\n<\/p>\r\n<p>\r\n    For a 4-bit block the equations are\r\n    $$\r\n        \\begin{align*}\r\n            p_{0,3} &#038;= p_3 \\cdot p_2 \\cdot p_1 \\cdot p_0 \\\\\r\n            g_{0,3} &#038;= g_3 + p_3 \\cdot g_2 + p_3 \\cdot p_2 \\cdot g_1 + p_3 \\cdot p_2 \\cdot p_1 \\cdot g_0 \\\\\r\n            c_o &#038;= g_{3,0} + p_{3,0} \\cdot c_i\r\n        \\end{align*}\r\n    $$\r\n<\/p>\r\n<p>\r\n    The circuit for a 16-bit two-level carry-lookahead adder is shown below\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-lookahead-circuit-2-level-16-bit.svg\">\r\n                <img class=\"wp-image-17124\" title=\"(c) Copyright 2016 Coert Vonk\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-adder-lookahead-circuit-2-level-16-bit.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"600\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                16-bit carry-save adder using two levels of &#8216;cla&#8217;\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    An implementation can be found at GitHub\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGAmath\">             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&amp;issues=1&amp;language=1&amp;name=1&amp;owner=1&amp;pattern=Circuit%20Board&amp;stargazers=1&amp;theme=Light\" width=\"500\" \/>         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Results\r\n<\/h4>\r\n<p>\r\n    Once more, the propagation delay \\(t_{pd}\\) depends size \\(N\\) and the value of operands. For a given size \\(N\\), adding the value <em>1<\/em> to an operand that contains all zeroes causes the longest propagation delay.\r\n<\/p>\r\n<p>\r\n    Once more, the post-map Timing Analysis predicts the worst-case propagation delays for the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Terasic Altera Cyclone IV DE0-Nano<\/a>. As usual, the exact value depends on the model and speed grade of the FPGA, the silicon itself, voltage and the die temperature.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"results\">\r\n                    <tr>\r\n                        <th>\\(N\\)<\/th>\r\n                        <th colspan=\"3\">Timing Analysis<\/th>\r\n                        <th>Measured<\/th>\r\n                    <\/tr>\r\n                    <tr style=\"border-bottom: 1px solid #ddd;\">\r\n                        <th><\/th>\r\n                        <th>slow 85\u00b0C<\/th>\r\n                        <th>slow 0\u00b0C<\/th>\r\n                        <th>fast 0\u00b0C<\/th>\r\n                        <th>actual<\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">4-bits<\/td>\r\n                        <td style=\"text-align: right;\">8.1 ns<\/td>\r\n                        <td style=\"text-align: right;\">7.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">4.3 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">8-bits<\/td>\r\n                        <td style=\"text-align: right;\">9.3 ns<\/td>\r\n                        <td style=\"text-align: right;\">8.3 ns<\/td>\r\n                        <td style=\"text-align: right;\">5.8 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">16-bits<\/td>\r\n                        <td style=\"text-align: right;\">11.4 ns<\/td>\r\n                        <td style=\"text-align: right;\">10.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">7.1 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">27-bits<\/td>\r\n                        <td style=\"text-align: right;\">15.3 ns<\/td>\r\n                        <td style=\"text-align: right;\">13.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">9.6 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">32-bits<\/td>\r\n                        <td style=\"text-align: right;\">18.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">16.7 ns<\/td>\r\n                        <td style=\"text-align: right;\">11.6 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">42-bits<\/td>\r\n                        <td style=\"text-align: right;\">18.0 ns<\/td>\r\n                        <td style=\"text-align: right;\">16.1 ns<\/td>\r\n                        <td style=\"text-align: right;\">11.2 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-lookaheadcarry2lvl.-measurements.svg\">\r\n                    <img class=\"wp-image-16751\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-adder-lookaheadcarry2lvl.-measurements.svg\" alt=\"\" width=\"100%\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Propagation delay in 2-level carry-lookahead adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Others\r\n<\/h3>\r\n<p>\r\n    Other adder designs are carry-skip, carry-select and prefix adders.\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Following this &#8220;Carry-lookahead adders using logic gates&#8221;, the <a href=\"\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772\">next chapter<\/a> shows an implementation of a multiplier introduced in <a href=\"\/inquiries\/computer-math\/math-operations-using-gates-30710\">Chapter 7<\/a> of the inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8220;.\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>","protected":false},"excerpt":{"rendered":"Introduces algorithms to reduce the delay when adding numbers. A look at two carry-lookahead circuits.","protected":false},"author":41,"featured_media":17212,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[420],"tags":[211,475,202,304],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Carry-lookahead adders using circuits of logic gates - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Implements carry-lookahead adders using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Carry-lookahead adders using circuits of logic gates - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Implements carry-lookahead adders using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-04T17:48:11+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-03T20:04:01+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#primaryimage\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\",\"caption\":\"(c) Copyright 2016 Coert Vonk\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#webpage\",\"url\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769\",\"name\":\"Carry-lookahead adders using circuits of logic gates - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#primaryimage\"},\"datePublished\":\"2015-10-04T17:48:11+00:00\",\"dateModified\":\"2022-05-03T20:04:01+00:00\",\"description\":\"Implements carry-lookahead adders using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Building math circuits\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\/building-math-circuits\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"A faster adder circuit\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"A faster adder circuit\",\"datePublished\":\"2015-10-04T17:48:11+00:00\",\"dateModified\":\"2022-05-03T20:04:01+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#webpage\"},\"wordCount\":917,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg\",\"keywords\":[\"fpga\",\"logic\",\"math\",\"verilog\"],\"articleSection\":[\"Building math circuits\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"https:\/\/coert.vonk.one\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Carry-lookahead adders using circuits of logic gates - Coert Vonk","description":"Implements carry-lookahead adders using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769","og_locale":"en_US","og_type":"article","og_title":"Carry-lookahead adders using circuits of logic gates - Coert Vonk","og_description":"Implements carry-lookahead adders using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","og_url":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769","og_site_name":"Coert Vonk","article_published_time":"2015-10-04T17:48:11+00:00","article_modified_time":"2022-05-03T20:04:01+00:00","twitter_card":"summary","twitter_image":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#primaryimage","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","caption":"(c) Copyright 2016 Coert Vonk"},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#webpage","url":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769","name":"Carry-lookahead adders using circuits of logic gates - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#primaryimage"},"datePublished":"2015-10-04T17:48:11+00:00","dateModified":"2022-05-03T20:04:01+00:00","description":"Implements carry-lookahead adders using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coert.vonk.one\/category\/hw"},{"@type":"ListItem","position":3,"name":"Building math circuits","item":"https:\/\/coert.vonk.one\/category\/hw\/building-math-circuits"},{"@type":"ListItem","position":4,"name":"A faster adder circuit"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"A faster adder circuit","datePublished":"2015-10-04T17:48:11+00:00","dateModified":"2022-05-03T20:04:01+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#webpage"},"wordCount":917,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/hw\/building-math-circuits\/faster-parameterized-adder-in-verilog-30769#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/math-logo-implementation-add.svg","keywords":["fpga","logic","math","verilog"],"articleSection":["Building math circuits"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"https:\/\/coert.vonk.one\/author\/cvonk"}]}},"_links":{"self":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/30769"}],"collection":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/comments?post=30769"}],"version-history":[{"count":10,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/30769\/revisions"}],"predecessor-version":[{"id":32953,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/30769\/revisions\/32953"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media\/17212"}],"wp:attachment":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media?parent=30769"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/categories?post=30769"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/tags?post=30769"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}