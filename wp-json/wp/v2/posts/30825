{"id":30825,"date":"2015-10-17T18:50:12","date_gmt":"2015-10-18T01:50:12","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=30825"},"modified":"2022-04-29T17:51:33","modified_gmt":"2022-04-30T00:51:33","slug":"messages-exchange-with-fpga-as-slave","status":"publish","type":"post","link":"/\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825","title":{"rendered":"Message protocol on FPGA"},"content":{"rendered":"<p>\r\n    This continues the third part of <a href=\"\/category\/math-talk\">Math Talk<\/a>. This page shows a master implementation of the message protocol described <a href=\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820\">earlier<\/a>.\r\n<\/p>\r\n\r\n<h2 style=\"counter-reset: h2 7 h3\">\r\n    Messages Exchange with FPGA as Slave\r\n<\/h2>\r\n<p>\r\n    The implementation builds onto the <a href=\"https:\/\/coert.vonk.one\/hw\/math-talk\/byte-exchange-with-a-fpga-as-slave-30818\">Byte Module<\/a> code shown earlier. We will start by explaining how to pass multidimensional arrays through ports.\r\n<\/p>\r\n\r\n<h3>\r\n    Registers\r\n<\/h3>\r\n<p>\r\n    On <em>Altera<\/em>, we can the multidimensional arrays available in system verilog HDL\r\n\r\n    <pre class=\"brush: verilog; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">wire [nrRWregs+nrROregs-1:0] [31:0] registers;<\/pre>\r\n<\/p>\r\n<p>\r\n    The implementation is slightly more complicated on <em>Xilinx<\/em>, because Verilog 2001 doesn&#8217;t allow multidimensional arrays to be used as inputs or outputs. Instead, we work around this by flatten the 2D registers array into two vectors. One for input, and one for the output ports as shown in the code fragments below.\r\n<\/p>\r\n<p>\r\n    Flatten the 2-dimensional array, <code>registers<\/code>, into vectors <code>rwRegs1D<\/code> and <code>roRegs1D<\/code>\r\n\r\n    genvar nn;\r\nwire [31:0] roRegs2D[0:nrROregs-1];\r\nfor ( nn = 0; nn < nrRWregs; nn = nn + 1)\r\n    begin :nnRW\r\n        assign rwRegs1D[32*nn+31:32*nn] = registers[nn];  \/\/ flatten\r\n    end\r\nfor ( nn = 0; nn < nrROregs; nn = nn + 1)\r\n    begin :nnRO\r\n        assign roRegs2D[nn] = roRegs1D[32*nn+31:32*nn];  \/\/ inflate\r\n    end[\/code]\r\n<\/p>\r\n<p>\r\nInflate the vectors, <code>rwRegs1D<\/code> and <code>roRegs1D<\/code>, into a 2-dimensional array <code>registers<\/code>.\r\n<\/p>\r\n<p>\r\n    wire [0:31] registers[0:nrRWregs+nrROregs-1];\r\ngenvar nn;\r\nfor ( nn = 0; nn < nrRWregs; nn = nn + 1 )\r\n    begin :nnRW\r\n        assign registers[nn] = rwRegs1D[32*nn+31:32*nn];\r\n    end\r\nfor ( nn = 0; nn < nrROregs; nn = nn + 1 )\t\r\n    begin :nnRO\r\n        assign roRegs1D[32*nn+31:32*nn] = registers[nn+nrRWregs];\r\n    end[\/code]\r\n<\/p>\r\n\r\n<h3>\r\n    Timing\r\n<\/h3>\r\n<p>\r\n    The timing diagram below shows the relation between the different signals at the message level on Xilinx.\r\n\r\n    <div class=\"align-center\">\r\n        <div class=\"flow-container\">\r\n            <figure>\r\n                <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-timing.png\"><img  title=\"\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-timing-1024x236.png\" alt=\"\" width=\"600\" class=\"alignnone size-large wp-image-32827\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-timing-1024x236.png 1024w, https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-timing-400x92.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-timing-768x177.png 768w, https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-timing-1536x355.png 1536w, https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-timing-2048x473.png 2048w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a>\r\n                <figcaption>\r\n                    Timing for Xilinx implementation\r\n                <\/figcaption>\r\n            <\/figure>\r\n        <\/div>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The Altera implementation is more optimized, as it needs to run at 200 MHz. The gate level simulation is shown below;\r\n\r\n    <div class=\"align-center\">\r\n        <div class=\"flow-container\">\r\n            <figure>\r\n                <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-tb.png\"><img loading=\"lazy\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-tb-1024x371.png\" alt=\"\" width=\"525\" height=\"190\" class=\"alignnone size-large wp-image-32826\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-tb-1024x371.png 1024w, https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-tb-400x145.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-tb-768x278.png 768w, https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-msg-tb.png 1315w\" sizes=\"(max-width: 525px) 100vw, 525px\" \/><\/a>\r\n                <figcaption>\r\n                    Timing for Altera implementation\r\n                <\/figcaption>\r\n            <\/figure>\r\n        <\/div>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Finite State Machine\r\n<\/h3>\r\n<\/p>\r\n<p>\r\n    This message module converts the bytes into messages and visa versa. The <a href=\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820\">protocol<\/a> is implemented using a state machine with 4 states:\r\n    <ul>\r\n        <li>\r\n            <em>Idle (0)<\/em>\r\n        <\/li>\r\n        <li>\r\n            <em>Transmit status (1)<\/em>, transmits 8-bit status to master\r\n        <\/li>\r\n        <li>\r\n            <em>Transmit register value (2)<\/em> , transmits a 32-bit register value to the master\r\n        <\/li>\r\n        <li>\r\n            <em>Receive register value (3)<\/em>, receives a 32-bit register value from the master\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    An additional state-like variable, <code>byteId<\/code>, is used to keeps track of what byte to transmit or receive.\r\n\r\n    <div class=\"align-center\">\r\n        <div class=\"flow-container\">\r\n            <figure>\r\n                <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-message-fsm-copy.svg\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-message-fsm-copy.svg\" alt=\"\" width=\"400\" class=\"alignnone size-large wp-image-32828\" \/><\/a>\r\n                <figcaption>\r\n                    SPI Finite State Machine\r\n                <\/figcaption>\r\n            <\/figure>\r\n        <\/div>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Sources\r\n<\/h3>\r\n\r\n<p>\r\n    The complete project including constraints and test bench is available through\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGA_SPI\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGA_SPI\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n    <ul>\r\n        <li>\r\n            <strong>SPI Slave, main module<\/strong>,\r\n            <code><a href=\"https:\/\/github.com\/cvonk\/FPGA_SPI\/blob\/master\/spi_msg_if\/altera\/spi_msg.sv\">spi_msg.sv<\/a><\/code> on Altera (or\r\n            <code><a href=\"https:\/\/github.com\/cvonk\/FPGA_SPI\/blob\/master\/spi_msg_if\/xilinx\/spi_msg.v\">spi_msg.v<\/a><\/code> on Xilinx<code>)<\/code>\r\n        <\/li>\r\n        <li>\r\n            <strong>SPI Slave, message interface<\/strong>,\r\n            <code><a href=\"https:\/\/github.com\/cvonk\/FPGA_SPI\/blob\/master\/spi_msg_if\/altera\/spi_msg_if.sv\">spi_msg_if.sv<\/a><\/code> on Altera (or\r\n            <code><a href=\"https:\/\/github.com\/cvonk\/FPGA_SPI\/blob\/master\/spi_msg_if\/xilinx\/spi_msg_if.v\">spi_msg_if.v<\/a><\/code> on Xilinx<code>)<\/code>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    Verification\r\n<\/h3>\r\n<p>\r\n    To verify the implementation, run the test bench (<a href=\"https:\/\/github.com\/cvonk\/FPGA_SPI\/blob\/master\/spi_byte_if\/xilinx\/spi_byte_tb.v\"><code>spi_msg_tb.v<\/code><\/a>) using gate level simulation. This test bench will monitor the communication and report errors when found. In the real world, we connect the <a href=\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-arduino-as-master-30822\">Arduino SPI Master<\/a> that acts just like the test bench.\r\n<\/p>\r\n\r\n<p>\r\n    This article introduced SPI as a protocol and expanded it to exchange messages.\r\n<\/p>","protected":false},"excerpt":{"rendered":"Chapter 8. Implements the message protocol on the FPGA.","protected":false},"author":41,"featured_media":32835,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[421],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Message protocol on FPGA - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Implements the SPI message protocol on a FPGA, that enables custom register to be read and written by the Arduino.. Written in Verilog HDL.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Message protocol on FPGA - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Implements the SPI message protocol on a FPGA, that enables custom register to be read and written by the Arduino.. Written in Verilog HDL.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-18T01:50:12+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-30T00:51:33+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\" \/>\n\t<meta property=\"og:image:width\" content=\"200\" \/>\n\t<meta property=\"og:image:height\" content=\"168\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\",\"width\":200,\"height\":168},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#webpage\",\"url\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825\",\"name\":\"Message protocol on FPGA - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#primaryimage\"},\"datePublished\":\"2015-10-18T01:50:12+00:00\",\"dateModified\":\"2022-04-30T00:51:33+00:00\",\"description\":\"Implements the SPI message protocol on a FPGA, that enables custom register to be read and written by the Arduino.. Written in Verilog HDL.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Math talk\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\/math-talk\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Message protocol on FPGA\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Message protocol on FPGA\",\"datePublished\":\"2015-10-18T01:50:12+00:00\",\"dateModified\":\"2022-04-30T00:51:33+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#webpage\"},\"wordCount\":462,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\",\"articleSection\":[\"Math talk\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"/\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Message protocol on FPGA - Coert Vonk","description":"Implements the SPI message protocol on a FPGA, that enables custom register to be read and written by the Arduino.. Written in Verilog HDL.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825","og_locale":"en_US","og_type":"article","og_title":"Message protocol on FPGA - Coert Vonk","og_description":"Implements the SPI message protocol on a FPGA, that enables custom register to be read and written by the Arduino.. Written in Verilog HDL.","og_url":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825","og_site_name":"Coert Vonk","article_published_time":"2015-10-18T01:50:12+00:00","article_modified_time":"2022-04-30T00:51:33+00:00","og_image":[{"width":200,"height":168,"url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#primaryimage","inLanguage":"en-US","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","width":200,"height":168},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#webpage","url":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825","name":"Message protocol on FPGA - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#primaryimage"},"datePublished":"2015-10-18T01:50:12+00:00","dateModified":"2022-04-30T00:51:33+00:00","description":"Implements the SPI message protocol on a FPGA, that enables custom register to be read and written by the Arduino.. Written in Verilog HDL.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coert.vonk.one\/category\/hw"},{"@type":"ListItem","position":3,"name":"Math talk","item":"https:\/\/coert.vonk.one\/category\/hw\/math-talk"},{"@type":"ListItem","position":4,"name":"Message protocol on FPGA"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Message protocol on FPGA","datePublished":"2015-10-18T01:50:12+00:00","dateModified":"2022-04-30T00:51:33+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#webpage"},"wordCount":462,"commentCount":0,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/messages-exchange-with-fpga-as-slave-30825#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","articleSection":["Math talk"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"/\/author\/cvonk"}]}},"_links":{"self":[{"href":"/\/wp-json\/wp\/v2\/posts\/30825"}],"collection":[{"href":"/\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"/\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/comments?post=30825"}],"version-history":[{"count":10,"href":"/\/wp-json\/wp\/v2\/posts\/30825\/revisions"}],"predecessor-version":[{"id":32829,"href":"/\/wp-json\/wp\/v2\/posts\/30825\/revisions\/32829"}],"wp:featuredmedia":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/media\/32835"}],"wp:attachment":[{"href":"/\/wp-json\/wp\/v2\/media?parent=30825"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"/\/wp-json\/wp\/v2\/categories?post=30825"},{"taxonomy":"post_tag","embeddable":true,"href":"/\/wp-json\/wp\/v2\/tags?post=30825"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}