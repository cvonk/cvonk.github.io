{"id":30971,"date":"2011-12-02T17:31:52","date_gmt":"2011-12-03T01:31:52","guid":{"rendered":"https:\/\/coertvonk.com\/?p=30971"},"modified":"2022-02-07T09:30:46","modified_gmt":"2022-02-07T17:30:46","slug":"instruction-set","status":"publish","type":"post","link":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971","title":{"rendered":"Instruction set"},"content":{"rendered":"<p>\r\n    Introduces a simplified LC-3 instruction set, that we later will design a CPU for and implement in Verilog HDL.\r\n<\/p>\r\n<h2>\r\n    Instruction Set\r\n<\/h2>\r\n\r\n<p>\r\n    <a href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system.png\"><img  title=\"\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-1024x446.png\" alt=\"\" width=\"300\" class=\"size-large wp-image-16925 alignright\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-1024x446.png 1024w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-400x174.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-768x335.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-250x109.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-300x131.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-350x153.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-500x218.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system-750x327.png 750w, https:\/\/coertvonk.com\/wp-content\/uploads\/microprocessor-system.png 1409w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a>\r\n    The Instruction Set Architecture (ISA) specifies all the information to write a program in machine language.  It contains:\r\n    <ul>\r\n        <li><em>Memory organization<\/em>, specifies the address maps; how many bits per location;<\/li>\r\n        <li><em>Register set<\/em>, specifies the size of the internal registers; how many registers; and how they can be used;<\/li>\r\n        <li><em>Instruction set<\/em>, specifies the opcodes; operands; data types; and addressing modes<\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    Simplicity rules\r\n<\/h3>\r\n\r\n<p>\r\n    The book <a href=\"https:\/\/highered.mheducation.com\/sites\/0072467509\/index.html\">Introduction to Computer Systems<\/a> by Patt and Partel, introduces an hypothetical microprocessor called LC-3.  For this text we push the simplicity of this little computer (LC-3) even further by:\r\n    <ul>\r\n        <li>\r\n            not supporting subroutine calls, <opcode>JSR<\/opcode> <opcode>JSRR<\/opcode> <opcode>RET<\/opcode>\r\n        <\/li>\r\n        <li>\r\n            not supporting interrupt handling, <opcode>RTI<\/opcode> <opcode>TRAP<\/opcode><\/li>\r\n        <li>not supporting overflow detection in arithmetic operations<\/li>\r\n        <li>not validating the Instruction encoding<\/li>\r\n        <li>replacing the <opcode>TRAP<\/opcode> <code>0<\/code>, with a simple <opcode>HALT<\/opcode> instruction.<\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    Implementing this very basic Instruction Set helps us understand the inner workings of a microprocessor.\r\n<\/p>\r\n<p>\r\n    With the exception of these simplifications, the Instruction Set Architecture (ISA) is specified in the book &#8220;<a href=\"https:\/\/highered.mheducation.com\/sites\/0072467509\/index.html\">Introduction to Computer Systems<\/a>&#8220;.  The following sections summarize this ISA.  For more details, refer to Appendix A.3 of the book.\r\n<\/p>\r\n\r\n<h3>\r\n    Overview\r\n<\/h3>\r\n\r\n<p>\r\n    <ul>\r\n        <li>\r\n            Memory organization:\r\n            <ul>\r\n                <li>\r\n                    16-bit addresses; word addressable only,\r\n                <\/li>\r\n                <li>\r\n                    16-bit memory words.\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Memory map\r\n            <ul>\r\n                <li>\r\n                    User programs start at memory location <code>3000<\/code> hex, and may extend to <code>FDFF<\/code>.\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Bit numbering\r\n            <ul>\r\n                <li>\r\n                    Bits are numbered from right (least significant bit) to left (most significant bit), starting with bit 0.\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Registers\r\n            <ul>\r\n                <li>\r\n                    A 16-bit program counter (<code>PC<\/code>), contains the address of the next instruction.\r\n                <\/li>\r\n                <li>\r\n                    Eight 16-bit general purpose registers, numbered <code>000 .. 111<\/code> binary, for register <code>R0 .. R7<\/code>.\r\n                <\/li>\r\n                <li>\r\n                    A 3-bit processor status register (<code>PSR<\/code>), that is updated when an instructions writes to a register.\r\n                    <ul>\r\n                        <li>\r\n                            <code>psr[2]==1<\/code>, when the 2&#8217;s complement value is negative (<em>n<\/em>).\r\n                        <\/li>\r\n                        <li>\r\n                            <code>psr[1]==1<\/code>, when the 2&#8217;s complement value is zero (<em>z<\/em>).\r\n                        <\/li>\r\n                        <li>\r\n                            <code>psr[0]==1<\/code>, when the 2&#8217;s complement value is positive (<em>p<\/em>).\r\n                        <\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Instructions\r\n            <ul>\r\n                <li>\r\n                    16-bit instructions, RISC (all instructions the same size).\r\n                    <ul>\r\n                        <li>\r\n                            the <em>opcode<\/em>, is encoded in the the 4 most significant bits of the instruction (bit 15..12).\r\n                        <\/li>\r\n                        <li>\r\n                            the <em>operands<\/em>, are encoded in the remaining 12 bits of the instruction.\r\n                        <\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    ALU performs <opcode>ADD<\/opcode> <opcode>AND<\/opcode> and <opcode>NOT<\/opcode> operations on 16-bit words.\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    Instructions\r\n<\/h3>\r\n\r\n<h4>\r\n    Operand conventions\r\n<\/h4>\r\n\r\n<p>\r\n    As mentioned above, from the 16 bit instruction, only 12 bits are available for the <em>operands<\/em>.  This implies that 16-bit data values or memory addresses have to be specified indirectly.  For instance by referring to a value in a register.\r\n<\/p>\r\n<p>\r\n    Addressing modes:\r\n    <ul>\r\n        <li>\r\n            <em>PC relative<\/em>, the address is calculated by adding an offset to the incremented program counter, <code>pc<\/code>.\r\n        <\/li>\r\n        <li>\r\n            <em>Register relative<\/em>, address is read from a register.\r\n        <\/li>\r\n        <li>\r\n            <em>Indirect<\/em>, address is read from a memory location who&#8221;s address is calculated by adding an offset to the incremented program counter.\r\n        <\/li>\r\n        <li>\r\n            <em>Load effective address<\/em>, address is calculated by adding an offset to the incremented program counter.  The address itself (not its value) is stored in a register.\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    The table below shows the conventions used in describing the instructions.\r\n    <div class=\"flex-container\">\r\n        <table class=\"operands\">\r\n            <tr>\r\n                <th>\r\n                    Operand\r\n                <\/th>\r\n                <th>\r\n                    Description\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>srID<\/operand>,\r\n                    <operand>sr1ID<\/operand>,\r\n                    <operand>sr2ID<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    Source Register Identifiers (<code>000..111<\/code> for <code>R0..R7<\/code>)\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    Destination Register Identifier (<code>000..111<\/code> for <code>R0..R7<\/code>)\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>baseRID<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    Base Register Identifier (<code>000..111<\/code> for <code>R0..R7<\/code>)\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>sr<\/operand>,\r\n                    <operand>sr1<\/operand>,\r\n                    <operand>sr2<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    16-bit Source Register value\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>dr<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    16-bit Destination Register value\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>baseR<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    Base Register value, used together with 2&#8217;s complement offset to calculate memory address.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>imm5<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    5-bit immediate value as 2&#8217;s complement integer\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>mem[address]<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    Contents of memory at the given address\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>offset6<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    6-bit value as 2&#8217;s complement integer\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>offset9<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    9-bit value as 2&#8217;s complement integer\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <operand>SX<\/operand>\r\n                <\/td>\r\n                <td>\r\n                    Sign-extend, by replicating the most significant bit as many times as necessary to extend to the word size of 16 bits.\r\n                <\/td>\r\n            <\/tr>\r\n            <caption>Conventions<\/caption>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    ALU instructions\r\n<\/h4>\r\n\r\n<p>\r\n    There are two variations of the <opcode>ADD<\/opcode> and <opcode>AND<\/opcode> instructions.  The difference is in <code>bit 5<\/code>     of the instruction word.  One takes the second argument from <code>sr2<\/code>, the other takes it from the immediate value <code>imm5<\/code>.\r\n<\/p>\r\n<h5>\r\n    Instruction types\r\n<\/h5>\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"instructiondescr\">\r\n            <tr>\r\n                <th>\r\n                    Opcode\r\n                <\/th>\r\n                <th>\r\n                    Name\r\n                <\/th>\r\n                <th>\r\n                    Assembly\r\n                <\/th>\r\n                <th>\r\n                    Operation\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>    \r\n                <td rowspan=\"2\">\r\n                    <opcode>ADD<\/opcode>\r\n                <\/td>\r\n                <td rowspan=\"2\">\r\n                    Addition\r\n                <\/td>\r\n                <td>\r\n                    ADD DR, SR1, SR2\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = sr1 + sr2<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    ADD DR, SR1, imm5\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = sr1 + SX(imm5)<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>    \r\n                <td rowspan=\"2\">\r\n                    <opcode>AND<\/opcode>\r\n                <\/td>\r\n                <td rowspan=\"2\">\r\n                    Logical AND\r\n                <\/td>\r\n                <td>\r\n                    AND DR, SR1, SR2\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = sr1 &#038; sr2<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    AND DR, SR1, imm5\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = sr1 &#038; SX(imm5)<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>    \r\n                <td>\r\n                    <opcode>NOT<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Logical NOT\r\n                <\/td>\r\n                <td>\r\n                    NOT DR, SR\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = ~sr<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<h5>\r\n    Instruction encoding\r\n<\/h5>\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"instructions\">\r\n            <tr>\r\n                <th class=\"borderright\">Opcode<\/th>\r\n                <th>15<\/th>\r\n                <th>14<\/th>\r\n                <th>13<\/th>\r\n                <th class=\"borderright\">12<\/th>\r\n                <th>11<\/th>\r\n                <th>10<\/th>\r\n                <th class=\"borderright\">9<\/th>\r\n                <th>8<\/th>\r\n                <th>7<\/th>\r\n                <th>6<\/th>\r\n                <th>5<\/th>\r\n                <th>4<\/th>\r\n                <th>3<\/th>\r\n                <th>2<\/th>\r\n                <th>1<\/th>\r\n                <th>0<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\" rowspan=\"2\">\r\n                    <opcode>ADD<\/opcode>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td  class=\"borderright\"colspan=\"3\">\r\n                    <operand>sr1ID<\/operand> \r\n                <\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td colspan=\"3\">\r\n                    <operand>sr2ID<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>sr1ID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td colspan=\"5\">\r\n                    <operand>imm5<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\" rowspan=\"2\">\r\n                    <opcode>AND<\/opcode>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td  class=\"borderright\"colspan=\"3\">\r\n                    <operand>sr1ID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td colspan=\"3\">\r\n                    <operand>sr2ID<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>sr1ID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td colspan=\"5\">\r\n                    <operand>imm5<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>NOT<\/opcode>\r\n                <\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>srID<\/operand>\r\n                <\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Memory instructions\r\n<\/h4>\r\n\r\n<h5>\r\n    Instruction types\r\n<\/h5>\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"instructiondescr\">\r\n            <tr>\r\n                <th>\r\n                    Opcode\r\n                <\/th>\r\n                <th>\r\n                    Name\r\n                <\/th>\r\n                <th>\r\n                    Assembly\r\n                <\/th>\r\n                <th>\r\n                    Operation\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>    \r\n                <td>\r\n                    <opcode>LD<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Load\r\n                <\/td>\r\n                <td>\r\n                    LD DR, label\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = mem[pc + SX(offset9)]<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>                            \r\n                <td>\r\n                    <opcode>LDR<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Load Register\r\n                <\/td>\r\n                <td>\r\n                    LDR DR, BaseR, offset6\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = mem[baseR + SX(offset6)]<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>                            \r\n                <td>\r\n                    <opcode>LDI<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Load Indirect\r\n                <\/td>\r\n                <td>\r\n                    LDI DR, label\r\n                <\/td>\r\n                <td>\r\n                    <operand>dr = mem[mem[pc + SX(offset9)]]<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>                            \r\n                <td class=\"underline\">\r\n                    <opcode>LEA<\/opcode>\r\n                <\/td>\r\n                <td class=\"underline\">\r\n                    Load Eff. Addr.\r\n                <\/td class=\"underline\">\r\n                <td class=\"underline\">\r\n                    LEA DR, target\r\n                <\/td>\r\n                <td class=\"underline\">\r\n                    <operand>dr = pc + SX(offset9)<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <opcode>ST<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Store\r\n                <\/td>\r\n                <td>\r\n                    ST SR, label\r\n                <\/td>\r\n                <td>\r\n                    <operand>mem[pc + SX(offset9)] = sr<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <opcode>STR<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Store Register\r\n                <\/td>\r\n                <td>\r\n                    STR SR, BaseR, offset6\r\n                <\/td>\r\n                <td>\r\n                    <operand>mem[baseR + SX(offset6)] = sr<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <opcode>STI<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Store Indirect\r\n                <\/td>\r\n                <td>\r\n                    STI SR, label\r\n                <\/td>\r\n                <td>\r\n                    <operand>mem[mem[pc + SX(offset9)]] = sr<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h5>\r\n    Instruction encoding\r\n<\/h5>\r\n\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"instructions\">\r\n            <tr>\r\n                <th class=\"borderright\">opcode<\/th>\r\n                <th>15<\/th>\r\n                <th>14<\/th>\r\n                <th>13<\/th>\r\n                <th class=\"borderright\">12<\/th>\r\n                <th>11<\/th>\r\n                <th>10<\/th>\r\n                <th class=\"borderright\">9<\/th>\r\n                <th>8<\/th>\r\n                <th>7<\/th>\r\n                <th>6<\/th>\r\n                <th>5<\/th>\r\n                <th>4<\/th>\r\n                <th>3<\/th>\r\n                <th>2<\/th>\r\n                <th>1<\/th>\r\n                <th>0<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>LD<\/opcode>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"9\">\r\n                    <operand>offset9<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>LDR<\/opcode>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>baseRID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"6\">\r\n                    <operand>offset6<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>LDI<\/opcode>\r\n                <\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"9\">\r\n                    <operand>offset9<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>LEA<\/opcode>\r\n                <\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>drID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"9\">\r\n                    <operand>offset9<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>ST<\/opcode>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>srID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"9\">\r\n                    <operand>offset9<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>STR<\/opcode>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>srID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>baseRID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"6\">\r\n                    <operand>offset6<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\">\r\n                    <opcode>STI<\/opcode>\r\n                <\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>srID<\/operand>\r\n                <\/td>\r\n                <td class=\"borderright\" colspan=\"9\">\r\n                    <operand>offset9<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<h4>\r\n    Control instructions\r\n<\/h4>\r\n\r\n<h5>\r\n    Instruction types\r\n<\/h5>\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"instructiondescr\">\r\n            <tr>\r\n                <th>\r\n                    Opcode\r\n                <\/th>\r\n                <th>\r\n                    Name\r\n                <\/th>\r\n                <th>\r\n                    Assembly\r\n                <\/th>\r\n                <th>\r\n                    Operation\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>    \r\n                <td>\r\n                    <opcode>BR*<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Branch\r\n                <\/td>\r\n                <td>\r\n                    BR<sup>*<\/sup> label\r\n                <\/td>\r\n                <td>\r\n                    if (condition<sup>*<\/sup>) <operand>pc = pc + SX(offset9)<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <opcode>JMP<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Jump\r\n                <\/td>\r\n                <td>\r\n                    JMP BaseR\r\n                <\/td>\r\n                <td>\r\n                    <operand>pc = baseR<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <opcode>HALT<\/opcode>\r\n                <\/td>\r\n                <td>\r\n                    Halt\r\n                <\/td>\r\n                <td>\r\n                    HALT                    \r\n                <\/td>\r\n                <td>\r\n                    stop program execution (simplified TRAP 0)\r\n                <\/td>    \r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    <sup>*<\/sup>) The assembler instruction for <opcode>BR*<\/opcode> can be either\r\n    <ul>\r\n        <li>\r\n            <code>BRn label<\/code>, test for state bit <code>n<\/code>\r\n        <\/li>\r\n        <li>\r\n            <code>BRz label<\/code>, test for state bit <code>z<\/code>\r\n        <\/li>\r\n        <li>\r\n            <code>BRn label<\/code>, test for state bit <code>p<\/code>\r\n        <\/li>\r\n        <li>\r\n            <code>BRzp label<\/code>, test for state bits <code>z<\/code> and <code>p<\/code>\r\n        <\/li>\r\n        <li>\r\n            <code>BRnp label<\/code>, test for state bits <code>n<\/code> and <code>p<\/code>\r\n        <\/li>\r\n        <li>\r\n            <code>BRnz label<\/code>, test for state bits <code>n<\/code> and <code>z<\/code>\r\n        <\/li>\r\n        <li>\r\n            <code>BRnzp label<\/code>, test for state bits <code>n<\/code>, <code>z<\/code> and <code>p<\/code>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h5>\r\n    Instruction encoding\r\n<\/h5>\r\n\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"instructions\">\r\n            <tr>\r\n                <th class=\"borderright\" >opcode<\/th>\r\n                <th>15<\/th>\r\n                <th>14<\/th>\r\n                <th>13<\/th>\r\n                <th class=\"borderright\">12<\/th>\r\n                <th>11<\/th>\r\n                <th>10<\/th>\r\n                <th class=\"borderright\">9<\/th>\r\n                <th>8<\/th>\r\n                <th>7<\/th>\r\n                <th>6<\/th>\r\n                <th>5<\/th>\r\n                <th>4<\/th>\r\n                <th>3<\/th>\r\n                <th>2<\/th>\r\n                <th>1<\/th>\r\n                <th>0<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\" >\r\n                    <opcode>BR*<\/opcode>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td><operand>n<\/operand><\/td>\r\n                <td><operand>z<\/operand><\/td>\r\n                <td class=\"borderright\"><operand>p<\/operand><\/td>\r\n                <td colspan=\"9\">\r\n                    <operand>offset9<\/operand>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\" >\r\n                    <opcode>JMP<\/opcode>\r\n                <\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td class=\"borderright\">0<\/td>\r\n                <td class=\"borderright\" colspan=\"3\">\r\n                    <operand>baseRID<\/operand>\r\n                <\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"borderright\" >\r\n                    <opcode>HALT<\/opcode>\r\n                <\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td class=\"borderright\">1<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n               This article &#8220;Simplified LC-3 Instruction set&#8221; continues with <a href=\"\/inquiries\/how-cpu-work\/design-30973\">Design<\/a> on the next page.\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Chapter 2. Introduces a simplified LC-3 instruction set.","protected":false},"author":41,"featured_media":6678,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[418],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Simplified LC-3 Instruction set - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Introduces a simplified LC-3 instruction set, that we later will design a CPU for and implement in Verilog HDL.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Simplified LC-3 Instruction set - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Introduces a simplified LC-3 instruction set, that we later will design a CPU for and implement in Verilog HDL.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2011-12-03T01:31:52+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-07T17:30:46+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\" \/>\n\t<meta property=\"og:image:width\" content=\"300\" \/>\n\t<meta property=\"og:image:height\" content=\"300\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\",\"width\":300,\"height\":300},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#webpage\",\"url\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971\",\"name\":\"Simplified LC-3 Instruction set - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#primaryimage\"},\"datePublished\":\"2011-12-03T01:31:52+00:00\",\"dateModified\":\"2022-02-07T17:30:46+00:00\",\"description\":\"Introduces a simplified LC-3 instruction set, that we later will design a CPU for and implement in Verilog HDL.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Inquiries\",\"item\":\"https:\/\/coertvonk.com\/category\/inquiries\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"How does a CPU work?\",\"item\":\"https:\/\/coertvonk.com\/category\/inquiries\/how-cpu-work\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Instruction set\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Instruction set\",\"datePublished\":\"2011-12-03T01:31:52+00:00\",\"dateModified\":\"2022-02-07T17:30:46+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#webpage\"},\"wordCount\":886,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\",\"articleSection\":[\"How does a CPU work?\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"https:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Simplified LC-3 Instruction set - Coert Vonk","description":"Introduces a simplified LC-3 instruction set, that we later will design a CPU for and implement in Verilog HDL.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971","og_locale":"en_US","og_type":"article","og_title":"Simplified LC-3 Instruction set - Coert Vonk","og_description":"Introduces a simplified LC-3 instruction set, that we later will design a CPU for and implement in Verilog HDL.","og_url":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971","og_site_name":"Coert Vonk","article_published_time":"2011-12-03T01:31:52+00:00","article_modified_time":"2022-02-07T17:30:46+00:00","og_image":[{"width":300,"height":300,"url":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","width":300,"height":300},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#webpage","url":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971","name":"Simplified LC-3 Instruction set - Coert Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#primaryimage"},"datePublished":"2011-12-03T01:31:52+00:00","dateModified":"2022-02-07T17:30:46+00:00","description":"Introduces a simplified LC-3 instruction set, that we later will design a CPU for and implement in Verilog HDL.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Inquiries","item":"https:\/\/coertvonk.com\/category\/inquiries"},{"@type":"ListItem","position":3,"name":"How does a CPU work?","item":"https:\/\/coertvonk.com\/category\/inquiries\/how-cpu-work"},{"@type":"ListItem","position":4,"name":"Instruction set"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Instruction set","datePublished":"2011-12-03T01:31:52+00:00","dateModified":"2022-02-07T17:30:46+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#webpage"},"wordCount":886,"commentCount":0,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","articleSection":["How does a CPU work?"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"https:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30971"}],"collection":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=30971"}],"version-history":[{"count":8,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30971\/revisions"}],"predecessor-version":[{"id":31208,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30971\/revisions\/31208"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/6678"}],"wp:attachment":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=30971"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=30971"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=30971"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}