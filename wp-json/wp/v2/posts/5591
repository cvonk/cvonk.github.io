{"id":5591,"date":"2012-09-07T10:12:37","date_gmt":"2012-09-07T17:12:37","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=5591"},"modified":"2022-05-03T12:57:08","modified_gmt":"2022-05-03T19:57:08","slug":"dd-wrt-and-openvpn","status":"publish","type":"post","link":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591","title":{"rendered":"DD-WRT and OpenVPN (without nvram footprint)"},"content":{"rendered":"<p>In a virtual private network (VPN) a group of two or more computer systems communicate securely over the public internet.\u00a0 Security is provided by authentication and encryption.\u00a0 Computers that connect through a VPN have access to private network as if they were physically connected to it.<\/p>\n<p>This article focuses on the <a href=\"https:\/\/openvpn.net\/community\/\">OpenVPN<\/a> implementation as it is included in the <a href=\"https:\/\/dd-wrt.com\/\">DD-Wrt router firmware<\/a>.\u00a0 Besides security, one of its prominent features is that its traffic can traverse network address translators (NAT) and firewalls.<\/p>\n<p>Two examples are given that describe the typical configurations:<\/p>\n<ul>\n<li><em>remote access<\/em>, providing remote users access to a private network, and<\/li>\n<li><em>site-to-site<\/em>, connecting a remote network to a private network.<\/li>\n<\/ul>\n<p>These examples have been tested on two <a href=\"https:\/\/wiki.dd-wrt.com\/wiki\/index.php\/Asus_RT-N16\">Asus RT-N16<\/a> routers running <a href=\"ftp:\/\/ftp.dd-wrt.com\/others\/eko\/V24-K26\/svn15943-snow\/dd-wrt.v24-15943_NEWD-2_K2.6_mega.bin\">DD-Wrt mega build 15943<\/a>.\u00a0 The approach outlined here might apply to other routers or builds that support OpenVPN and a writable file system such as JFFS, albeit with minor changes.<\/p>\n<h2>Before you start<\/h2>\n<p>This article assumes that readers possess a prior understanding of basic networking concepts such as IP addresses, DNS names, sub nets, routing, bridging, network interfaces, LANs and firewall rules.<\/p>\n<p>Prior to configuring OpenVPN, we need to gain shell access to the routers, give the server a domain name, and create writable storage, keys and certificates.<\/p>\n<h3>Writable storage<\/h3>\n<p>The most obvious method of configuring OpenVPN is through the DD-Wrt web interface (WebGUI).\u00a0 This stores the configuration, certificates and keys in nonvolatile memory (nvram).\u00a0 In many routers, there may not be enough nvram to store all this information.\u00a0 To show the amount of nvram available, use the command &#8220;nvram show | grep size:&#8221;.<\/p>\n<p>The approach presented here, has no nvram footprint.\u00a0 Instead it stores the configuration, keys and certificates on an USB memory stick.\u00a0 To format this memory stick, use the WebGUI as described in the <a title=\"DD-Wrt JFFS Wiki\" href=\"https:\/\/wiki.dd-wrt.com\/wiki\/index.php\/JFFS\">DD-Wrt JFFS Wiki<\/a>.\u00a0 An excerpt:<\/p>\n<ol>\n<li>Insert the memory stick into any available USB port on the back of your DD-Wrt router.<\/li>\n<li>In the WebGUI:\n<ul>\n<li>Administration >! JFFS2 Support > Enable = true, click <em>Save<\/em><\/li>\n<li>Wait a few seconds, the click <em>Apply<\/em>, wait a few seconds<\/li>\n<li>Administration > JFFS2 Support > Clean JFFS = true, click <em>Apply<\/em><\/li>\n<li>Wait for the router to finish formatting the memory stick and brings up the WebGUI again.<\/li>\n<li>Administration > JFFS2 Support > Clean JFFS = true, click <em>Save<\/em><\/li>\n<\/ul>\n<\/li>\n<li>Reboot the router (just to make sure)<\/li>\n<li>The memory stick will auto mount at <em>\/jffs<\/em>.<\/li>\n<\/ol>\n<h3>Certificates and keys<\/h3>\n<p>OpenVPN uses bidirectional authentication with\u00a0X.509 certificates.\u00a0\u00a0In this model the Certifying Authority (CA) is a third party that is trusted by the owner of the certificate and the party verifying the certificate.<\/p>\n<p>To establish\u00a0 mutual trust, the client authenticates the server certificate, and the server authenticates the client certificate. \u00a0It first ensures\u00a0that\u00a0the presented certificate was signed by a certifying authority (CA) , and verifies the common name (CN) and\u00a0certificate type (client or server).\u00a0 For details refer to the <a title=\"OpenVPN Howto\" href=\"https:\/\/openvpn.net\/community-resources\/how-to\/#pki\">OpenVPN Howto<\/a>.<\/p>\n<p>In the example below, we will setup our own CA and generate self signed certificates using a Windows host. \u00a0The procedure of generating the certificates is similar for the <a href=\"https:\/\/openvpn.net\/community-downloads\/\">Other flavors of OpenVPN<\/a>.<\/p>\n<ol>\n<li>Create <code>vars<\/code>\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">set_var EASYRSA_REQ_COUNTRY\t\"US\"\r\nset_var EASYRSA_REQ_COUNTRY\t\"US\"\r\nset_var EASYRSA_REQ_PROVINCE\t\"California\"\r\nset_var EASYRSA_REQ_CITY\t\"San Francisco\"\r\nset_var EASYRSA_REQ_ORG\t        \"Copyleft Certificate Co\"\r\nset_var EASYRSA_REQ_EMAIL\t\"me@example.net\"\r\nset_var EASYRSA_REQ_OU\t\t\"My Organizational Unit\"\r\nset_var EASYRSA_CERT_EXPIRE\t7300\r\nset_var EASYRSA_CERT_EXPIRE\t7300\r\nset_var EASYRSA_NS_SUPPORT\t\"yes\"\r\nset_var EASYRSA_NS_COMMENT\t\"Generated by EasyRSA\"<\/pre>\n<\/li>\n<li>Edit <code>easyrsa<\/code> to extend the <code>case \"$cmd\" in<\/code> statement with\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">\tbuild-code-signing-full)\r\n\t\tbuild_full code-signing \"$@\"\r\n\t\t;;<\/pre>\n<\/li>\n<li>Using the POSIX Shell in Windows\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">EasyRSA-Start.bat<\/pre>\n<ol>\n<li>Clear the key store\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/easyrsa init-pki<\/pre>\n<\/li>\n<li>Create Certifying Authority (CA)\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/easyrsa build-ca nopass<\/pre>\n<\/li>\n<li>Create server certificate(s)\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/easyrsa build-server-full \"Example Name\" nopass<\/pre>\n<\/li>\n<li>Create code signing certificate(s)\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/easyrsa --req-email=\"client@example.net\" build-client-full \"Client Name\" nopass<\/pre>\n<\/li>\n<li>If you plan to use OpenVPN, create Diffie Hellman parameters and shared secret key for tls-auth:\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/build-dh\r\nopenvpn --genkey --secret keys\/ta.key<\/pre>\n<\/li>\n<li>Show the\u00a0certificate details:\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">openssl x509 -in keys\/ca.crt -noout -text<\/pre>\n<\/li>\n<\/ol>\n<\/li>\n<li>In a Linux environment (only because <code>ssh-keygen<\/code> didn&#8217;t play well with the Windows&#8217; file permission system and spit out <code>UNPROTECTED PRIVATE KEY FILE!<\/code>\n<ol>\n<li>If you plan to use the key pair in Windows, you need to convert it to PKCS12 format\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">mkdir pki\\pkcs12\r\nopenssl pkcs12 -export -in \"pki\/issued\/Client Name.crt\" \\\r\n    -inkey \"pki\/private\/Client Name.key\" \\\r\n    -out \"pki\/pkcs12\/Client Name.p12\" -certfile \"pki\/ca.crt\"\r\n<\/pre>\n<p>    You can then import the certificates in windows by running <code>certmgr.msc<\/code> and importing the <i>ca.crt<\/i> to the Trusted Root Certificate Authority, and the <i>client.p12<\/i> to the Personal certificates.<\/li>\n<li>If you plan to use SSH\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">mkdir pki\\ssh\r\ncp \"pki\/private\/Client Name.key\" pki\/ssh\/\r\nssh-keygen -y -f \"pki\/ssh\/Client Name.key\" > \"pki\/ssh\/Client Name.pub\"<\/pre>\n<\/li>\n<li>If you plan to use SSH2 (for e.g. Bitvise\u00a0SSH)\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">mkdir pki\\ssh2\r\nssh-keygen -e -f \"pki\/ssh\/Client Name.pub\" > \"pki\/ssh2\/Client Name.pub\"\r\nopenssl rsa -in \"pki\/ssh\/Client Name.key\" > \"pki\/ssh2\/Client Name.key\"<\/pre>\n<\/li>\n<li>If you plan to do Java signing\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">set NAME=Client Name\r\nset PASSWD_OUT=changeme\r\nopenssl pkcs12 -in \"pki\\pkcs12\\${NAME}.p12\" -out pki\\pkcs12\\${NAME}-tmp.pem -passin pass: -passout \"pass:${PASSWD_OUT}\"\r\nopenssl pkcs12 -export -in keys\\temp.pem -out keys\\%NAME%_passwd.p12 -passin pass:%PASSWD_OUT% -passout pass:%PASSWD_OUT%\r\nkeytool -importkeystore -srckeystore keys\\%NAME%_passwd.p12 -destkeystore keys\\%NAME%.jks -srcstoretype pkcs12 -srcstorepass %PASSWD_OUT% -deststorepass %PASSWD_OUT%\r\ndel keys\\temp.pem<\/pre>\n<p>      The JKS keypair can then be imported in e.g. Android Studio.<\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<p>The previous method:  <\/p>\n<p>In the examples below, we will setup our own CA and generate self signed certificates using a Linux host. \u00a0The procedure of generating the certificates is similar for the <a href=\"https:\/\/openvpn.net\/community-downloads\/\">Windows version of OpenVPN<\/a>.<\/p>\n<ol>\n<li>Copy the <em>easy-rsa <\/em>directory and initialize:\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">cp -R \/usr\/share\/openvpn\/easy-rsa\/2.0 ~\/openvpn-ca  # easy-rsa may be elsewhere\r\ncd ~\/openvpn-ca\r\nvi vars\r\n  # update the fields at the end of the file\r\n  # change KEY_SIZE value to 2048\r\nvi openssl-1.0.0.cnf\r\n  # change default_md value to sha512\r\nvi pkitool\r\n  # change the two occurrences of -sha1 to -sha512\r\n. .\/vars\r\n.\/clean-all<\/pre>\n<\/li>\n<li>While we&#8217;re at it, assign extended key usage that will allow you to use the client certificates for other purposes such as code signing and email.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">vi .`whichopensslcnf`  # open openssl-1.0.0.cnf with Notepad under Windows\r\n# under [ usr_cert ]\r\n#  extendedKeyUsage=clientAuth, emailProtection, codeSigning\r\n#  keyUsage=digitalSignature<\/pre>\n<blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p>later if so desired, you can convert client certificates to PKCS12 format usi<\/p><\/blockquote>\n<\/li>\n<li>(optional) To use the key pair on Windows, you need to convert it to PKCS12 format\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">openssl pkcs12 -export -in \"pki\/issued\/Client Name.crt\"\r\n    -inkey \"pki\/private\/Client Name.key\" \r\n    -out \"pki\/pkcs12\/Client Name.p12\"\r\n    -certfile \"pki\/ca.crt\"<\/pre>\n<p>    You can then import the certificates in windows by running <code>certmgr.msc<\/code> and importing the <i>ca.crt<\/i> to the Trusted Root Certificate Authority, and the <i>client.p12<\/i> to the Personal certificates.<\/li>\n<li>(optional) To use the key pair for SSH or SSH2\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">ssh-keygen -y -f keys\/username.key > keys\/username_openssh.pub\r\nssh-keygen -e -f keys\/username_openssh.pub > keys\/username_ssh2.pub\r\nopenssl rsa -in keys\/username.key > keys\/username_ssh2.key<\/pre>\n<p>    The SSH2 keypair (username_ssh2.key) can then be imported in e.g. Bitvise\u00a0SSH.<\/li>\n<li>(optional) To use the key pair for Java signing, from a cmd prompt in Windows\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">set NAME=changeme\r\nset PASSWD_OUT=changeme\r\nopenssl pkcs12 -in keys\\%NAME%.p12 -out keys\\temp.pem -passin pass: -passout pass:%PASSWD_OUT%\r\nopenssl pkcs12 -export -in keys\\temp.pem -out keys\\%NAME%_passwd.p12 -passin pass:%PASSWD_OUT% -passout pass:%PASSWD_OUT%\r\nkeytool -importkeystore -srckeystore keys\\%NAME%_passwd.p12 -destkeystore keys\\%NAME%.jks -srcstoretype pkcs12 -srcstorepass %PASSWD_OUT% -deststorepass %PASSWD_OUT%\r\ndel keys\\temp.pem<\/pre>\n<p>    The JKS keypair can then be imported in e.g. Android Studio.<\/li>\n<li>Create a certifying authority certificate and corresponding secret key.\u00a0 Use your name followed by CA as the common name:\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/build-ca<\/pre>\n<\/li>\n<li>Create Diffie Hellman parameters and shared secret key for tls-auth:\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/build-dh\r\nopenvpn --genkey --secret keys\/ta.key<\/pre>\n<\/li>\n<li>Show the\u00a0certificate details:\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">openssl x509 -in keys\/ca.crt -noout -text<\/pre>\n<\/li>\n<\/ol>\n<h3>Real-time clock<\/h3>\n<p>Certificates have <strong>introduction and expiration dates<\/strong>, and therefore require the real-time clock and time zone to be set correctly.<\/p>\n<p>The Network Time Protocol (NTP) can be used to automatically set the clocks.\u00a0 To configure NTP on the DD-Wrt server and clients:<\/p>\n<ul>\n<li>Setup > Basic Setup > Time Settings.\u00a0 For my locality the settings are:\n<ul>\n<li>Time Zone = UTC-08:00<\/li>\n<li>Summer Time = 2nd Sun Mar &#8211; first Sun Nov<\/li>\n<li>Server IP\/Name = 0.north-america.pool.ntp.org<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Domain name<\/h3>\n<p>Usually the client will find the server by its public DNS name.\u00a0 If your router gets a dynamic WAN address, you should configure a Dynamic DNS (DDNS) service on the router used as OpenVPN server.\u00a0 This will give the router a public domain name whose address is automatically updated.<\/p>\n<ul>\n<li>Setup > DDNS > Dynamic Domain Name System (my personal favorite is afraid.org)\n<ul>\n<li>DDNS Service = freedns.afraid.org<\/li>\n<li>Host Name = <em>yourhostname<\/em>,<em>hash<\/em> (the <em>hash<\/em> value can be obtained as described in <a href=\"http:\/\/knoxgeek.blogspot.com\/2009\/08\/dd-wrt-and-freednsafraidorg.html\">DD-Wrt and freedns.afraid.org<\/a>).<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>SSH and emacs<\/h3>\n<p>The examples below assume that routers are accessible using secure shell (<a href=\"https:\/\/wiki.dd-wrt.com\/wiki\/index.php\/SSH\">ssh<\/a>).\u00a0 This also enable ssh features in an editor such as emacs. For example, on the Linux host used as the certifying authority:<\/p>\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">emacs \/rtr:\/jffs\/etc\/config\/rtr-server.wanup<\/pre>\n<p>Where <em>rtr<\/em> corresponds to an entry in\u00a0 your <em>~\/.ssh\/config<\/em> file.<\/p>\n<h2>Routing versus Bridging<\/h2>\n<p>OpenVPN can connect clients using network routing or bridging.\u00a0 For a comparison between routing and bridging, refer to <a href=\"https:\/\/community.openvpn.net\/openvpn\/wiki\/BridgingAndRouting\">Bridging vs. Routing<\/a>.\u00a0 An excerpt:<\/p>\n<ul>\n<li><em>Routing<\/em> uses the kernel device TUN to simulate a network layer device.\u00a0 It operates at the network layer where it handles IP packets.\u00a0 As a result, it:\n<ul>\n<li>has a low overhead, because it does not support broadcasts or require Ethernet headers;<\/li>\n<li>for IPv6, OpenVPN version >=2.3 is required.<\/li>\n<li>devices such as Android only support TUN.<\/li>\n<\/ul>\n<\/li>\n<li><em>Bridging\u00a0<\/em>uses the kernel device TAP to simulates a link layer device.\u00a0 It operates at the link layer and handles Ethernet frames.\u00a0 Consequently it:\n<ul>\n<li>supports non-IP based traffic;<\/li>\n<li>supports Windows network neighborhood discovery without using WINS;<\/li>\n<li>broadcasts and Ethernet headers cause overhead (for examples, you need to tell DHCP server not to respond to request coming over TAP).<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2>Routing example: Site-to-Site<\/h2>\n<p>OpenVPN can be used to connect two local area networks (LANs).\u00a0 In this example, two DD-Wrt routers are used.\u00a0 One serves as the server, and the other as the client.\u00a0 Note that the private network numbers are fairly arbitrary.\u00a0 They were chosen to match my existing networks.<\/p>\n<ul>\n<li><em>rtr<\/em>, the server, with\n<ul>\n<li>WAN address <em>rtr.yourdomain.com<\/em><\/li>\n<li>LAN network 10.0.1.0\/24<\/li>\n<\/ul>\n<\/li>\n<li><em>rtr2<\/em>, the client.\n<ul>\n<li>LAN network 10.0.2.0\/24<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>The server will use network 10.0.3.0\/24 for the VPN.\u00a0 Of that allocates the first address (10.0.3.1) for itself.\u00a0 Clients will be allocated one of the remaining addresses.<\/p>\n<div class=\"align-center\">\n<figure><a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/rtr-server.png\" rel=\"attachment wp-att-5818\"><img class=\"aligncenter size-full wp-image-5818\"  title=\"\"  src=\"\/wp-content\/uploads\/rtr-server.png\" alt=\"rtr-server\" width=\"437\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr-server.png 437w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr-server-400x324.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr-server-250x203.png 250w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr-server-300x243.png 300w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr-server-350x284.png 350w\" sizes=\"(max-width: 437px) 100vw, 437px\" \/><\/a><figcaption>srtr-erver<\/figcaption><\/figure>\n<\/div>\n<p>The examples presented here, do not use the WebGUI nor NVRAM.\u00a0 Instead they use bash scripts store on an memory stick and mounted as <em>\/jffs<\/em>.\u00a0 The scripts are automatically started by DD-Wrt each time the WAN link and firewall are up.\u00a0 For more information refer to\u00a0<a href=\"https:\/\/wiki.dd-wrt.com\/wiki\/index.php\/Script_Execution\" target=\"_blank\" rel=\"noopener noreferrer\">DD-Wrt Script Execution<\/a>.<\/p>\n<h3>Certificates<\/h3>\n<ul>\n<li>On the Linux host, create certificates and corresponding secret keys for the server and client.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/build-key-server rtr-server # common name = rtr-server, no passwd\r\n.\/build-key        rtr2       # common name = rtr2, no passwd<\/pre>\n<\/li>\n<\/ul>\n<h3>OpenVPN Server<\/h3>\n<ul>\n<li>From the Linux host, copy the certificates\/keys files to <em>\/jffs\/etc\/openvpn <\/em>on the server.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">ssh rtr mkdir -p \/jffs\/etc\/config\r\nssh rtr mkdir -p \/jffs\/etc\/openvpn\/ccd\r\nscp ca.crt dh2048.pem ta.key rtr-server.crt rtr-server.key rtr:\/jffs\/etc\/openvpn\/<\/pre>\n<\/li>\n<li>Create a startup script <em>\/jffs\/etc\/openvpn\/config\/rtr-server.wanup <\/em>on the server.\u00a0 Make the script executable (<em>chmod 755<\/em>).\u00a0 DD-Wrt will call this script each time the WAN link comes up.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/sh\r\n\r\nDEV=tun0\r\nPORT=1194\r\nPROTO=udp\r\n\r\nBASE=$(basename $0)\r\nNAME=${BASE%\\.*}\r\nTMP=\/tmp\/$NAME\r\nPID=$TMP\/pid\r\nLOG=$TMP\/log\r\n#LOG=\/dev\/null\r\nDIR=$(dirname $0)\/..\/openvpn\r\n\r\n[ -d $TMP ] || mkdir -p $TMP\r\n\r\nif [ -e $PID ] ; then\r\n    kill -0 `cat $PID`\r\n    if [ $? -eq 1 ] ; then\r\n\trm $PID  # remove false PID\r\n    fi\r\nfi\r\n\r\nif [ -e $PID ] ; then\r\n    kill -HUP `cat $PID`  # restart\r\nelse\r\n    rm $PID\r\n    ln -s \/usr\/sbin\/openvpn $TMP\/openvpn\r\n    $TMP\/openvpn \\\r\n\t--daemon --writepid $PID --log-append $LOG \\\r\n\t--cd $DIR --config $NAME.ovpn \\\r\n\t--dev $DEV --port $PORT --proto $PROTO \\\r\n\t--up \"$DIR\/$NAME.helper $DEV $PORT $PROTO up\" \\\r\n\t--down \"$DIR\/$NAME.helper $DEV $PORT $PROTO down\" \\\r\n\t--ifconfig-pool-persist $TMP\/ip-pool 86400\r\nfi<\/pre>\n<\/li>\n<li>Create an helper script <em>\/jffs\/etc\/openvpn\/rtr-server.helper <\/em>on the server. Make the script executable (<em>chmod 755<\/em>).\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/sh\r\nDEV=$1\r\nPORT=$2\r\nPROTO=$3\r\ncase \"$4\" in\r\n    'up')\r\n        iptables -I INPUT -p $PROTO --dport $PORT -j ACCEPT\r\n        iptables -I INPUT   -i $DEV -j ACCEPT\r\n        iptables -I FORWARD -i $DEV -j ACCEPT\r\n        iptables -I FORWARD -o $DEV -j ACCEPT\r\n\t;;\r\n    'down')\r\n        iptables -D INPUT -i $DEV -j ACCEPT\r\n        iptables -D INPUT -p $PROTO --dport $PORT -j ACCEPT\r\n        iptables -D FORWARD -i $DEV -j ACCEPT\r\n        iptables -D FORWARD -o $DEV -j ACCEPT\r\n\t;;\r\n    *)\r\n\texit 1\r\nesac\r\nexit 0<\/pre>\n<\/li>\n<li>Create the configuration file <em>\/jffs\/etc\/openvpn\/rtr-server.ovpn <\/em>on the server\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">server 10.0.3.0 255.255.255.0\r\nca ca.crt\r\ncert rtr-server.crt\r\nkey rtr-server.key\r\ndh dh2048.pem\r\ntls-auth ta.key 0\r\ntls-server\r\nkeepalive 10 120\r\ncipher bf-cbc\r\nauth sha1\r\nmtu-disc yes\r\ntopology subnet\r\nfast-io\r\nverb 4\r\nmute 5\r\nmanagement 127.0.0.1 5002\r\nmanagement-log-cache 50\r\npush \"route 10.0.1.0 255.255.255.0\"\r\nclient-config-dir ccd                  # run client script matching CN\r\nroute 10.0.2.0 255.255.255.0 10.0.3.1  # kernel to OpenVPN server\r\nclient-to-client<\/pre>\n<\/li>\n<li>Create the client specific configuration file <em>\/jffs\/etc\/openvpn\/ccd\/rtr2 <\/em>on the server\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">iroute 10.0.2.0 255.255.255.0  # OpenVPN server to remote clients<\/pre>\n<\/li>\n<li>Start the OpenVPN server\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">\/jffs\/etc\/config\/rtr-server.wanup<\/pre>\n<\/li>\n<li>See how it is going.\u00a0 Note that you can also use the WebGUI (Status > OpenVPN) to inspect the OpenVPN log messages.\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">more \/tmp\/rtr-server\/log  # a treasure trove of debug information\r\nnetstat -lu               # should be listening on port 1194\r\niptables -nvL             # INPUT chain should have port 1194 open<\/pre>\n<\/li>\n<\/ul>\n<h3>OpenVPN Client<\/h3>\n<ul>\n<li>From the Linux host, copy the certificates\/keys files to <em>\/jffs\/etc\/openvpn<\/em>\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">ssh rtr2 mkdir -p \/jffs\/etc\/config\r\nssh rtr2 mkdir -p \/jffs\/etc\/openvpn\r\nscp ca.crt ta.key rtr2.crt rtr2.key rtr2:\/jffs\/etc\/openvpn\/<\/pre>\n<\/li>\n<li>Create a startup script <em>\/jffs\/etc\/openvpn\/config\/rtr2-to-rtr.wanup <\/em>on the server.\u00a0 Remember to make the script executable (<em>chmod 755<\/em>).\u00a0 DD-Wrt will call this script each time the WAN link comes up.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/sh\r\n\r\nDEV=tun0\r\nPORT=1194\r\nPROTO=udp\r\n\r\nBASE=$(basename $0)\r\nNAME=${BASE%\\.*}\r\nTMP=\/tmp\/$NAME\r\nPID=$TMP\/pid\r\nLOG=$TMP\/log\r\n#LOG=\/dev\/null\r\nDIR=$(dirname $0)\/..\/openvpn\r\n\r\n[ -d $TMP ] || mkdir -p $TMP\r\n\r\nif [ -e $PID ] ; then\r\n    kill -0 `cat $PID`\r\n    if [ $? -eq 1 ] ; then\r\n\trm $PID  # remove false PID\r\n    fi\r\nfi\r\n\r\nif [ -e $PID ] ; then\r\n    kill -HUP `cat $PID`  # restart\r\nelse\r\n    rm $PID\r\n    ln -s \/usr\/sbin\/openvpn $TMP\/openvpn\r\n    $TMP\/openvpn \\\r\n\t--daemon --writepid $PID --log-append $LOG \\\r\n\t--cd $DIR --config $NAME.ovpn \\\r\n\t--dev $DEV --port $PORT --proto $PROTO \\\r\n\t--up \"$DIR\/$NAME.helper $DEV up\" \\\r\n\t--down \"$DIR\/$NAME.helper $DEV down\"\r\nfi<\/pre>\n<\/li>\n<li>Create an helper script <em>\/jffs\/etc\/openvpn\/rtr2-to-rtr.helper <\/em>on the server. Remember to make the script executable (<em>chmod 755<\/em>).\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/sh\r\nDEV=$1\r\ncase \"$2\" in\r\n    'up')\r\n        iptables -I INPUT   -i $DEV -j ACCEPT\r\n        iptables -I FORWARD -i $DEV -j ACCEPT\r\n        iptables -I FORWARD -o $DEV -j ACCEPT\r\n\t;;\r\n    'down')\r\n        iptables -D INPUT -i $DEV -j ACCEPT\r\n        iptables -D FORWARD -i $DEV -j ACCEPT\r\n        iptables -D FORWARD -o $DEV -j ACCEPT\r\n\t;;\r\n    *)\r\n\texit 1\r\nesac\r\nexit 0<\/pre>\n<\/li>\n<li>Create the configuration file <em>\/jffs\/etc\/openvpn\/rtr2-to-rtr.ovpn <\/em>on the client\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">client\r\nremote rtr.yourdomain.com\r\nns-cert-type server\r\nca ca.crt\r\ncert rtr2.crt\r\nkey rtr2.key\r\ntls-auth ta.key 1\r\ntls-client\r\ncipher bf-cbc\r\nauth sha1\r\nresolv-retry infinite\r\nnobind\r\npersist-key\r\npersist-tun\r\nmtu-disc yes\r\nfast-io\r\nverb 4\r\nmute 5\r\nmanagement 127.0.0.1 5001\r\nmanagement-log-cache 50<\/pre>\n<\/li>\n<li>Start the OpenVPN client\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">\/jffs\/etc\/config\/rtr2-to-rtr.wanup<\/pre>\n<\/li>\n<li>See how things are going.\u00a0 Note that you can also use the WebGUI (Status > OpenVPN) to inspect the OpenVPN log messages.\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">more \/tmp\/rtr2-to-rtr\/log<\/pre>\n<\/li>\n<\/ul>\n<h2>Bridging example: Remote Access<\/h2>\n<p>OpenVPN can also be used to connect remote computers to a local area network.\u00a0 The VPN gives the remote computers access to resources on the local area network such as files, printers, databases or internal websites.<\/p>\n<p>In this example, one DD-Wrt router is configured as an OpenVPN server.\u00a0 Road warrior clients can connect to this router to gain access to the server&#8217;s LAN.\u00a0 The systems are:<\/p>\n<ul>\n<li><em>rtr2<\/em>, the server with:\n<ul>\n<li>LAN network 10.0.2.0\/24<\/li>\n<li>WAN address <em>rtr2.yourdomain.com<\/em><\/li>\n<\/ul>\n<\/li>\n<li><em>client<\/em>, connecting from a public IP address, running either\n<ul>\n<li>Windows 7 x64 with <a href=\"https:\/\/openvpn.net\/\">OpenVPN GUI >=2.1.3<\/a> installed, or<\/li>\n<li>Mac OS X with\u00a0 <a href=\"https:\/\/tunnelblick.net\/documents.html\">Tunnelblick >=3.2.8<\/a>\u00a0 installed.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<div class=\"align-center\">\n<figure><a class=\"hide-anchor fancybox\" href=\"https:\/\/coert.vonk.one\/\/wp-content\/uploads\/rtr2-server.png\" rel=\"attachment wp-att-5819\"><img class=\"aligncenter size-full wp-image-5819\" title=\"rtr2-server\" src=\"\/wp-content\/uploads\/rtr2-server.png\" alt=\"rtr2-server\" width=\"437\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr2-server.png 437w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr2-server-400x239.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr2-server-250x149.png 250w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr2-server-300x179.png 300w, https:\/\/coert.vonk.one\/wp-content\/uploads\/rtr2-server-350x209.png 350w\" sizes=\"(max-width: 437px) 100vw, 437px\" \/><\/a><figcaption>rtr2-server<\/figcaption><\/figure>\n<\/div>\n<h3>Certificates<\/h3>\n<ul>\n<li>On the Linux host, create certificates and corresponding secret keys for the server and clients.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">.\/build-key-server rtr2-server  # common name = rtr2-server, no passwd\r\n.\/build-key        username1    # common name = username1, no passwd\r\n.\/build-key        username2    # common name = username2, no passwd<\/pre>\n<\/li>\n<\/ul>\n<h3>OpenVPN Server<\/h3>\n<ul>\n<li>From the Linux host, copy the certificates\/keys files to <em>\/jffs\/etc\/openvpn <\/em>on the server.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">ssh rtr mkdir -p \/jffs\/etc\/config\r\nssh rtr mkdir -p \/jffs\/etc\/openvpn\/ccd\r\nscp ca.crt dh2048.pem ta.key rtr-server.crt rtr-server.key rtr:\/jffs\/etc\/openvpn\/<\/pre>\n<\/li>\n<li>Create a startup script <em>\/jffs\/etc\/openvpn\/config\/rtr2-server.wanup <\/em>on the server. Make the script executable (<em>chmod 755<\/em>). DD-Wrt will call this script each time WAN link comes up.\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/sh\r\n\r\nBR=br0\r\nDEV=tap0\r\nETHDEV=eth0\r\nPORT=1194\r\nPROTO=udp\r\n\r\nBASE=$(basename $0)\r\nNAME=${BASE%\\.*}\r\nTMP=\/tmp\/$NAME\r\nPID=$TMP\/pid\r\nLOG=$TMP\/log\r\n#LOG=\/dev\/null\r\nDIR=$(dirname $0)\/..\/openvpn\r\n\r\n[ -d $TMP ] || mkdir -p $TMP\r\necho \"$(date) $NAME: WAN up\" >$LOG\r\n\r\nif [ -e $PID ] ; then\r\n    kill -0 `cat $PID`\r\n    if [ $? -eq 1 ] ; then\r\n\trm $PID  # remove false PID\r\n    fi\r\nfi\r\n\r\nif [ -e $PID ] ; then\r\n    kill -HUP `cat $PID`  # restart\r\nelse\r\n    rm $PID\r\n\r\n    ln -s \/usr\/sbin\/openvpn $TMP\/openvpn\r\n    $TMP\/openvpn \\\r\n\t--daemon --writepid $PID --log-append $LOG \\\r\n\t--cd $DIR --config $NAME.ovpn \\\r\n\t--dev $DEV --port $PORT --proto $PROTO \\\r\n\t--up \"$DIR\/$NAME.helper $BR $DEV $PORT $PROTO up\" \\\r\n\t--down \"$DIR\/$NAME.helper $BR $DEV $PORT $PROTO down\" \\\r\n\t--ifconfig-pool-persist $TMP\/ip-pool 86400\r\nfi<\/pre>\n<\/li>\n<li>Create an helper script <em>\/jffs\/etc\/openvpn\/rtr2-server.helper <\/em>on the server. Make the script executable (<em>chmod 755<\/em>).<br \/>\n    Note that the <em>tap<\/em> interface will get a random MAC address and the bridge (<em>br0<\/em>) picking up the lowest address.\u00a0 This confuses Windows Network Discovery in Windows 7, triggering a &#8220;Set Network Location&#8221; dialog.\u00a0 To prevent this, you can take the last random MAC address and reuse it for subsequent <em>tap<\/em> interfaces.\u00a0 (More details <a href=\"https:\/\/forum.dd-wrt.com\/phpBB2\/viewtopic.php?p=508041\">here<\/a>.)<\/p>\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">#!\/bin\/sh\r\nBR=$1\r\nDEV=$2\r\nPORT=$3\r\nPROTO=$4\r\ncase \"$5\" in\r\n    'up')\r\n\t#ifconfig $DEV hw ether enter_your_last_mac_address\r\n        ifconfig $DEV 0.0.0.0 promisc up \r\n        brctl addif $BR $DEV \r\n        iptables -I INPUT -p $PROTO --dport $PORT -j ACCEPT\r\n\tiptables -I INPUT   -i $DEV -j ACCEPT\r\n\tiptables -I FORWARD -i $DEV -j ACCEPT\r\n\tiptables -I FORWARD -o $DEV -j ACCEPT\r\n\t;;\r\n    'down')\r\n\tbrctl delif $DEV\r\n\tifconfig $DEV down\r\n\tiptables -D INPUT -i $DEV -j ACCEPT\r\n\tiptables -D INPUT -p $PROTO --dport $PORT -j ACCEPT\r\n\tiptables -D FORWARD -i $DEV -j ACCEPT\r\n\tiptables -D FORWARD -o $DEV -j ACCEPT\r\n\t;;\r\n    *)\r\n\texit 1\r\nesac\r\nexit 0<\/pre>\n<\/li>\n<li>Create the configuration file <em>\/jffs\/etc\/openvpn\/rtr2-server.ovpn <\/em>on the server. Note that port 5002 is used by the <em>\/etc\/openvpn*.sh<\/em>scripts.\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">server-bridge 10.0.2.1 255.255.255.0 10.0.2.150 10.0.2.159\r\nca ca.crt\r\ncert rtr2-server.crt\r\nkey rtr2-server.key\r\ndh dh2048.pem\r\ntls-auth ta.key 0\r\nkeepalive 10 120\r\ncipher bf-cbc\r\nauth sha1\r\nmtu-disc yes\r\ntopology subnet\r\nclient-to-client\r\npush \"route 10.0.1.0 255.255.255.0 10.0.2.1\" # optional across other VPN\r\nfast-io\r\nverb 4\r\nmute 5\r\nmanagement 127.0.0.1 5002\r\nmanagement-log-cache 50<\/pre>\n<\/li>\n<li>Start the OpenVPN server\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">\/jffs\/etc\/config\/rtr2-server.wanup<\/pre>\n<\/li>\n<li>See how it is going. Note that you can also use the WebGUI (Status > OpenVPN) to inspect the OpenVPN log messages.\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">more \/tmp\/rtr2-server\/log  # a treasure trove of debug information\r\nnetstat -lu                # should be listening on port 1194\r\niptables -nvL              # INPUT chain should have port 1194 open<\/pre>\n<\/li>\n<\/ul>\n<h3>OpenVPN Server (using WebGUI)<\/h3>\n<p>Alternatively, the server can be configured using the DD-Wrt WebGUI.\u00a0 The config will be stored in nvram, except for the large certificates and key files that are stored on a memory stick.\u00a0 In this configuration, DD-Wrt generate matching files in <em>\/tmp\/openvpn\/<\/em>.<\/p>\n<ul>\n<li>Copy the certificates\/keys files.\u00a0 Remember to limit access to the key files (<em>chmod 600<\/em>).\n<ul>\n<li><em>ca.crt<\/em><\/li>\n<li><em>rtr2-server.crt<\/em><\/li>\n<li><em>rtr2-server.key<\/em><\/li>\n<li><em>dh2048.pem<\/em><\/li>\n<li><em>ta.key<\/em><\/li>\n<\/ul>\n<\/li>\n<li>Services > VPN > OpenVPN Server.\u00a0 These values will be used to create the configuration file <em>\/tmp\/openvpn\/openvpn.conf<\/em>\n<ul>\n<li>Start OpenVPN Server = enable<\/li>\n<li>Start Type = WAN up (after domain resolver is up)<\/li>\n<li>Switch Server config = new Style<\/li>\n<li>Pool IP = 10.0.2.150 .. 10.0.2.159<\/li>\n<li>Gateway = 10.0.2.1<\/li>\n<li>Netmask = 255.255.255.0<\/li>\n<li>Port = 1194<\/li>\n<li>Tunnel Protocol = UDP<\/li>\n<li>Encryption Cipher = Blowfish CBC<\/li>\n<li>Hash Algorithm = SHA1<\/li>\n<li>Advanced Options = disable<\/li>\n<li>The Cert, Key fields are left blank.\u00a0 Instead use the Additional Config field to refer to the files on the USB stick\u00a0 (<a href=\"https:\/\/forum.dd-wrt.com\/phpBB2\/viewtopic.php?t=145460\">see OpenVPN with key and certificate files via WebGUI<\/a>).\n<pre class=\"brush: plain; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">cert \/jffs\/rtr2.crt\r\nca \/jffs\/ca.crt\r\nkey \/jffs\/rtr2.key\r\ndh \/jffs\/dh2048.pem\r\ntls-auth \/jffs\/ta.key 0\r\npush \"route 10.0.2.0 255.255.255.0\"<\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>OpenVPN Client, running Windows 10<\/h3>\n<ul>\n<li>Import Certificates (from paragraph\u00a06.4.1 in <a href=\"http:\/\/siso.sourceforge.net\/ipsec-winxp.html#ipsec-winxp-x509import\">my document SISO<\/a>).\n<ul>\n<li>From the start menu run certmgr.msc<\/li>\n<li>Under the Certificates, right-click on Trusted Root Certification Authorities. From All Tasks choose Import.\n<ul>\n<li>Click Next<\/li>\n<li>Browse to select the Personal Information Exchange certificate CAcert<strong>.crt<\/strong>.<\/li>\n<li>Click Next<\/li>\n<li>Type in the password, and Mark this key as exportable<\/li>\n<li>Click Next<\/li>\n<li>Place all certificates in Personal Certificates Store<\/li>\n<li>Click Next; Click Finish<\/li>\n<li>Verify that the certificate is listed under the Root Certification Authorities<\/li>\n<\/ul>\n<\/li>\n<li>Under the Certificates, right-click on Personal. From All Tasks choose Import.\n<ul>\n<li>Click Next<\/li>\n<li>Browse to select the Personal Information Exchange certificate (yourname<strong>.p12<\/strong>).<\/li>\n<li>Click Next<\/li>\n<li>Type in the password, and Mark this key as exportable<\/li>\n<li>Click Next<\/li>\n<li>Place all certificates in Personal Store<\/li>\n<li>Click Next; Click Finish<\/li>\n<li>Verify that the certificate displays correctly, and the Root CA is known.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<li>Use explorer to show the directory &#8220;C:\\Program Files (x86)\\OpenVPN\\config\\&#8221;\n<ul>\n<li>Populate the directory with the certificate and key files from the Linux host:\n<ul>\n<li><em>ca.crt<\/em><\/li>\n<li><em>username1.crt<\/em><\/li>\n<li><em>username1.key<\/em><\/li>\n<li><em>ta.key<\/em><\/li>\n<\/ul>\n<\/li>\n<li>Create the configuration file <em>rtr2.ovpn<\/em> in that same directory<em><br \/>\n\t<\/em><\/p>\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">remote rtr2.yourdomain.com 1194\r\nclient\r\nca ca.crt \r\ncert username1.crt \r\nkey username1.key \r\ntls-auth ta.key 1\r\nns-cert-type server\r\ndev tap\r\nproto udp \r\nnobind \r\nresolv-retry infinite \r\npersist-key \r\npersist-tun \r\nremote-cert-tls server \r\nfloat\r\nscript-security 2\r\ncipher BF-CBC\r\nauth SHA1\r\nverb 3\r\nmute 5<\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>With OpenVPN running, right-click on its icon in the task area (bottom right) > connect > <em>rtr2<\/em>.<\/li>\n<\/ul>\n<h3>OpenVPN Client, running OS X<\/h3>\n<ul>\n<li>Create folder rtr2.yourdomain.com on your Desktop.\u00a0 (details can be found in the wiki)\n<ul>\n<li>Copy the certificate\/key files to that folder\n<ul>\n<li><em>ca.crt<\/em><\/li>\n<li><em>username2.crt<\/em><\/li>\n<li><em>username2.key<\/em><\/li>\n<li><em>ta.key<\/em><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul>\n<li>In that folder, create configuration file <em>rtr2.ovpn<\/em>\n<pre class=\"brush: bash; gutter: false; title: ; toolbar: false; notranslate\" title=\"\">remote rtr2.yourdomain.com 1194  # update me\r\nclient\r\nca ca.crt \r\ncert username2.crt \r\nkey username2.key \r\ntls-auth ta.key 1\r\nns-cert-type server\r\ndev tap\r\nproto udp \r\nnobind \r\nresolv-retry infinite \r\npersist-key \r\npersist-tun \r\nremote-cert-tls server \r\nfloat\r\nscript-security 2\r\ncipher BF-CBC\r\nauth SHA1\r\nverb 3\r\nmute 5<\/pre>\n<\/li>\n<\/ul>\n<\/li>\n<li>Append the extension <em>.tblk<\/em> to the folder name. This will change the folder icon into a Tunnelblick VPN Configuration.<\/li>\n<li>Double-click the folder&#8217;s new icon to install it. Choose private configuration when asked.<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Uses the OpenVPN implementation as included in the DD-WRT router firmware.  This VPN can traverse network address translators (NAT) and firewalls.<\/p>\n","protected":false},"author":41,"featured_media":6644,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[167],"tags":[177,225,223,226,474,473,224],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Create an OpenVPN tunnel on the DD-WRT without using precious nvram<\/title>\n<meta name=\"description\" content=\"Uses the OpenVPN implementation as included in the DD-WRT router firmware. This VPN can traverse network address translators (NAT) and firewalls.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Create an OpenVPN tunnel on the DD-WRT without using precious nvram\" \/>\n<meta property=\"og:description\" content=\"Uses the OpenVPN implementation as included in the DD-WRT router firmware. This VPN can traverse network address translators (NAT) and firewalls.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2012-09-07T17:12:37+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-03T19:57:08+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png\" \/>\n\t<meta property=\"og:image:width\" content=\"300\" \/>\n\t<meta property=\"og:image:height\" content=\"300\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"21 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#primaryimage\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png\",\"width\":300,\"height\":300},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#webpage\",\"url\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591\",\"name\":\"Create an OpenVPN tunnel on the DD-WRT without using precious nvram\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#primaryimage\"},\"datePublished\":\"2012-09-07T17:12:37+00:00\",\"dateModified\":\"2022-05-03T19:57:08+00:00\",\"description\":\"Uses the OpenVPN implementation as included in the DD-WRT router firmware. This VPN can traverse network address translators (NAT) and firewalls.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Networking (IP)\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/networking\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"DD-WRT and OpenVPN (without nvram footprint)\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"DD-WRT and OpenVPN (without nvram footprint)\",\"datePublished\":\"2012-09-07T17:12:37+00:00\",\"dateModified\":\"2022-05-03T19:57:08+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#webpage\"},\"wordCount\":4266,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png\",\"keywords\":[\"DD-WRT\",\"network\",\"openvpn\",\"route\",\"router\",\"tcp-ip\",\"tunnel\"],\"articleSection\":[\"Networking (IP)\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"https:\/\/coert.vonk.one\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Create an OpenVPN tunnel on the DD-WRT without using precious nvram","description":"Uses the OpenVPN implementation as included in the DD-WRT router firmware. This VPN can traverse network address translators (NAT) and firewalls.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591","og_locale":"en_US","og_type":"article","og_title":"Create an OpenVPN tunnel on the DD-WRT without using precious nvram","og_description":"Uses the OpenVPN implementation as included in the DD-WRT router firmware. This VPN can traverse network address translators (NAT) and firewalls.","og_url":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591","og_site_name":"Coert Vonk","article_published_time":"2012-09-07T17:12:37+00:00","article_modified_time":"2022-05-03T19:57:08+00:00","og_image":[{"width":300,"height":300,"url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"21 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#primaryimage","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png","width":300,"height":300},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#webpage","url":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591","name":"Create an OpenVPN tunnel on the DD-WRT without using precious nvram","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#primaryimage"},"datePublished":"2012-09-07T17:12:37+00:00","dateModified":"2022-05-03T19:57:08+00:00","description":"Uses the OpenVPN implementation as included in the DD-WRT router firmware. This VPN can traverse network address translators (NAT) and firewalls.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coert.vonk.one\/category\/sw"},{"@type":"ListItem","position":3,"name":"Networking (IP)","item":"https:\/\/coert.vonk.one\/category\/sw\/networking"},{"@type":"ListItem","position":4,"name":"DD-WRT and OpenVPN (without nvram footprint)"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"DD-WRT and OpenVPN (without nvram footprint)","datePublished":"2012-09-07T17:12:37+00:00","dateModified":"2022-05-03T19:57:08+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#webpage"},"wordCount":4266,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/sw\/networking\/dd-wrt-and-openvpn-5591#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/networking-ddwrt-and-openvpn.png","keywords":["DD-WRT","network","openvpn","route","router","tcp-ip","tunnel"],"articleSection":["Networking (IP)"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"https:\/\/coert.vonk.one\/author\/cvonk"}]}},"_links":{"self":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/5591"}],"collection":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/comments?post=5591"}],"version-history":[{"count":5,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/5591\/revisions"}],"predecessor-version":[{"id":32840,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/5591\/revisions\/32840"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media\/6644"}],"wp:attachment":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media?parent=5591"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/categories?post=5591"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/tags?post=5591"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}