{"id":15932,"date":"2016-10-13T09:30:21","date_gmt":"2016-10-13T16:30:21","guid":{"rendered":"http:\/\/www.coertvonk.com\/?p=15932"},"modified":"2022-04-19T08:52:57","modified_gmt":"2022-04-19T15:52:57","slug":"quartus-cycloneiv-de0nano","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932","title":{"rendered":"Starting with Altera"},"content":{"rendered":"<p>\n    A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.\n<\/p>\n<p>A (relatively) short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Terasic Altera Cyclone IV DE0-Nano<\/a> under Windows 10.  An <a href=\"\/hw\/logic\/ise-spartan6-lx9-12604\">equivalent tutorial<\/a> is available for the reader who prefers Xilinx based boards.<\/p>\n<h2>Install the FPGA Design Suite<\/h2>\n<p>Start by installing the free Quartus Prime Lite, this includes the IDE and required tool chain to create configuration files for the Altera FPGA.<\/p>\n<ol>\n<li>Install Quartus Prime Lite 21.1 (>16.1)\n<ul>\n<li>Download the Quartus Prime Lite Edition from <a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/collections\/products\/fpga\/software\/downloads.html?edition=lite&#038;s=Newest\">altera.com<\/a><\/li>\n<li>Unpack <code>Quartus-lite-21.1.0.842-windows.tar<\/code>; run the <code>setup.bat<\/code> and install to a path without spaces in the name (e.g. <code>C:\\intelFPGA_lite\\21.1<\/code>)<\/li>\n<li>Include device support for <em>Cyclone IV<\/em> and<em> Questa &#8211; Intel FPGA Starter Edition (was: ModelSim-Altera Starter Edition).<\/em><\/li>\n<li>Select <em>USB Blaster II driver (JTAG)<\/em> installation<\/li>\n<li>Run the Quartus Prime software\n    <\/ul>\n<\/li>\n<li>Run the Quartus Prime 21.1 Device Installer\n<ul>\n<li>install <em>Cyclone IV<\/em> and <em>ModelSim-Altera Starter<\/em> support<\/li>\n<\/ul>\n<\/li>\n<\/ol>\n<p>The USB Blaster driver needs some finishing up<\/p>\n<ol>\n<li>Use a USB cable to connect your computer to the NE0-Nano board<\/li>\n<li>Go in Window&#8217;s Device Manager\n<ul>\n<li>Right-click <em>Other devices \u00bb USB-Blaster \u00bb Update Driver Software<\/em><\/li>\n<li>Browse my computer for driver software at <code>C:\\intelFPGA_lite\\21.1<br \/>\n      <\/code><\/li>\n<\/ul>\n<\/li>\n<\/ol>\n<h2>Install Board Support for DE0-Nano<\/h2>\n<p>The Terasic board support for DE0-Nano includes examples, user manual and the Terasic System Builder tool.<\/p>\n<ul>\n<li>Download DE0-Nano CD-ROM from <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;CategoryNo=165&#038;No=593&#038;PartNo=4\">terasic.com.tw<\/a> and unzip to a directory of your liking (e.g. <code>C:\\intelFPGA_lite\\DE0-Nano<\/code>)<\/li>\n<\/ul>\n<p>Note that its Control Panel fails with <em>Load DLL (TERASIC_JTAG_DRIVE.dll)<\/em> under 64-bit Windows.  No biggie, we do not need it.<\/p>\n<h2 id=\"beforeyoustart\">Before you start<\/h2>\n<blockquote><p>The simulator doesn&#8217;t play well with UNC paths (e.g. network shares). It triggers numerous errors and may cause timing simulations to disregard delays. Keeping the files on the server is fine, for as long as you access them through a symbolic link.  To create a symbolic link, change to your home directory and create a symbolic link to your file server (in an elevated Power-Shell window do <code>cd ~ ; New-Item -ItemType SymbolicLink -Path \"Hardware.sym\" -Target \"\\\\server\\path\\to\\files\"<\/code>).<\/p><\/blockquote>\n<p>If you add the symbolic link to Explorer&#8217;s <em>Quick Access<\/em>, it will resolve the link first.  To work around this, first create a regular directory and add that to the Quick Access. Then replace that directory with the symbolic link.<\/p>\n<p>A few last tip before you take off:<\/p>\n<p style=\"padding-left: 30px;\">Stay clear of absolute path names.  Not only do they cause havoc when moving a project to a new directory, but they also confuse the simulator.  If the ellipsis (<code>\u2026<\/code>) file selector returns an absolute path, simply edit it to make the file relative to the project directory.  E.g. change <code>\\C:\\Users\\you\\path\\project.v<\/code> to <code>project.v<\/code>.  If you want to quickly change all absolute paths, I suggest closing Quartus and pulling <code>.qsf<\/code> into an text editor (e.g. <code>emacs<\/code>).<\/p>\n<p style=\"padding-left: 30px;\">Lastly, store the files on a local drive.  It makes the process of compiling much faster.<\/p>\n<h2>Build a circuit<\/h2>\n<p>Terasic advises to start with their System Builder to reduce the risk of damaging the board by incorrect I\/O settings.  I will throw this caution to the wind and use an example Quartus Setting file instead<\/p>\n<p>Start Quartus Prime and create a new project<\/p>\n<ul>\n<li>File \u00bb New <span style=\"text-decoration: underline;\">Project Wizard<\/span>\n<ul>\n<li>Choose a working directory (.<code>c:\\users\\you\\whatever\\example1<\/code>); project name = <code>example1<\/code><\/li>\n<li>Project type = Empty Project<\/li>\n<li>do not add files<\/li>\n<li>Family = <code>Cyclone IV E<\/code>; name filter = <code>EP4CE22F17C6<\/code>; click the only device that matches<\/li>\n<li>Finish, accepting the default EDA Tools Settings<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Start with a Verilog HDL module that tests if inputs are equal (File \u00bb New \u00bb Design file > Verilog HDL, and later save it as <code>eq1.v<\/code>)<\/p>\n<pre class=\"brush: verilog; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">`timescale 1ns \/ 1ps\r\nmodule eq1( input i0, input i1, output eq ); \r\n    wire p0, p1; \/\/ internal signal declaration\r\n    assign eq = p0 | p1; \r\n    assign p0 = ~i0 & ~i1;\r\n    assign p1 = i0 & i1; \r\nendmodule<\/pre>\n<p>Add a Verilog HDL module (File \u00bb New \u00bb Design file > Verilog HDL, and later save it as <code>eq2.v<\/code>)<\/p>\n<pre class=\"brush: verilog; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">`timescale 1ns \/ 1ps\r\nmodule eq2( input [1:0] a, input [1:0] b, output aeqb ); \r\n    wire e0, e1; \/\/ internal signal declaration\r\n    eq1 eq_bit0_unit(.i0(a[0]), .i1(b[0]), .eq(e0));\r\n    eq1 eq_bit1_unit(.i0(a[1]), .i1(b[1]), .eq(e1));\r\n    assign aeqb = e0 & e1; \/\/ a and b are equal if individual bits are equal\r\nendmodule<\/pre>\n<p>For the top level, we will use a schematic.  Create a symbol file (<code>eq2.sym<\/code>) for the <code>eq2<\/code> module so we can reference it in the schematic.<\/p>\n<ul>\n<li>File \u00bb Create\/Update \u00bb Create Symbol Files for Current File<\/li>\n<\/ul>\n<p>Create the top level schematic<\/p>\n<ul>\n<li>File \u00bb New \u00bb Design file \u00bb Block Diagram\/Schematic<\/li>\n<li>File \u00bb Save as \u00bb <code>example1.bdf<\/code><\/li>\n<li>Make sure that this top-level module has the same name as its source file and is the same name as your project name.<\/li>\n<li>Update the block diagram (<code>.bdf<\/code>)\n<ul>\n<li>select the block diagram tab<\/li>\n<li>place the new symbol\n<ul>\n<li>double-click the canvas<\/li>\n<li>expand the project directory and select the <code>eq2.sym<\/code> file that we just created<\/li>\n<li>place the symbol in the block diagram<\/li>\n<\/ul>\n<\/li>\n<li>add inputs\n<ul>\n<li>double-click the canvas<\/li>\n<li>expand the libraries directory and select &#8220;primitive \u00bb pin \u00bb input&#8221;<\/li>\n<li>place the pin so that it touches input <code>a<\/code><\/li>\n<li>change the pin name to <code>SWITCH[1..0]<\/code><\/li>\n<li>copy and paste the input pin, and place it so that it touches input <code>b<\/code><\/li>\n<li>change the pin name to <code>SWITCH[3..2]<\/code><\/li>\n<\/ul>\n<\/li>\n<li>add output\n<ul>\n<li>double-click the canvas<\/li>\n<li>expand the libraries directory and select &#8220;primitive \u00bb pin \u00bb output&#8221;<\/li>\n<li>place it so it touches output <code>aeqb<\/code> (a equals b)<\/li>\n<li>change the pin name to <code>LED[0]<\/code><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<li>Last, but not least: Mark this file as the top-level module\n<ul>\n<li>Right-click the file name, and select &#8220;Set as Top-Level Entry&#8221;<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Compile<\/p>\n<ul>\n<li>Processing \u00bb Start \u00bb Start Analysis &#038; Elaboration<\/li>\n<\/ul>\n<h2>Implementation Constraints<\/h2>\n<p>Time to constrain the implementation by specifying the input and output pins along with timing requirements.<\/p>\n<h3>External pins assignments<\/h3>\n<ul>\n<li>Assignments \u00bb Pin Planner\n<ul>\n<li>This will show the five I\/O pins<\/li>\n<li>Don&#8217;t worry about the Fitter Location, it is just whatever the fitter chose last time<\/li>\n<li>Double-click the Location field next each of the pin names to add the pin numbers (based on Table 3-2 and 3-3 in the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;CategoryNo=139&#038;No=593&#038;PartNo=4\">Terasic board&#8217;s user manual<\/a>)<br \/>\n\t<code>  LED[0]     PIN_A15<\/code><br \/>\n\t<code>  SWITCH[3]  PIN_M15<\/code><br \/>\n\t<code>  SWITCH[2]  PIN_B9<\/code><br \/>\n\t<code>  SWITCH[1]  PIN_T8<\/code><br \/>\n\t<code>  SWITCH[0]  PIN_M1<\/code><\/li>\n<li>Change the I\/O standard to <code>3.3V_LVTTL<\/code> based on the same user manual (change the first one, then copy and paste)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>You should end up with something like<\/p>\n<div class=\"align-center\">\n<figure><a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/altera-intro-pins.png\"><img  title=\"\" class=\"aligncenter size-full wp-image-16299\" src=\"\/wp-content\/uploads\/altera-intro-pins.png\" alt=\"altera-intro-pins\" width=\"1031\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins.png 1031w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-400x47.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-768x90.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-1024x120.png 1024w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-250x29.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-300x35.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-350x41.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-500x59.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/altera-intro-pins-750x88.png 750w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><figcaption>Pin assignments<\/figcaption><\/figure>\n<\/div>\n<p>If you plan to branch out, I suggest downloading and importing the settings file (<code>.qsf<\/code>) with pin assignments from <a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/developer\/articles\/technical\/fpga-academic-boards.html#de0-nano\">university.altera.com<\/a>.<\/p>\n<h3>Timing requirements<\/h3>\n<p>For most design you will want to specify timing requirements.  For our simple example however we will not do this.<\/p>\n<p>For the record, to request specific timing requirements (default time quest) you would create Synopsys Design Constraints (File \u00bb New SCD File) and save it with the same base name as the top level file (e.g. <code>example1.sdc<\/code>).  For our example it just contains some comments as a reminder.<\/p>\n<pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">#create_clock -period 20.000 -name CLOCK_50\r\n#derive_pll_clocks\r\n#derive_clock_uncertainty<\/pre>\n<p style=\"text-align: right;\">For more info, refer to Altera&#8217;s class <a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/support\/programmable\/support-resources\/overview.html\">Constraining Source Synchronous Interfaces<\/a>.<\/p>\n<h2>Synthesize and upload to FPGA<\/h2>\n<p>Before moving ahead, I like to shorten the path names in the Quartus Settings file (<code>.qsf<\/code>).  This prevents problems when you move the project and especially when you have it stored on a file server.  As we will see later, the ModelSim simulator doesn&#8217;t support UNC path names, but will honor relative paths even when the projects is on a file server.<\/p>\n<ul>\n<li>Assignments \u00bb Settings\n<ul>\n<li>Remove the files (<code>.bdf, .v, .sdc<\/code>)<\/li>\n<li>Add the files back in.  After selecting each file using the ellipsis (<em>\u2026<\/em>) file selector, edit the resulting path name to exclude the path and press <em>Add<\/em>.<\/li>\n<\/ul>\n<\/li>\n<li>Project Navigator\n<ul>\n<li>Right-click <code>example1.v<\/code> and choose <em>Set as Top-Level Entry<\/em><\/li>\n<\/ul>\n<\/li>\n<li>Alternatively, you can close Quartus and pull the <code>.qsf<\/code> file in a text editor (e.g. Emacs) and shorten the path names (<code>*_FILE<\/code>) at the end of the file.<\/li>\n<\/ul>\n<p>Let us move ahead and generate the binary SRAM Object File (<code>.sof<\/code>).  This is the configuration file to be uploaded to the FPGA<\/p>\n<ul>\n<li>Click <em>Compile Design<\/em> in the <em>Tasks<\/em> window, or press the <em>Play<\/em> button in the toolbar.\n<ul>\n<li>The Compilation Report tab shows the result<\/li>\n<li>Correct any critical warnings or errors<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>This would be <em>the<\/em> moment to do a timing analysis and\/or simulation.  However, at this point I&#8217;m simply too curious to see if it works just out of the box, so let&#8217;s give it a shot.<\/p>\n<p>Connect the DE0-Nano board with a USB cable and upload the configuration file to the FPGA SRAM. (Alternately <a href=\"https:\/\/unboxnbeyond.wordpress.com\/2013\/05\/11\/configuring-de0-nano-epcs64-flash-device\/\">upload to Flash<\/a>)<\/p>\n<ul>\n<li>Quartus Prime Lite \u00bb Tools \u00bb Programmer (or double-click Program Device in the task list)\n<ul>\n<li>Click Hardware Setup, and select <em>USB-Blaster [USB-0]<\/em><\/li>\n<li>Click Add File, and select your SRAM object file (<code>.sof<\/code>) in the <code>output_files<\/code> directory<\/li>\n<li>Click Start<\/li>\n<li>Save as <code>example1.cdf<\/code>, so it opens with these settings next time<\/li>\n<li>Great!  We did it, the design is now on the FPGA (until we remove the power)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2>Give it a spin<\/h2>\n<p>With the FPGA configured, time has come to test it<\/p>\n<ul>\n<li>Input is through the DIP switches (<code>SWITCH<\/code>) on the bottom-left of the board.<\/li>\n<li>Output is the right LED (<code>LED[0]<\/code>) located at the top of the board.<\/li>\n<li>We expect the LED to be &#8220;on&#8221; when switch positions <code>0<\/code> and <code>1<\/code> are identical to positions <code>2<\/code> and <code>3<\/code>.<\/li>\n<\/ul>\n<p>If you prefer bigger switches, you can wire up a breadboard to the GPIO-0 connector.<\/p>\n<ul>\n<li>V<sub>CC<\/sub>3p3 and Ground are available on the 40-pin expansion header at respectively pin 29 and 12 (or 30) as specified in the board manual.<\/li>\n<li><code><img loading=\"lazy\" class=\"alignright wp-image-16304 \" src=\"\/wp-content\/uploads\/welldone.jpg\" alt=\"welldone\" width=\"108\" height=\"130\">GPIO_00, 01, 02, 03<\/code> are on FPGA BGA pins at respectively <code>D3, C3, A2, A3<\/code> and on the 40-pin expansion header at respectively pin <code>2, 4, 5<\/code> and <code>6<\/code>.<\/li>\n<li>Modify the user constraints file accordingly.<\/li>\n<\/ul>\n<p>Give yourself a pat on the back; you have achieved something new today!<\/p>\n<h2>Timing Analysis<\/h2>\n<p>With the first hurdle cleared, we are going to take a closer look at the circuit. The first step will analyze the delays in the circuit to determine the conditions under which the circuit operates reliably.  We will follow up with a functional and timing simulation.<\/p>\n<p>If you just want to the timing information on the port-to-port path, you can use<\/p>\n<ul>\n<li>Task \u00bb Reports \u00bb Custom Reports \u00bb Report Timing\n<ul>\n<li>From \u00bb click <code>...<\/code>\n<ul>\n<li>Collection = <code>get_ports<\/code>; List; select <code>SWITCH[0]<\/code> through <code>SWITCH[3]<\/code>; click &#8216;<code>><\/code>&#8216;<\/li>\n<\/ul>\n<\/li>\n<li>To \u00bb click <code>...<\/code>\n<ul>\n<li>Collection = <code>get_ports<\/code>; List; select <code>LED[0]<\/code>; click &#8216;<code>><\/code>&#8216;<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>To place timing constraints on the port-to-port paths:<\/p>\n<ul>\n<li>Tools \u00bb TimeQuest Timing Analyzer\n<ul>\n<li>Tasks \u00bb Update Timing Netlist ; double-click\n<ul>\n<li>Constraints \u00bb Set Maximum Delay<\/li>\n<li>From \u00bb click <code>...<\/code>\n<ul>\n<li>Collection = <code>get_ports<\/code>; List; select <code>SWITCH[0]<\/code> through <code>SWITCH[3]<\/code>; click &#8216;<code>><\/code>&#8216;<\/li>\n<\/ul>\n<\/li>\n<li>To \u00bb click <code>...<\/code>\n<ul>\n<li>Collection = <code>get_ports<\/code>; List; select <code>LED[0]<\/code>; click &#8216;<code>><\/code>&#8216;<\/li>\n<\/ul>\n<\/li>\n<li>Delay value = 100 ns (more or less random value)<\/li>\n<li>Run<\/li>\n<\/ul>\n<\/li>\n<li>Constraints \u00bb Write SDC File to <code>example1.sdc<\/code><\/li>\n<li>Task \u00bb Reports \u00bb Custom Reports \u00bb Report Timing\n<ul>\n<li>no need to specify the path, just click <code>Report Timing<\/code><\/li>\n<li>this reveals a Data Delay of about 6.7 ns.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>If you want Quartus to meet more stringent restrains, you need to specify these and recompile.  This will direct Quartus to seek an implementation that meets these constraints.  However, in this case we only specified restraints because we&#8217;re interested in the values.  [<a href=\"https:\/\/community.intel.com\/t5\/FPGA-Wiki\/The-board-support-package-of-Cyclone-V-GT-Development-Kit\/ta-p\/735548\">TimeQuest User Guide<\/a>]<\/p>\n<h2>Functional Simulation<\/h2>\n<p><img loading=\"lazy\" class=\"alignright wp-image-16344\" src=\"\/wp-content\/uploads\/functional.png\" alt=\"functional\" width=\"69\" height=\"69\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/functional.png 128w, https:\/\/coertvonk.com\/wp-content\/uploads\/functional-100x100.png 100w\" sizes=\"(max-width: 69px) 100vw, 69px\" \/>The Verilog HDL (<code>.v<\/code>) instructions are compiled (Analysis and Synthesis) into Register Transfer Logic (RTL) netlists, called Compiler Database Files (<code>.cdb<\/code>). As the name implies, data is moved through gates and register, typically subject to some clocking condition.  A functional simulation tests the circuit at this RTL level.  As such it will simulate the functionality, but not the propagation delays.<\/p>\n<p>Altera Quartus ships bundled with their flavor of ModelSim that lets you draw waveforms for the signals going to the module under test.  You can then save these waveforms as a wave.do file or HDL test bench.  For this example we to skip the step of drawing waveforms, and jump straight to using test benches.<\/p>\n<p>Start by creating a test bench (<code>eq2_tb.v<\/code>) that instantiate module under test and drive its inputs.  As before, you should remove the path from the file name (Assignments \u00bb Settings \u00bb Files).<\/p>\n<pre class=\"brush: verilog; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">`timescale 1ns \/ 100ps\r\n`default_nettype none\r\n\r\nmodule eq2_tb;\r\n  reg [1:0] a;  \/\/ inputs\r\n  reg [1:0] b; \r\n  wire aeqb;  \/\/ output\r\n \r\n  \/\/ Instantiate the Device Under Test (UUT)\r\n  eq2 dut ( .a(a), \r\n            .b(b), \r\n            .aeqb(aeqb) );\r\n  initial begin\r\n    a = 0;  \/\/ initialize inputs\r\n    b = 0;\r\n \r\n    #100;  \/\/ wait 100 ns for global reset to finish (Xilinx only?)\r\n         \r\n    \/\/ stimulus starts here\r\n    a = 2'b00; b = 2'b00; #10 $display(\"%b\", aeqb);\r\n    a = 2'b01; b = 2'b00; #10 $display(\"%b\", aeqb);\r\n    a = 2'b01; b = 2'b11; #10 $display(\"%b\", aeqb);\r\n    a = 2'b10; b = 2'b10; #10 $display(\"%b\", aeqb);\r\n    a = 2'b10; b = 2'b00; #10 $display(\"%b\", aeqb);\r\n    a = 2'b11; b = 2'b11; #10 $display(\"%b\", aeqb);\r\n    a = 2'b11; b = 2'b01; #10 $display(\"%b\", aeqb);\r\n    #200 $stop;\r\n   end\r\nendmodule<\/pre>\n<p>Configure Quartus to create a script that compiles the test bench and modules for ModelSim<\/p>\n<ul>\n<li>Assignments \u00bb Settings \u00bb EDA Tool Settings \u00bb Simulation \u00bb Compile test bench\n<ul>\n<li>New<\/li>\n<li>Test bench name = <code>Functional test bench<\/code><\/li>\n<li>Top level module in test bench = <code>eq2_tb<\/code><\/li>\n<li>File name  = <code>eq2_tb.v, eq1.v, eq2.v<\/code> (name the test bench and all the modules that ModelSim needs to compile). After selecting each file using the ellipsis (<em>\u2026<\/em>) file selector, edit the resulting path name to exclude the project path, then press <em>Add.<\/em><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>If things don&#8217;t go your way, please check:<\/p>\n<ul>\n<li>I strongly suggest putting the test bench in a separate file, when doing timing simulations.  This keeps ModelSim from using the <code>.v<\/code> file instead of the <code>.vo<\/code> file what causes propagation delays not to show in timing simulations.<\/li>\n<li>(sdfcomp-7)<em> Failed to open SDF file &#8220;whatever.sdo&#8221; in read mode<\/em> is most likely caused by the files residing on a UNC path. Refer to the quote at the <a href=\"\/hw\/logic\/quartus-cycloneiv-de0nano-15932#beforeyoustart\">beginning of this article<\/a>.<\/li>\n<li><em>(sdfcomp-14) Failed to open &#8220;modelsim.ini&#8221; specified by the MODELSIM environment variable<\/em> is also most likely caused by the files residing on a UNC path. Refer to the quote at the <a href=\"\/hw\/logic\/quartus-cycloneiv-de0nano-15932#beforeyoustart\">beginning of this article<\/a>.<\/li>\n<li>When you get <em>error deleting &#8220;msim_transcript&#8221; permission denied<\/em>, close ModelSim first before starting it.<\/li>\n<li>Errors like <em>Instantiation of &#8216;cycloneive_io_obuf&#8217; failed. The design unit was not found <\/em>indicate that the global libraries <code>altera_ver<\/code> or<code> cycloneive_ver<\/code> were not included in Assignments \u00bb Settings \u00bb Libraries.<\/li>\n<li>Keep in mind that the <a href=\"https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/fileio\/naming-a-file\">Windows filename limit<\/a> (260) may be exceeded.<\/li>\n<li>To prevent <em>Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf<\/em>, quit ModelSim and delete <code>simulation\/modelsim\/sim.wlf<\/code> and <code>simulation\/modelsim\/wlft*<\/code>.<\/li>\n<\/ul>\n<p>Compile the circuit to RTL netlists<\/p>\n<ul>\n<li>Processing \u00bb Start \u00bb Start Analysis &#038; Elaboration<\/li>\n<\/ul>\n<p>Start the simulation<\/p>\n<ul>\n<li>Tools \u00bb Simulation Tool \u00bb RTL Simulation<\/li>\n<li>Select signals of interest\n<ul>\n<li>Objects \u00bb select the signals of interest \u00bb Add Wave (or the green circle with the + sign)<\/li>\n<li>In the text field in the toolbar, change the simulation time from <code>1 ps<\/code> to <code>200 ns<\/code> and click the <em>run<\/em> button to the right (or type <code>run 1 us <\/code>at the command prompt)<\/li>\n<li>Undock the Wave Window (icon on the far top right of the window).  In case the Wave Window is hidden, use Windows \u00bb Wave.<\/li>\n<li>Click &#8220;zoom full&#8221; and observe the simulated waveforms.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>You should see something like<\/p>\n<div class=\"align-center\">\n<figure><a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/snip.png\"><img class=\"size-full wp-image-16337\" src=\"\/wp-content\/uploads\/snip.png\" alt=\"own work\" width=\"851\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/snip.png 851w, https:\/\/coertvonk.com\/wp-content\/uploads\/snip-400x56.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/snip-768x108.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/snip-250x35.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/snip-300x42.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/snip-350x49.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/snip-500x71.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/snip-750x106.png 750w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><figcaption>Snip<\/figcaption><\/figure>\n<\/div>\n<p>If you make a change to either your DUT or your test bench<\/p>\n<ul>\n<li>right-click the test bench and select <code>recompile<\/code>.<\/li>\n<li>make sure that you click the Restart button directly to the right of the simulation time window (or simply type <code>restart<\/code> at the command prompt).<\/li>\n<\/ul>\n<p style=\"text-align: right;\">For more information, refer to  <a href=\"https:\/\/www.intel.com\/content\/dam\/www\/programmable\/us\/en\/pdfs\/literature\/hb\/qts\/qts_qii5v3.pdf\">Quartus II Handbook 3: Verification<\/a><\/p>\n<h2>Timing Simulation<\/h2>\n<p><img loading=\"lazy\" class=\"alignright wp-image-16343\" src=\"\/wp-content\/uploads\/timing.png\" alt=\"timing\" width=\"65\" height=\"65\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/timing.png 121w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-100x100.png 100w\" sizes=\"(max-width: 65px) 100vw, 65px\" \/>Before you start a timing simulation, first close ModelSim.<\/p>\n<p>After compiling your circuit into RTL netlists (<code>.cdb<\/code>), it is fitted to the physical device (<code>.qsf<\/code>) trying to satisfy resource assignments and constraints.  It then attempts to optimize the remaining logic.  The Netlist Writer can export this information for ModelSim in the form of Verilog Output Files (.vo), Standard Delay Format Output Files (<code>.sdo<\/code>) and scripts to prepare ModelSim through compilation and initialization.<\/p>\n<p>For this exercise, we will do a timing simulation for the whole system.  With our top-level entry being a schematic (<code>.bdf<\/code>), we first need to convert this to Verilog HDL<\/p>\n<ul>\n<li>Open the schematic<\/li>\n<li>File \u00bb Create\/Update \u00bb Create HDL Design File from Current File\n<ul>\n<li>File type = <code>Verilog HDL<\/code><\/li>\n<\/ul>\n<\/li>\n<li>Assignments \u00bb Settings \u00bb Files\n<ul>\n<li>replace the <code>example1.bdf<\/code> file with <code>example1.v<\/code><\/li>\n<\/ul>\n<\/li>\n<li>Make it the top-level module (so much for using a schematic &#8230; eh)<\/li>\n<\/ul>\n<p>Create a system test bench (<code>example1_tb.v<\/code>). As before, you should remove the path from the file name (Assignments \u00bb Settings \u00bb Files).<\/p>\n<pre class=\"brush: verilog; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">`timescale 1ns \/ 100ps\r\n`default_nettype none\r\n\r\nmodule example1_tb;\r\n  reg [3:0] SWITCH;  \/\/ inputs\r\n  wire LED;          \/\/ output\r\n \r\n  example1 uut ( .SWITCH(SWITCH), \r\n                 .LED(LED) );\r\n  initial begin\r\n    SWITCH[3:0] = 2'b0000; \/\/ initialize inputs\r\n \r\n    #100;  \/\/ wait 100 ns for global reset to finish (Xlinx only?)\r\n         \r\n    \/\/ stimulus starts here\r\n    SWITCH[1:0] = 2'b00; SWITCH[3:2] = 2'b00; #10 $display(\"%b\", LED);\r\n    SWITCH[1:0] = 2'b01; SWITCH[3:2] = 2'b00; #10 $display(\"%b\", LED);\r\n    SWITCH[1:0] = 2'b01; SWITCH[3:2] = 2'b11; #10 $display(\"%b\", LED);\r\n    SWITCH[1:0] = 2'b10; SWITCH[3:2] = 2'b10; #10 $display(\"%b\", LED);\r\n    SWITCH[1:0] = 2'b10; SWITCH[3:2] = 2'b00; #10 $display(\"%b\", LED);\r\n    SWITCH[1:0] = 2'b11; SWITCH[3:2] = 2'b11; #10 $display(\"%b\", LED);\r\n    SWITCH[1:0] = 2'b11; SWITCH[3:2] = 2'b01; #10 $display(\"%b\", LED);\r\n    #200 $stop;\r\n  end\r\nendmodule<\/pre>\n<p>Create the verilog output files<\/p>\n<ul>\n<li>Processing \u00bb Start \u00bb Start EDA Netlist Writer<\/li>\n<\/ul>\n<p>Configure Quartus to create a script that compiles the test bench and modules for ModelSim<\/p>\n<ul>\n<li>Assignments \u00bb Settings \u00bb Libraries \u00bb Global\n<ul>\n<li>Add\n<ul>\n<li><code>altera_ver<\/code><\/li>\n<li><code>cycloneive_ver<\/code><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<li>Assignments \u00bb Settings \u00bb EDA Tool Settings \u00bb Simulation\n<ul>\n<li>Compile test bench\n<ul>\n<li>Delete the old <code>Functional test bench<\/code><\/li>\n<li>New<\/li>\n<li>Test bench name = <code>Timing test bench<\/code><\/li>\n<li>Top-level module in test bench = <code>example1_tb<\/code><\/li>\n<li>Add the files listed below.  After selecting each file using the ellipsis (<em>\u2026<\/em>) file selector, edit the resulting path name to exclude the project path, then press <em>Add<\/em>.\n<ul>\n<li><code>example_tb.v<\/code><\/li>\n<li><code><strong>simulation\/modelsim\/<\/strong>example1.v<strong>o<\/strong><\/code>\n<ul>\n<li>it appears that <code>eq2<\/code> and <code>eq1<\/code> were included inside <code>simulation\/modelsim\/example1.vo<\/code>. If you have larger modules, make sure you include al the <code>.vo<\/code> files here.<\/li>\n<\/ul>\n<\/li>\n<li>if the <code>simulation\/modelsim<\/code> directory doesn&#8217;t exist: recompile, and then add the <code>.vo<\/code> module.<\/li>\n<\/ul>\n<\/li>\n<li>If things don&#8217;t go your way, refer to the section &#8220;Some hints ..&#8221; under &#8220;Test bench for functional simulation&#8221;.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Start a full synthesis for the circuit<\/p>\n<ul>\n<li>Processing \u00bb Start \u00bb Start Compilation<\/li>\n<\/ul>\n<p>Start ModelSim<\/p>\n<ul>\n<li>Tools \u00bb Simulation Tool \u00bb Gate Level Simulation\n<ul>\n<li>Timing model = <code>Slow -6 1.2V 85 Model<\/code> (default), this simulates a slow -6 speed grade model at 1.2 V and 85 \u00b0C.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Select the signals<\/p>\n<ul>\n<li>Objects \u00bb select the signals of interest \u00bb Add Wave<\/li>\n<li>Increase simulation time to <code>1 \u00b5s<\/code> and click the run button on the right<\/li>\n<li>Undock the Wave Window (so you can expand it)<\/li>\n<li>Click &#8220;zoom full&#8221; and observe the simulated waveforms.  You should see something like<\/li>\n<\/ul>\n<p>Expect something like<\/p>\n<div class=\"align-center\">\n<figure><a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/timing-1.png\"><img class=\"size-full wp-image-16355\" src=\"\/wp-content\/uploads\/timing-1.png\" alt=\"own work\" width=\"1287\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1.png 1287w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-400x73.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-768x141.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-1024x188.png 1024w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-250x46.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-300x55.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-350x64.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-500x92.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/timing-1-750x138.png 750w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><figcaption>Timing<\/figcaption><\/figure>\n<\/div>\n<p>For more hands on experience, refer to Altera&#8217;s excellent <a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/developer\/topic-technology\/fpga-academic\/materials.html\">University Program<\/a> lessons, or the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;CategoryNo=165&#038;No=593&#038;PartNo=4\">Terasic<\/a> CD-ROM files  (<code>C:\\altera_lite\\DE0-Nano<\/code>) for examples and documentation.  Altera also has a more generic <a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/programmable\/customertraining\/webex\/Become_FPGA_Designer\/presentation.html\">Become a FPGA Designer<\/a> video-based class.<\/p>\n<p>Our first implementation is the SPI interface <a href=\"https:\/\/coertvonk.com\/hw\/math-talk\/introduction-13067\">Math Talk<\/a>.  This is then used to build a demonstration of math operations in FPGA as eluded to from the inquiry <a href=\"https:\/\/coertvonk.com\/inquiries\/computer-math\/electrical-circuits-4245\">How do Computer do Math?<\/a>.<\/p>\n<p><em>c&#8217;est tout<\/em><\/p>\n","protected":false},"excerpt":{"rendered":"<p>A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.<\/p>\n","protected":false},"author":41,"featured_media":16110,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[303],"tags":[355,358,211,104,356,357],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Getting started with Altera Prime - Coert Vonk<\/title>\n<meta name=\"description\" content=\"A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Getting started with Altera Prime - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2016-10-13T16:30:21+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-19T15:52:57+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"200\" \/>\n\t<meta property=\"og:image:height\" content=\"200\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"16 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"http:\/\/coertvonk.com\/#website\",\"url\":\"http:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"http:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg\",\"width\":200,\"height\":200},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#webpage\",\"url\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932\",\"name\":\"Getting started with Altera Prime - Coert Vonk\",\"isPartOf\":{\"@id\":\"http:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#primaryimage\"},\"datePublished\":\"2016-10-13T16:30:21+00:00\",\"dateModified\":\"2022-04-19T15:52:57+00:00\",\"description\":\"A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Logic (Verilog)\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\/logic\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Starting with Altera\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#webpage\"},\"author\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Starting with Altera\",\"datePublished\":\"2016-10-13T16:30:21+00:00\",\"dateModified\":\"2022-04-19T15:52:57+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#webpage\"},\"wordCount\":2959,\"commentCount\":2,\"publisher\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg\",\"keywords\":[\"altera\",\"deo-nano\",\"fpga\",\"Johan Vonk\",\"quartus\",\"quartus prime\"],\"articleSection\":[\"Logic (Verilog)\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"http:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"http:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"http:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Getting started with Altera Prime - Coert Vonk","description":"A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932","og_locale":"en_US","og_type":"article","og_title":"Getting started with Altera Prime - Coert Vonk","og_description":"A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.","og_url":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932","og_site_name":"Coert Vonk","article_published_time":"2016-10-13T16:30:21+00:00","article_modified_time":"2022-04-19T15:52:57+00:00","og_image":[{"width":200,"height":200,"url":"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg","type":"image\/jpeg"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"16 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"http:\/\/coertvonk.com\/#website","url":"http:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"http:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg","width":200,"height":200},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#webpage","url":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932","name":"Getting started with Altera Prime - Coert Vonk","isPartOf":{"@id":"http:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#primaryimage"},"datePublished":"2016-10-13T16:30:21+00:00","dateModified":"2022-04-19T15:52:57+00:00","description":"A short introduction to compiling, simulating and uploading using the Altera Quartus development environment for the Cyclone IV on a DE0-Nano board.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coertvonk.com\/category\/hw"},{"@type":"ListItem","position":3,"name":"Logic (Verilog)","item":"https:\/\/coertvonk.com\/category\/hw\/logic"},{"@type":"ListItem","position":4,"name":"Starting with Altera"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#webpage"},"author":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Starting with Altera","datePublished":"2016-10-13T16:30:21+00:00","dateModified":"2022-04-19T15:52:57+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#webpage"},"wordCount":2959,"commentCount":2,"publisher":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/quartus-cycloneiv-de0nano-15932#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/spi-ne0-nano3.jpg","keywords":["altera","deo-nano","fpga","Johan Vonk","quartus","quartus prime"],"articleSection":["Logic (Verilog)"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"http:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"http:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"http:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/15932"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=15932"}],"version-history":[{"count":10,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/15932\/revisions"}],"predecessor-version":[{"id":32385,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/15932\/revisions\/32385"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/16110"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=15932"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=15932"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=15932"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}