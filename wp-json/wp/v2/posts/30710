{"id":30710,"date":"2010-10-07T16:21:27","date_gmt":"2010-10-07T23:21:27","guid":{"rendered":"https:\/\/coertvonk.com\/?p=30710"},"modified":"2022-04-30T17:58:48","modified_gmt":"2022-05-01T00:58:48","slug":"math-operations-using-gates","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710","title":{"rendered":"Math using gates"},"content":{"rendered":"<p>\r\n    In this article, we will build logic circuits that implement math functions. It is part of a quest to answer the question \u201c<a href=\"\/category\/inquiries\/computer-math\">How do computers do math?<\/a>\u201d.  This will section bring us the long awaited grail!\\(\\)\r\n<\/p>\r\n<p>\r\n    In combinational logic, the output is a function of the input values. There are a wide variety of logic gates our disposal to build these functions. Ever since the 80s, the leading logic families are the TTL-based 7400 and the CMOS-based 4000 series.\r\n<\/p>\r\n<p>\r\n    The figure below shows an example of a package with four two-input NAND gates.\r\n\r\n    <div class=\"flex-container tight\">\r\n        <figure>\r\n            <a href=\"\/wp-content\/uploads\/7400-nand.png\"><img  title=\"\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/7400-nand.png\" alt=\"Example 7400 quad dual input NAND\" width=\"220\" class=\"size-full wp-image-3590\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/7400-nand.png 334w, https:\/\/coertvonk.com\/wp-content\/uploads\/7400-nand-250x167.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/7400-nand-300x200.png 300w\" sizes=\"(max-width: 334px) 100vw, 334px\" \/><\/a>\r\n            <figcaption>7400 Quad Dual Input NAND<\/figcaption> \r\n        <\/figure>\r\n        <figure>\r\n            <a href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/7400.jpg\"><img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/7400-400x325.jpg\" alt=\"\" width=\"220\" class=\"alignnone size-medium wp-image-30619\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/7400-400x325.jpg 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/7400.jpg 620w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/a>\r\n            <figcaption>7400 Dual In-Line Package<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Following sections discuss implementations of a multiplexer and some basic math operations.\r\n<\/p>\r\n<h2>\r\n    Multiplexer (<code>mx<\/code>)\r\n<\/h2>\r\n<p>\r\n    Albeit technically not a math function, we will cover the multiplexer because we will be needing it to build  operations.\r\n<\/p>\r\n<p>\r\n    A multiplexer uses a binary value (address) to select between several inputs. The output then assumes the value of <em>that<\/em> input.\r\n<\/p>\r\n<p>\r\n    The table below gives the truth table for a 2-to-1 multiplexer. From this follows the boolean equation that expresses the output <em>z<\/em> as a function of the inputs. The illustration also shows the corresponding circuit, where the circle at the input of the top NAND-gate represents an inverter.\r\n    \r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"logic mx\">\r\n                    <tr>\r\n                        <th><em>os<\/em><\/th>\r\n                        <th><em>a<\/em><\/th>\r\n                        <th class=\"border-right\"><em>b<\/em><\/th>\r\n                        <th><em>z<\/em><\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/multiplexer\/mx-block.html\">\r\n                        <img class=\"aligncenter\" style=\"margin: -20px 0 -10px 0;\" title=\"(c) Copyright 2021 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/multiplexer\/mx-block.svg\" alt=\"\" width=\"200\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"top: 0%; right: 0%;\">\r\n                            Animate\r\n                        <\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        z= \\overline{os} \\cdot a + os \\cdot b\r\n                        \\nonumber\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>\r\n                1-bit full adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n\r\n<\/p>\r\n<p>\r\n    We have now reached the the heart of the question &#8220;How do computers do Math?&#8221;. The first math operation that we will tackle using these gates is: <em>addition<\/em>.\r\n<\/p>\r\n\r\n<h2 id=\"ripplecarryadder\">\r\n    Addition (<code>fa<\/code>)\r\n<\/h2>\r\n<p>\r\n    <a class=\"alignright hide-anchor\" href=\"\/wp-content\/uploads\/math-logo-theory-add.svg\"><img class=\"alignright wp-image-17205\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-theory-add.svg\" alt=\"Addition icon\" width=\"50\" \/><\/a>\r\n\r\n    The <em>full adder<\/em> forms the building block for all n-bit adders. This full adder adds the 1-bit values <em>a<\/em> and <em>b<\/em> to the incoming carry<em> (c<sub>i<\/sub><\/em>), and outputs a 1-bit sum (s) and a 1-bit outgoing carry (<em>c<sub>o<\/sub><\/em>). The carry is similar as when adding decimal numbers \u2014 if you have a carry from one column to the next, then that next column has to include that carry.\r\n<\/p>\r\n<p>\r\n    The truth table, shown below, gives the relation between these inputs and outputs. The Boolean equations and circuit are derived from this table.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"logic fa\">\r\n                    <tr>\r\n                        <th><em>a<\/em><\/th>\r\n                        <th><em>b<\/em><\/th>\r\n                        <th><em>c<sub>i<\/sub><\/em><\/th>\r\n                        <th><em>c<sub>o<\/sub><\/em><\/th>\r\n                        <th><em>s<\/em><\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/adder\/fa-block.html\">\r\n                        <img loading=\"lazy\" class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/adder\/fa-block.svg\" alt=\"\" width=\"204\" height=\"200\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"top: 0%; right: 0%;\">\r\n                            Animate\r\n                        <\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{aligned}\r\n                            s &#038;= a \\oplus b \\oplus c_i\\\\\r\n                            c_o &#038;= a \\cdot b + c_i \\cdot (a \\oplus b)\r\n                        \\end{aligned}\r\n                        \\nonumber\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>\r\n                1-bit full adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Now that we can add 1-bit values, we can move on to n-bit values. The basic <em>carry-propagate adder<\/em> starts by adding the least significant bit and passing  the carry on to each following bit. The <em>s<\/em> outputs are combined to form the sum <em>S<\/em>.\r\n<\/p>\r\n\r\n<h3>\r\n    Expanding\r\n<\/h3>\r\n<p>\r\n    The circuit shown below gives an example of a 4-bit carry-propagate adder. The carry has to propagate from the lowest to the highest bit position. This so-called &#8220;ripple carry&#8221; limits the speed of the circuit.\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/adder\/4-bit carry-propagate.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/adder\/4-bit carry-propagate.svg\" alt=\"\" width=\"420\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"top: 0%; right: 0%;\">Animate<\/button>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>4-bit carry-propagate adder<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The accompanying article &#8220;<a href=\"\/category\/hw\/building-math-circuits\">Building Math Circuits<\/a>&#8221; describes Verilog HDL implementations of this along with a faster algorithms, and a demonstration setup.\r\n<\/p>\r\n\r\n<h2 id=\"rippleborrowsubtractor\">\r\n    Subtraction (<code>fs<\/code>)\r\n<\/h2>\r\n\r\n<p>\r\n    <a class=\"hide-anchor alignright\" href=\"\/wp-content\/uploads\/math-logo-theory-subtract.svg\"><img class=\"alignright wp-image-17206\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-theory-subtract.svg\" alt=\"subtraction icon\" style=\"width: 50px;\"\/><\/a>\r\n    Before we can look at subtraction, we need to be able to represent negative numbers. Referring back to the section on <a href=\"https:\/\/coertvonk.com\/inquiries\/computer-math\/electronic-circuits-30697#digitalsystems\">digital systems<\/a>, the positive decimal value would be represented by the binary value <code>111<\/code> as shown below.\r\n    $$\r\n        \\require{color}\r\n        7 \\equiv\r\n        \\color{red}{1}\\color{black}{\\times 2^2}\\ +\\\r\n        \\color{red}{1}\\color{black}{\\times 2^1}\\ +\\\r\n        \\color{red}{1}\\color{black}{\\times 2^0} = \\mathrm{b}\\color{red}{111}\r\n        \\nonumber\r\n    $$\r\n<\/p>\r\n<p>\r\n    The most common digital representation for negative numbers is called &#8220;two&#8217;s complement&#8221;. It assigns the most significant bit (msb) a negative weight. The other bits have their usual binary weights. The advantage of this system is that the circuits can treat positive and negative numbers the same when doing arithmetic. The 4-bit two&#8217;s complement for decimal value -7 is <code>1001<\/code> is shown below.\r\n    $$\r\n        \\require{color}\r\n        -7 \\equiv\r\n        \\color{red}{1}\\color{black}{\\times (-2^3)}\\ +\\\r\n        \\color{red}{0}\\color{black}{\\times 2^2}\\ +\\\r\n        \\color{red}{0}\\color{black}{\\times 2^1}\\ +\\\r\n        \\color{red}{1}\\color{black}{\\times 2^0} = \\mathrm{b}\\color{red}{1001}\r\n        \\nonumber\r\n    $$\r\n<\/p>\r\n<p>\r\n    Inverting the bits of a binary number and adding 1 makes the number negative. This implies that positive numbers have the value <code>0<\/code> as their most significant bit, and negative numbers have the value <code>1<\/code> as their most-significant bit.\r\n    $$\r\n        \\require{color}\r\n        \\color{red}-\\color{black}7 \\equiv\r\n        \\,^{\\color{red}\\sim}\\mathrm{b}0111\\color{red}\\color{red}{+\\mathrm{b}1}\\color{black} =\\mathrm{b}1000 + \\mathrm{b}0001 = \\mathrm{b}1001\r\n        \\nonumber\r\n    $$\r\n<\/p>\r\n<p>\r\n    This implies that using 8-bits, we can encode the decimal values -128 to 127.\r\n<\/p>\r\n<p>\r\n    Similar to addition, the simplest subtraction method is <em>borrow propagation<\/em>. Again, we will start by building a 1-bit subtractor. The inputs <em>a<\/em> and <em>b<\/em> represent the 1-bit binary numbers being added. Output <em>d<\/em>, the difference. <em>b<sub>i<\/sub><\/em> and <em>b<sub>o<\/sub><\/em> are the incoming and outgoing borrow signals.\r\n<\/p>\r\n<p>\r\n    The truth table shown below gives the relation between the inputs and outputs. The outputs <em>d<\/em> and <em>b<sub>o<\/sub><\/em> can both be expressed as a function of the inputs. The result <em>d<\/em> is an exclusive-or (XOR) function, just as the sum was for addition.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"logic fs\">\r\n                    <tr>\r\n                        <th><em>a<\/em><\/th>\r\n                        <th><em>b<\/em><\/th>\r\n                        <th class=\"border-right\"><em>l<sub>i<\/sub><\/em><\/th>\r\n                        <th><em>l<sub>o<\/sub><\/em><\/th>\r\n                        <th><em>d<\/em><\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/subtractor\/fs-block.html\">\r\n                        <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/subtractor\/fs-block.svg\" alt=\"\" width=\"204\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"bottom: 0%; right: 0%;\">Animate<\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{align*}\r\n                            d&#038;=a \\oplus b \\oplus l_i \\\\\r\n                            l_o&#038;=\\overline{a} \\cdot b + l_i \\cdot (\\overline{a \\oplus b})\r\n                        \\end{align*}\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>1-bit full subtractor<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    To build a 4-bit subtractor we combine four of these building blocks.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <div class=\"circuit-container\"><a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/subtractor\/4-bit borrow-propagate.html\"><img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/subtractor\/4-bit borrow-propagate.svg\" alt=\"\" width=\"453\" \/><button class=\"circuit-animate no-print\" style=\"top: 0%; right: 0%;\">Animate<\/button><\/a><\/div>\r\n            <\/div>\r\n            <figcaption>4-bit borrow-propagate subtractor<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    For a faster approach or a Verilog implementation of the subtractor shown above, refer to <a href=\"\/category\/hw\/building-math-circuits\">Building Math Circuits<\/a>.\r\n<\/p>\r\n\r\n<h2>\r\n    Multiplication (<code>ma<\/code>)\r\n<\/h2>\r\n\r\n<p>\r\n    <a class=\"hide-anchor alignright\" href=\"\/wp-content\/uploads\/math-logo-theory-multiply.svg\"><img class=\"alignright wp-image-17207\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-theory-multiply.svg\" alt=\"multiplication icon\" width=\"50\" \/><\/a>\r\n    Multiplication is another important operation in digital signal processing (e.g. fast Fourier Transfers). It is an excellent example of combining simple logic functions to make a much more complex function. The two methods that allow us to do this called &#8220;array multipliers&#8221;.\r\n<\/p>\r\n<p>\r\n    The array multiplier is a simple technique for implementing multiplication. It resembles the process how you would probably perform a multiplication yourself, aside from the fact that it sums up the partial products as it goes.\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-ripple-example2.png\">\r\n                <img class=\"wp-image-16488\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-example2.png\" alt=\"\" width=\"434\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-example2.png 679w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-example2-400x239.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-example2-250x149.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-example2-300x179.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-example2-350x209.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-example2-500x298.png 500w\" sizes=\"(max-width: 679px) 100vw, 679px\" \/>\r\n            <\/a>\r\n            <figcaption>Example of carry-propagate array multiplier<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Each partial product bit position can be generated by a simple AND gate between corresponding positions of the multiplicand <em>A<\/em> and multiplier <em>B<\/em> bits. Adding the partial products forms the product.\r\n<\/p>\r\n<p>\r\n    The <em>multiplier adder<\/em> (<code>ma<\/code>) shown below, is the basic building block for the multiplier. It uses an AND gate to form the partial product of two binary digits. To calculate the partial sum and carry out signals, it reuses the 1-bit full adders described earlier. The boolean equations describe the multiplier adder (<code>ma<\/code>) as a function of its ports:\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"logic ma\">\r\n                    <tr>\r\n                        <th><em>x<\/em><\/th>\r\n                        <th><em>y<\/em><\/th>\r\n                        <th><em>s<sub>i<\/sub><\/em><\/th>\r\n                        <th><em>c<sub>i<\/sub><\/em><\/th>\r\n                        <th><em>b<\/em><\/th>\r\n                        <th><em>c<sub>o<\/sub><\/em><\/th>\r\n                        <th><em>s<sub>o<\/sub><\/em><\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/multiplier\/ma-block.html\"><img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/multiplier\/ma-block.svg\" alt=\"\" width=\"200\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"bottom: 0%; right: 0%;\">Animate<\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{align*}\r\n                            b &#038;= x \\cdot y\\\\\r\n                            s_o &#038;= s_i\\oplus b\\oplus c_i\\\\\r\n                            c_o &#038;= s_i \\cdot b + c_i \\cdot(s_i \\oplus b)\r\n                        \\end{align*}\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>1-bit Multiplier<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The <em>carry propagation array multiplier<\/em> works similarly to the way humans multiply. The <code>ma<sub>ij<\/sub><\/code> building blocks connect in a grid, where <code>ij<\/code> identifies the row and column. The figure below gives an example of a 4-bit multiplier.\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/multiplier\/4-bit carry-propagate.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/multiplier\/4-bit carry-propagate.svg\" alt=\"\" width=\"600\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"bottom: 10%; right: 0%;\">Animate<\/button>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>4-bit carry-propagate array multiplier<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    You might notice some redundancy in the top row, where <code>ma<sub>0x<\/sub><\/code> merely function as AND gates.\r\n<\/p>\r\n<p>\r\n    This method will provide the expected result, but it will take a relatively long time to do so because of the long carry chain. A more optimized method is the carry-save array multiplier described below.\r\n<\/p>\r\n<p id=\"carrysavemultiplier\">\r\n    Implementations of this and faster multipliers in Verilog HDL can be found in the accompanying articles <a href=\"\/category\/hw\/building-math-circuits\">Building Math Circuits<\/a>.\r\n<\/p>\r\n\r\n<h2 id=\"attemptsubtractiondivider\">\r\n    Division (<code>csm<\/code>)\r\n<\/h2>\r\n<p>\r\n    <a class=\"hide-anchor alignright\" href=\"\/wp-content\/uploads\/math-logo-theory-divide.svg\"><img class=\"alignright wp-image-17208\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-theory-divide.svg\" alt=\"division icon\" width=\"50\" \/><\/a>\r\n    Division is another example of combining simple logic function to make a more complex circuit. Note that the method shown below ignores the divide-by-0 condition. (See also <a href=\"http:\/\/writphotec.com\/mano4\/Supplements\/Mulitpliers_Dividers_supp4.pdf\">Multipliers and dividers<\/a>.)\r\n<\/p>\r\n<p>\r\n    Next we&#8217;ll introduce the most basic division method called <em>attempt subtraction divider<\/em>. In calculating <em>x\/y<\/em>, it repeatedly subtracts the divisor <em>y\u22c5os*<\/em> from the digits of the dividend <em>x<\/em>. Initially the value of <em>os<\/em> equals logic <code>0<\/code>, so that it subtracts the value <em>y<\/em>. If the difference is negative, the subtraction is cancelled by making <em>os<\/em> logic <code>1<\/code>. Together, all the successive <em>OS<\/em>&#8216;s together makes the division result, while the remainder is the difference of last subtraction step.\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/divider-example3.png\"><img class=\"wp-image-12931\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/divider-example3.png\" alt=\"\" width=\"280\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/divider-example3.png 321w, https:\/\/coertvonk.com\/wp-content\/uploads\/divider-example3-229x250.png 229w, https:\/\/coertvonk.com\/wp-content\/uploads\/divider-example3-274x300.png 274w, https:\/\/coertvonk.com\/wp-content\/uploads\/divider-example3-320x350.png 320w\" sizes=\"(max-width: 321px) 100vw, 321px\" \/><\/a>\r\n            <figcaption>Example for attempt-subtraction division<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    To implement this algorithm, we need subtractors that can cancel the subtraction. Each subtractor calculates the difference between two input numbers, but if the result is negative, the operation is canceled and replaced with a subtraction of zero.\r\n<\/p>\r\n<p>\r\n    Such a <em>Controlled Subtract-Multiplex<\/em> (CSM) contains a 1-bit subtractor <em>a-b<\/em> with the usual inputs <em>a<\/em>,<em> b<\/em>, and <em>b<sub>i<\/sub><\/em> and outputs <em>d<\/em> and <em>b<sub>o<\/sub><\/em>. The <em>output select<\/em> (<em>os<\/em>) signal selects between bit <em>x<\/em> and <em>d=a-b<\/em>. The signal is connected to the borrow output of the most significant 1-bit subtractor.\r\n    <ul>\r\n        <li>0, means subtraction result was positive \u21d2 D\u2019 = <em>D<\/em>.<\/li>\r\n        <li>1, means subtraction result was negative \u21d2 D\u2019 = X.<\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    Inside each divider cell the <em>os<\/em> controls a multiplexer that selects between the result of the addition <em>d<\/em> and the original remainder <em>x<\/em>. The boolean expressions express the output as a function of the inputs. (Click image to animate)\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"logic csm\">\r\n                    <tr>\r\n                        <th><em>os<\/em><\/th>\r\n                        <th><em>x<\/em><\/th>\r\n                        <th><em>y<\/em><\/th>\r\n                        <th class=\"border-right\"><em>b<sub>i<\/sub><\/em><\/th>\r\n                        <th><em>b<sub>o<\/sub><\/em><\/th>\r\n                        <th><em>d<\/em><\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>0<\/td>\r\n                        <td>0<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                        <td>1<\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/divider\/csm-block.html\">\r\n                        <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/divider\/csm-block.svg\" alt=\"\" width=\"200\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"bottom: 0%; left: 0%;\">Animate<\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{align*}\r\n                            d^\\prime &#038;=x \\oplus y \\oplus b_i\\\\\r\n                            d&#038;=os \\cdot x + \\overline{os} \\cdot d^\\prime\\\\\r\n                            b_o&#038;=\\overline{x} \\cdot y + b_i \\cdot (\\overline{x \\oplus y})\r\n                        \\end{align*}\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>1-bit Controlled Subtract-Multiplex<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The circuit shown below implements a complete 8:4-bit divider matrix using CSM modules. Each row performs one &#8220;attempt subtraction&#8221; cycle. Note that the most significant bit is used to drive the <em>os<\/em> inputs. (For details see \u201c<a href=\"http:\/\/www.asic-world.com\/digital\/arithmetic4.html\">Combinational arithmetic<\/a>\u201c.)\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/divider\/8_4-bit attempt-subtraction.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/divider\/8_4-bit attempt-subtraction.svg\" alt=\"\" width=\"600\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"top: 5%; right: 0%;\">Animate<\/button>\r\n                <\/a>\r\n            <\/div>\r\n        <figcaption>8:4-bit Attempt-Subtraction<\/figcaption><\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    For a faster approach or a Verilog implementation of above divider, refer to <a href=\"\/category\/hw\/building-math-circuits\">Building Math Circuits<\/a>.\r\n<\/p>\r\n\r\n<h2 id=\"sqrt\">\r\n    Square root\r\n<\/h2>\r\n<p>\r\n    <a class=\"hide-anchor\" href=\"\/wp-content\/uploads\/math-logo-theory-sqrt.svg\"><img class=\"alignright wp-image-17209\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-theory-sqrt.svg\" alt=\"square root icon\" width=\"50\" \/><\/a>\r\n    The square root operation is an interesting algorithm to implement in hardware. Its implementation is another example of combining simple logic functions, reusing previous designs.\r\n<\/p>\r\n<p>\r\n    <a href=\"https:\/\/www.sciencedirect.com\/science\/article\/abs\/pii\/S1383762108000623\">Samavi<\/a> and <a href=\"https:\/\/www.academia.edu\/2688190\/An_Optimized_Square_Root_Algorithm_for_Implementation_in_FPGA_Hardware\">Sutikno<\/a> improved the classical non-restoring digit recurrence square root algorithm. This example uses their algorithm but without the optimizations. The algorithm of this <em>Simplified-Samovi Square root<\/em> is:\r\n    <ol>\r\n        <li>\r\n            Add the next bit from the input number to the right of the current remainder. This becomes the new current remainder (<em>A<\/em>)\r\n        <\/li>\r\n        <li>\r\n            <span class=\"a\">Take the square root obtained so far, append <code>01<\/code> to it and subtracts this, properly shifted, from the current remainder. (The <code>0<\/code> in <code>01<\/code> corresponds to multiplying by 2; the <code>1<\/code> is a new guess bit.)<\/span>\r\n        <\/li>\r\n        <li>\r\n            If the result is\r\n            <ul>\r\n                <li><em>Positive<\/em>, then the new root bit is 1, and the result becomes the new remainder.<\/li>\r\n                <li><em>Negative<\/em>, then the current remainder (<em>A<\/em>) will become the new remainder (as if the subtraction never happened).<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/sqrt-example2.png\">\r\n                <img class=\"wp-image-12708\" title=\"(c) Copyright 2016-2022 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-300x300.png\" alt=\"\" width=\"160\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-300x300.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-200x200.png 200w, https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-400x400.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-250x250.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-350x350.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-500x498.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2-100x100.png 100w, https:\/\/coertvonk.com\/wp-content\/uploads\/sqrt-example2.png 558w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/>\r\n            <\/a>\r\n            <figcaption>Example for simplified Samovi square root<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The circuit shown below implements a complete 8-bit square root circuit. Each row performs one &#8220;attempt subtraction&#8221; cycle. Like in the division circuit, the most significant bit is used to drive the <em>os<\/em> inputs.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/squareroot\/8-bit simplified-Samovi.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/squareroot\/8-bit simplified-Samovi.svg\" alt=\"\" width=\"600\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"top: 12%; right: 0%;\">Animate<\/button>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>8-bit simplified-Samovi square root<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    For a Verilog implementation of above square root algorithm, refer to <a href=\"\/category\/hw\/building-math-circuits\">Building Math Circuits<\/a>.\r\n<\/p>\r\n<p>\r\n    I hope the this answered the question &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do computers do math?<\/a>&#8220;. The easy answer would be &#8220;because the physics make it&#8221;, just like a ball rolling down a hill.  I hope you enjoyed our much longer journey into this exciting field!\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                For those interested in building these math circuits, I suggest reading the <a href=\"\/category\/hw\/building-math-circuits\">Building Math Circuits<\/a> and <a href=\"\/hw\/logic\/programmable-logic-30714\">chapter on programmable logic<\/a>. If you want to know more about digital logic, I suggest reading the <a href=\"\/hw\/logic\/synchronous-sequential-logic-30712\">next chapter<\/a> that introduces sequential logic that allows us to build more complicated systems.\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"In chapter 7, we use gates to build circuits that perform math operations.  Includes interactive schematics.","protected":false},"author":41,"featured_media":17715,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[401],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Math using gates - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Builds logic circuits that implement elementary math functions using gates.. Includes interactive schematics.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Math using gates - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Builds logic circuits that implement elementary math functions using gates.. Includes interactive schematics.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2010-10-07T23:21:27+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-01T00:58:48+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png\" \/>\n\t<meta property=\"og:image:width\" content=\"212\" \/>\n\t<meta property=\"og:image:height\" content=\"196\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png\",\"width\":212,\"height\":196},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#webpage\",\"url\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710\",\"name\":\"Math using gates - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#primaryimage\"},\"datePublished\":\"2010-10-07T23:21:27+00:00\",\"dateModified\":\"2022-05-01T00:58:48+00:00\",\"description\":\"Builds logic circuits that implement elementary math functions using gates.. Includes interactive schematics.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Inquiries\",\"item\":\"https:\/\/coertvonk.com\/category\/inquiries\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"How do computers do math?\",\"item\":\"https:\/\/coertvonk.com\/category\/inquiries\/computer-math\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Math using gates\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Math using gates\",\"datePublished\":\"2010-10-07T23:21:27+00:00\",\"dateModified\":\"2022-05-01T00:58:48+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#webpage\"},\"wordCount\":1830,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png\",\"articleSection\":[\"How do computers do math?\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"http:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Math using gates - Coert Vonk","description":"Builds logic circuits that implement elementary math functions using gates.. Includes interactive schematics.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710","og_locale":"en_US","og_type":"article","og_title":"Math using gates - Coert Vonk","og_description":"Builds logic circuits that implement elementary math functions using gates.. Includes interactive schematics.","og_url":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710","og_site_name":"Coert Vonk","article_published_time":"2010-10-07T23:21:27+00:00","article_modified_time":"2022-05-01T00:58:48+00:00","og_image":[{"width":212,"height":196,"url":"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png","width":212,"height":196},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#webpage","url":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710","name":"Math using gates - Coert Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#primaryimage"},"datePublished":"2010-10-07T23:21:27+00:00","dateModified":"2022-05-01T00:58:48+00:00","description":"Builds logic circuits that implement elementary math functions using gates.. Includes interactive schematics.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Inquiries","item":"https:\/\/coertvonk.com\/category\/inquiries"},{"@type":"ListItem","position":3,"name":"How do computers do math?","item":"https:\/\/coertvonk.com\/category\/inquiries\/computer-math"},{"@type":"ListItem","position":4,"name":"Math using gates"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Math using gates","datePublished":"2010-10-07T23:21:27+00:00","dateModified":"2022-05-01T00:58:48+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#webpage"},"wordCount":1830,"commentCount":0,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/how-do-computers-do-math.png","articleSection":["How do computers do math?"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"http:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30710"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=30710"}],"version-history":[{"count":10,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30710\/revisions"}],"predecessor-version":[{"id":31825,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30710\/revisions\/31825"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/17715"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=30710"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=30710"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=30710"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}