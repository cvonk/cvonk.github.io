{"id":30772,"date":"2015-10-05T10:51:48","date_gmt":"2015-10-05T17:51:48","guid":{"rendered":"https:\/\/coertvonk.com\/?p=30772"},"modified":"2022-04-28T19:40:50","modified_gmt":"2022-04-29T02:40:50","slug":"parameterized-multiplier-in-verilog","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772","title":{"rendered":"Multiplier circuit"},"content":{"rendered":"<p>\r\n    Implements a math multiplier using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#8217;s.\r\n<\/p>\r\n<h2 style=\"counter-reset: h2 4 h3\">\r\n    Multiplier using logic gates\r\n<\/h2>\r\n<p>\r\n    <a class=\"hide-anchor fancybox\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg\"><img class=\"alignright wp-image-17213\"  title=\"\"  src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg\" alt=\"multiplier icon\" width=\"75\" \/><\/a>\r\n\r\n    We introduced the <em>carry-propagate array multiplier<\/em> in the inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8220;.\\(\\)\r\n<\/p>\r\n<p>\r\n    This multiplier is build around Multiplier Adder (<code>ma<\/code>) blocks. These <code>ma<\/code> blocks are themselves build around the Full Adder (<code>fa<\/code>) blocks introduced in the <a href=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/fpga-math-verilog-12758\">adder section<\/a>. These <code>fa<\/code> blocks have the usual inputs \\(a\\) and \\(b\\), \\(c_i\\) and outputs \\(s\\) and \\(c_o\\). The special thing is that the internal signal \\(b\\) is an AND function of the inputs \\(x\\) and \\(y\\) as depicted below.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/multiplier\/ma-block.html\">\r\n                        <img class=\"aligncenter\" title=\"(c) Copyright 2017 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/multiplier\/ma-block.svg\" alt=\"\" width=\"200\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"bottom: 0%; right: 0%;\">\r\n                            Animate\r\n                        <\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{align*}\r\n                            a &#038;= s_i\\\\\r\n                            b &#038;= x \\cdot y\\\\\r\n                            s_o &#038;= s_i\\oplus b\\oplus c_i\\\\\r\n                            c_o &#038;= s_i \\cdot b + c_i \\cdot(s_i \\oplus b)\r\n                        \\end{align*}\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption align=\"bottom\">\r\n                1-bit multiplying-adder\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    <strong>Carry-propagate Array Multiplier<\/strong>\r\n<\/p>\r\n<p>\r\n    As shown in the inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8220;, a carry-propagate array multiplier can be built by combining many of these <code>ma<\/code> blocks. The circuit diagram below shows the connections between these blocks for a 4-bit multiplier.\r\n    \r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/multiplier\/4-bit carry-propagate.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/multiplier\/4-bit carry-propagate.svg\" alt=\"\" width=\"600\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"bottom: 10%; right: 0%;\">\r\n                        Animate\r\n                    <\/button>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                4-bit carry-propagate array multiplier\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    For an implementation in Verilog HDL, we can instantiate <code>ma<\/code> blocks based on the word length of the multiplicand and multiplier (\\(N\\)). If you are new to Verilog HDL, remember that the <code>generate<\/code> code segment expands during compilation time. In other words, it is just a short hand for writing out the long list of <code>ma<\/code> block instances.\r\n<\/p>\r\n<p>\r\n    <pre class=\"brush: verilog; title: ; toolbar: false; notranslate\" title=\"\">generate genvar ii, jj;\r\n    for ( ii = 0; ii <; N; ii = ii + 1) begin: gen_ii\r\n        for ( jj = 0; jj <; N; jj = jj + 1) begin: gen_jj\r\n            math_multiplier_ma_block ma( \r\n                .x(?), .y(?), .si(?), .ci(?),\r\n                .so(?), .co(?) );\r\n        end\r\n    end\r\nendgenerate&#091;\/code&#093;\r\n<\/p>\r\n<p>\r\n    As you might notice, the input and output ports are not described. For this, we need to derive the rules that govern these interconnects. Start by numbering the output ports based on their location in the matrix. For this circuit, we have the output signals <em>sum<\/em> (\\(s\\)) and <em>carry-out<\/em> (\\(c\\)). E.g. \\(c_{13}\\) identifies the carry-out signal for the block in row <code>1<\/code> and column <code>3<\/code>. Note that the circuit description depicts the matrix in a slanted fashion.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-output.png\">\r\n                <img class=\"wp-image-16504\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-output.png\" alt=\"own work\" width=\"420\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-output.png 488w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-output-400x115.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-output-250x72.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-output-300x86.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-output-350x100.png 350w\" sizes=\"(max-width: 488px) 100vw, 488px\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                Output signals 'so' and 'co'\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Knowing this, we can enter the output signals in the Verilog HDL code\r\n    math_multiplier_ma_block ma( \r\n    .x(?), .y(?), .si(?), .ci(?),\r\n    .so ( s[ii][jj] ),\r\n    .co ( c[ii][jj] ) );<\/pre>\r\n<\/p>\r\n<p>\r\n    Next, we express the input signals as a function of the output signal names \\(s\\) and \\(c\\) as shown in the table below.    \r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-input.png\">\r\n                <img class=\"wp-image-16505\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-input.png\" alt=\"own work\" width=\"402\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-input.png 488w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-input-400x223.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-input-250x139.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-input-300x167.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-ma-input-350x195.png 350w\" sizes=\"(max-width: 488px) 100vw, 488px\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                Input signals 'x', 'y', 'si' and 'ci'\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Based on this table, we can express the input assignments for each <code>ma<\/code> using \"<code>c ? a : b<\/code>\" expressions. Note that Verilog 2001 does not allow these programming statements for the output pins. This is why we expressed the input ports as a function of the output ports instead of visa versa.\r\n<\/p>\r\n<p>\r\n    <pre class=\"brush: verilog; title: ; toolbar: false; notranslate\" title=\"\">math_multiplier_ma_block ma( \r\n    .x ( a[jj] ),\r\n    .y ( b[ii]),\r\n    .si ( ii == 0 ? 1'b0 : jj <; N - 1 ? s&#091;ii-1&#093;&#091;jj+1&#093; : c&#091;ii-1&#093;&#091;N-1&#093; ),\r\n    .ci ( jj > 0 ? c[ii][jj-1] : 1'b0 ),\r\n    .so ( s[ii][jj] ),\r\n    .co ( c[ii][jj] ) );<\/pre>\r\n<\/p>\r\n<p>\r\n    All that is left to do is to express the inputs of the module as a function of the output signals\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2.png\">\r\n                <img class=\"wp-image-16725\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2.png\" alt=\"\" width=\"351\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2.png 565w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2-400x75.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2-250x47.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2-300x56.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2-350x66.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-tbl-mult-output2-500x94.png 500w\" sizes=\"(max-width: 565px) 100vw, 565px\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                Output signal 'p'\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Putting it all together, we get the following snippet\r\n    generate genvar ii, jj;\r\n    for (ii = 0; ii <; N; ii = ii + 1) begin: gen_ii\r\n        for (jj = 0; jj <; N; jj = jj + 1) begin: gen_jj\r\n            math_multiplier_ma_block ma( \r\n                .x  ( a[jj] ),\r\n                .y  ( b[ii]),\r\n                .si ( ii == 0 ? 1'b0 : jj <; N - 1 ? s[ii-1][jj+1] : c[ii-1][N-1] ),\r\n                .ci ( jj > 0 ? c[ii][jj-1] : 1'b0 ),\r\n                .so ( s[ii][jj] ),\r\n                .co ( c[ii][jj] ) );\r\n        end\r\n        assign p[ii] = s[ii][0];\r\n    end    \r\n    for (jj = 1; jj <; N; jj = jj + 1) begin: gen_jj2\r\n        assign p[jj+N-1] = s[N-1][jj];\r\n    end\r\n    assign p[N*2-1]  = c[N-1][N-1];\r\nendgenerate[\/code]\r\n<\/p>\r\n<p>\r\n    The <code>ma<\/code> block compiles into the RTL netlist shown below\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-multiplier-ripple-carry-rtl-ma.svg\">\r\n                <img class=\"wp-image-16642\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-rtl-ma.svg\" alt=\"own work\" width=\"350\" \/>\r\n            <\/a>\r\n            <figcaption>1-bit multiplying-adder in RTL<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    As shown in the figure below, the <code>for<\/code> loops unroll into 16 interconnected <code>ma<\/code> blocks.\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <img class=\"hide-anchor wp-image-16641\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-rtl-top.svg\" alt=\"own work\" width=\"600\" \/>\r\n            <figcaption>\r\n                4-bit carry-propagate array multiplier in RTL\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The complete Verilog HDL source code is available at:\r\n\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGAmath\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Results\r\n<\/h3>\r\n<p>\r\n    The propagation delay \\(t_{pd}\\) depends size \\(N\\) and the value of operands. For a given size \\(N\\), the maximum propagation delay occurs when the low order bit because a carry\/sum that propagate to the highest order bit. This worst-case propagation delay is linear with \\(3N\\). Note that the average propagation delay is about half of this.\r\n<\/p>\r\n<p>\r\n    The worst-case propagation delays for the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Terasic Altera Cyclone IV DE0-Nano<\/a> are found using the post-map Timing Analysis tool. The exact value depends on the model and speed grade of the FPGA, the silicon itself, voltage and the die temperature.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"results\">\r\n                    <tr>\r\n                        <th>\\(N\\)<\/th>\r\n                        <th colspan=\"3\">Timing Analysis<\/th>\r\n                        <th>Measured<\/th>\r\n                    <\/tr>\r\n                    <tr style=\"border-bottom: 1px solid #ddd;\">\r\n                        <th><\/th>\r\n                        <th>slow 85\u00b0C<\/th>\r\n                        <th>slow 0\u00b0C<\/th>\r\n                        <th>fast 0\u00b0C<\/th>\r\n                        <th>actual<\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">4-bits<\/td>\r\n                        <td style=\"text-align: right;\">9.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">8.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">6.1 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">8-bits<\/td>\r\n                        <td style=\"text-align: right;\">20.8 ns<\/td>\r\n                        <td style=\"text-align: right;\">18.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">12.4 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">16-bits<\/td>\r\n                        <td style=\"text-align: right;\">41.3 ns<\/td>\r\n                        <td style=\"text-align: right;\">36.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">24.2 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">27-bits<\/td>\r\n                        <td style=\"text-align: right;\">69.6 ns<\/td>\r\n                        <td style=\"text-align: right;\">62.1 ns<\/td>\r\n                        <td style=\"text-align: right;\">40.9 ns<\/td>\r\n                        <td style=\"text-align: right;\">55 ns<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">32-bits<\/td>\r\n                        <td style=\"text-align: right;\">83.4 ns<\/td>\r\n                        <td style=\"text-align: right;\">74.5 ns<\/td>\r\n                        <td style=\"text-align: right;\">49.0 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-adder-lookaheadcarry2lvl.-measurements.svg\">\r\n                    <img class=\"wp-image-16751\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-adder-lookaheadcarry2lvl.-measurements.svg\" alt=\"\" width=\"100%\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Propagation delay in carry-propagate array multiplier\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The timing analysis for \\(N=27\\), reveals that the worst-case propagation delay path goes through \\(c_0\\) and \\(s_o\\) as shown below on the left. When measuring the worst-case propagation delay on the actual device, we use input values that cause the maximum number ripple carries and sums propagating. For a 27-bit multiplier that where the input also has a maximum value of 99,999,999, the propagation path is simulated in a spreadsheet as shown below on the right.\r\n<\/p>\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a href=\"\/wp-content\/uploads\/math-multiplier-ripple-carry-worstcase.svg\"><img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-worstcase.svg\" alt=\"\" class=\"alignnone size-full wp-image-16668\" \/><\/a>\r\n            <figcaption>\r\n                Worst case path\r\n            <\/figcaption>\r\n        <\/figure>\r\n        <figure>\r\n            <a href=\"\/wp-content\/uploads\/math-multiplier-ripple-carry-worstcase-input2.svg\"><img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-multiplier-ripple-carry-worstcase-input2.svg\" alt=\"\" class=\"alignnone size-full wp-image-16680\" \/><\/a>\r\n            <figcaption>\r\n                Worst case input\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Brute force using the FPGA to find all combinations of operands that cause long propagation delays revealed 27'h2FA3A92 * 27h'55D4A77, 27'h60A308B * 27'd99999999 (50ns), 27'h775A668 * 27'd89999999 (55 ns), 27'h56F5D8F * 27'h3AAAB7B (55 ns).\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Following this \"Math multiplier using logic gates\", the <a href=\"\/hw\/building-math-circuits\/faster-parameterized-multiplier-in-verilog-30774\">next chapter<\/a> explores methods of making the multiplication operation faster.\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>","protected":false},"excerpt":{"rendered":"Builds a carry-propagate array multiplier.","protected":false},"author":5,"featured_media":17213,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[420],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Math multiplier using logic gates - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Implements a math multiplier using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Math multiplier using logic gates - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Implements a math multiplier using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-05T17:51:48+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-29T02:40:50+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Johan Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"1 minute\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"http:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"http:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"]},{\"@type\":\"WebSite\",\"@id\":\"http:\/\/coertvonk.com\/#website\",\"url\":\"http:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"http:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg\",\"caption\":\"(c) Copyright 2016 Coert Vonk\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#webpage\",\"url\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772\",\"name\":\"Math multiplier using logic gates - Coert Vonk\",\"isPartOf\":{\"@id\":\"http:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#primaryimage\"},\"datePublished\":\"2015-10-05T17:51:48+00:00\",\"dateModified\":\"2022-04-29T02:40:50+00:00\",\"description\":\"Implements a math multiplier using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Building math circuits\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\/building-math-circuits\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Multiplier circuit\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#webpage\"},\"author\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb\"},\"headline\":\"Multiplier circuit\",\"datePublished\":\"2015-10-05T17:51:48+00:00\",\"dateModified\":\"2022-04-29T02:40:50+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#webpage\"},\"wordCount\":254,\"commentCount\":0,\"publisher\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg\",\"articleSection\":[\"Building math circuits\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb\",\"name\":\"Johan Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"http:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g\",\"caption\":\"Johan Vonk\"},\"description\":\"I see education as the foundation upon which entrepreneurs are able to build innovative organizations and execute their vision for the future.\",\"sameAs\":[\"https:\/\/coertvonk.com\/family\/johan\"],\"url\":\"http:\/\/coertvonk.com\/author\/johan-vonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Math multiplier using logic gates - Coert Vonk","description":"Implements a math multiplier using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772","og_locale":"en_US","og_type":"article","og_title":"Math multiplier using logic gates - Coert Vonk","og_description":"Implements a math multiplier using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","og_url":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772","og_site_name":"Coert Vonk","article_published_time":"2015-10-05T17:51:48+00:00","article_modified_time":"2022-04-29T02:40:50+00:00","twitter_card":"summary","twitter_image":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg","twitter_misc":{"Written by":"Johan Vonk","Est. reading time":"1 minute"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":["Person","Organization"],"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"http:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"http:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"]},{"@type":"WebSite","@id":"http:\/\/coertvonk.com\/#website","url":"http:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"http:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg","caption":"(c) Copyright 2016 Coert Vonk"},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#webpage","url":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772","name":"Math multiplier using logic gates - Coert Vonk","isPartOf":{"@id":"http:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#primaryimage"},"datePublished":"2015-10-05T17:51:48+00:00","dateModified":"2022-04-29T02:40:50+00:00","description":"Implements a math multiplier using circuits of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coertvonk.com\/category\/hw"},{"@type":"ListItem","position":3,"name":"Building math circuits","item":"https:\/\/coertvonk.com\/category\/hw\/building-math-circuits"},{"@type":"ListItem","position":4,"name":"Multiplier circuit"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#webpage"},"author":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb"},"headline":"Multiplier circuit","datePublished":"2015-10-05T17:51:48+00:00","dateModified":"2022-04-29T02:40:50+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#webpage"},"wordCount":254,"commentCount":0,"publisher":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-multiplier-in-verilog-30772#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-multiply.svg","articleSection":["Building math circuits"],"inLanguage":"en-US"},{"@type":"Person","@id":"http:\/\/coertvonk.com\/#\/schema\/person\/deb9764766ea4c5db805e35424a70fdb","name":"Johan Vonk","image":{"@type":"ImageObject","@id":"http:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g","contentUrl":"http:\/\/0.gravatar.com\/avatar\/92498ecf10b875a32d7d534da8897888?s=96&d=mm&r=g","caption":"Johan Vonk"},"description":"I see education as the foundation upon which entrepreneurs are able to build innovative organizations and execute their vision for the future.","sameAs":["https:\/\/coertvonk.com\/family\/johan"],"url":"http:\/\/coertvonk.com\/author\/johan-vonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30772"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=30772"}],"version-history":[{"count":10,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30772\/revisions"}],"predecessor-version":[{"id":32793,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30772\/revisions\/32793"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/17213"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=30772"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=30772"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=30772"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}