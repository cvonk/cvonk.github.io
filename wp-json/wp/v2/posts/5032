{"id":5032,"date":"2012-03-03T09:06:57","date_gmt":"2012-03-03T17:06:57","guid":{"rendered":"http:\/\/coert.vonk.one\/?p=5032"},"modified":"2022-04-25T16:43:14","modified_gmt":"2022-04-25T23:43:14","slug":"complex-arithmetic-branchcut","status":"publish","type":"post","link":"/\/sw\/hp41\/complex-arithmetic-branchcut-5032","title":{"rendered":"Complex arithmetic with adjustable branch cut on HP-41"},"content":{"rendered":"<p>\r\n    Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41.  Compared to the previous version [2], it allows the user to adjust the branch cut in the complex plane, and introduces the ATAN and ATANH operators.\r\n<\/p>\r\n\r\n<h2>\r\n    History\r\n<\/h2>\r\n<p>\r\n    In May 1985, Frans de Vries published his complex arithmetic program for the HP-41CX [1]. I am very grateful for his work, and much of the program is based on his work. My iterations of his program, has been my pet project while in college. This version of the program, was inspired while studying contour integrals in the complex plane. It makes the branch cut adjustable.\r\n<\/p>\r\n\r\n<h2>\r\n    Theory\r\n<\/h2>\r\n<p>\r\n    A complex number can be converted from rectangular to polar coordinates using trigonometry\r\n\r\n    <div class=\"flex-container tight\">\r\n        <a href=\"\/sw\/hp41\/complex-arithmetic-branchcut-5032\/attachment\/ca-10a\" rel=\"attachment wp-att-5069\">\r\n            <img loading=\"lazy\" class=\"size-full wp-image-5069 aligncenter\"  title=\"\"  src=\"\/wp-content\/uploads\/ca-10a.png\" alt=\"\" width=\"149\" height=\"63\" \/>\r\n        <\/a>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    There are many choices which can be made for \u03c6, because a complete rotation around <em>(0 + 0j)<\/em> results in the same rectangular coordinates. The function is said to be multivalued, with possible values\r\n\r\n    <div class=\"flex-container tight\">\r\n        <a href=\"\/sw\/hp41\/complex-arithmetic-branchcut-5032\/attachment\/ca-11\" rel=\"attachment wp-att-5062\">\r\n            <img class=\"size-full wp-image-5062 aligncenter\" title=\"ca-11\" src=\"\/wp-content\/uploads\/ca-11.png\" alt=\"\" width=\"210\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/ca-11.png 210w, https:\/\/coert.vonk.one\/wp-content\/uploads\/ca-11-200x23.png 200w\" sizes=\"(max-width: 210px) 100vw, 210px\" \/>\r\n        <\/a>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    In this <em>atan2(z)<\/em> denotes\r\n\r\n    <div class=\"flex-container tight\">\r\n        <a href=\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032\/attachment\/ca-12b\" rel=\"attachment wp-att-5071\"><img class=\"size-full wp-image-5071 aligncenter\" title=\"ca-12b\" src=\"\/wp-content\/uploads\/ca-12b.png\" alt=\"\" width=\"314\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/ca-12b.png 314w, https:\/\/coert.vonk.one\/wp-content\/uploads\/ca-12b-250x111.png 250w, https:\/\/coert.vonk.one\/wp-content\/uploads\/ca-12b-300x133.png 300w\" sizes=\"(max-width: 314px) 100vw, 314px\" \/>\r\n        <\/a>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    In calculators, a well-defined function is required. The usual choice for\u00a0\u03c6 (principal value) is a value in the interval (-\u03c0,\u03c0]. In this case the branch cut is a line segment from 0 extending just above the negative real axis. Such a branch cut is at angle \u03c0 compared to the positive real axis.\r\n<\/p>\r\n<p>\r\n    Common branch cuts are\r\n    <ul>\r\n        <li>\u03c0\/2, just right of the positive imaginary axis;<\/li>\r\n        <li>\u03c0, just above the negative real axis;<\/li>\r\n        <li>3\u03c0\/2, just left of the negative imaginary axis; and<\/li>\r\n        <li>2\u03c0, just under the the positive real axis<\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h2>\r\n    Instructions and examples\r\n<\/h2>\r\n<p>\r\n    For a keyboard overlay and general instructions and examples refer to the article &#8220;<a href=\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-xmem-4426\">Complex Arithmetic in Extended Memory for HP-41cv\/cx<\/a>&#8221; [2].\r\n<\/p>\r\n<p>\r\n    This program let the user specify the angle of the branch cut using the <span class=\"hp41-ckey\">BCUT<\/span> key. The program will prompt you for an angle specified in radians.\r\n<\/p>\r\n<p>\r\n    Compared to the previous version [2], the program now also implements the\u00a0atan (<span class=\"hp41-ckey\">ARC<\/span><span class=\"hp41-ckey\">TAN<\/span>) and atanh (<span class=\"hp41-ckey\">ARC<\/span><span class=\"hp41-ckey\">HYP<\/span><span class=\"hp41-ckey\">TAN<\/span>).\r\n<\/p>\r\n\r\n<h2>\r\n    Listing\r\n<\/h2>\r\n<p>\r\n    Available through the repository\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/hp41-focal\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/hp41-focal\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    \u00c1ngel Martin combined several of my focal\u00a0programs from this site and compiled ROM and MOD images. They are available through <a href=\"https:\/\/github.com\/cvonk\/hp41-focal\/\">GitHub<\/a>.\r\n\r\n    <ul>\r\n        <li>\r\n            Requires\r\n            <ul>\r\n                <li>X-Functions module on the HP-41cv<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Available as\r\n            <ul>\r\n                <li><a href=\"\/wp-content\/hp-41\/ca401.txt\">source code<\/a><\/li>\r\n                <li><a href=\"\/wp-content\/hp-41\/ca401.raw\">raw code<\/a> for the V41 emulator<\/li>\r\n                <li><a href=\"\/wp-content\/hp-41\/ca401.pdf\">bar code<\/a> for the HP Wand (HP82153A)<\/li>\r\n                <li><a href=\"\/wp-content\/hp-41\/ca300.jpg\">keyboard overlay<\/a>, scaled down by 98% so when printed on 4\u00d76&#8243;, it typically comes out as true-size.<\/li>\r\n                <li><a href=\"\/wp-content\/hp-41\/ca300inv.jpg\">inverted keyboard overlay<\/a>, scaled down by 98% so when printed on 4\u00d76&#8243;, it typically comes out as true-size.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            For register and flag usage refer to [2]. In addition, in this version stores the branch cut angle at register 15.\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    <div class=\"flex-container math\">\r\n        <pre class=\"brush: hpfocal; gutter: false; title: ; toolbar: false; notranslate\" title=\"\"> 1       LBL \"CA\"\r\n2       \"CA V4.01\"\r\n3       AVIEW\r\n4       PI              ; store \"snedehoek\"\r\n5       ST+ X\r\n6       STO 15\r\n7       RDN\r\n8       CF 03           ; clear prefix flags (ARC, HYP)\r\n9       CF 04\r\n10      RAD\r\n11      FS?C 14         ; if the \"do not clear stack\" flag is set\r\n12      GTO 01          ;   then jump to LBL 00,\r\n13      6\r\n14      STO 00\r\n15      XEQ 48\r\n16      STO 01          ; clear LASTZ\r\n17      STO 02\r\n18      LBL 01\r\n19      CF 10\r\n20      CF 22\r\n21      CF 25\r\n22      FS? 00\r\n23      XEQ 33\r\n24      XEQ 10          ; display complex number (x + y.j)\r\n25      STOP\r\n26      ENTER^\r\n27      LBL 02\r\n28      \"FUNCTION ?\"\r\n29      AVIEW\r\n30      CLX\r\n31      GETKEY          ; wait for an operation keycode\r\n32      X=0?\r\n33      GTO 02\r\n34      31\r\n35      X#Y?            ; if not the \"shift\" key\r\n36      GTO 00          ;   then handle that operation\r\n37      R^              ;   else update the shift annunciator\r\n38      R^\r\n39      \"&#92;&#48;1&#92;&#48;0\"\r\n40      FS? 47\r\n41      CLA\r\n42      RCLFLAG\r\n43      ASTO d\r\n44      STOFLAG\r\n45      AOFF\r\n46      GTO 02\r\n\r\n47      LBL 00          ; handle operation associated with a keycode\r\n48      CLX\r\n49      5\r\n50      FC? 47          ; if \"shift was active\"\r\n51      CLX             ;   then increment key code by 5\r\n52      +\r\n53      RDN\r\n54      CLD\r\n55      \"OK\"            ; ??\r\n56      AVIEW\r\n57      SF 25\r\n58      XEQ IND T       ; call the corresponding operation\r\n59      FC?C 14\r\n60      GTO 01\r\n61      ENTER^\r\n62      GTO 02\r\n\r\n; TOGGLE [ARC] MODIFIER, for ASIN, ACOS, ATAN\r\n\r\n63      LBL 11          ; [ARC], key label [sigma+]\r\n64      FC?C 03\r\n65      SF 03\r\n66      SF 14           ; indicate \"more key strokes to follow\"\r\n67      RTN\r\n\r\n; TOGGLE [HYP] MODIFIER, for SINH, COSH and TANH\r\n\r\n68      LBL 16          ; [HYP], key label [sigma-]\r\n69      FC?C 04\r\n70      SF 04\r\n71      SF 14           ; indicate \"more key strokes to follow\"\r\n72      RTN\r\n\r\n; TOGGLES FLAG 01, and RECALLS Z1 to X,Y\r\n\r\n73      LBL 67          ; sorry I don't remember what the pupose of this\r\n74      FC?C 01\t\t;  operator is\r\n75      SF 01\r\n76      GTO 00\r\n\r\n; SWITCH BETWEEN POLAR AND RECTANGULAR NOTATION\r\n;\r\n; rectilinear to polar coordinates\r\n;   r = sqrt(x^2+y^2), phi=atan(y,x)\r\n; polar to rectilinear\r\n;   x = r.cos(phi)\r\n;   y = r.sin(phi)\r\n\r\n77      LBL 68          ; [RECT], key label [P>R]\r\n78      CF 00\r\n79      GTO 00\r\n80      LBL 69          ; [POL], key label [R>P]\r\n81      SF 00\r\n82      LBL 00\r\n83      RCL 04          ; get Z1 from the complex stack as (x + y.j)\r\n84      RCL 03\r\n85      RTN\r\n\r\n; COMPLEX RECIPROCAL (1\/Z)\r\n;\r\n; on entry : Z in X,Y registers in the form (x + y.j)\r\n; on exit  : the result is stored as Z1 on the complex stack\r\n;            the result is stored in X,Y in the form (x + y.j)\r\n;            LASTZ1 holds a copy of the operation operand Z\r\n\r\n86      LBL 12          ; [1\/Z] operation\r\n\r\n87      XEQ 09          ; push (x + y.j) onto complex stack and update LASTZ1\r\n88      XEQ 31          ; compute (x + j.y) = 1 \/ (x + j.y)\r\n89      GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX ENTER^\r\n;\r\n; on entry : Z in X,Y registers in the form (x + y.j)\r\n; on exit  : Z is pushed up the complex stack as Z1 and Z2\r\n;            Z is X,Y in the form (x + y.j)\r\n;            LASTZ1 is unchanged\r\n\r\n90      LBL 41          ; [CENTER^] operation\r\n\r\n91      XEQ 04          ; push (x + y.j) onto complex stack\r\n92      XEQ 11          ; move complex stack up, Z1 > Z2 > Z3 > Z4 > Z5 > Z6\r\n93      SF 02           ; \"no stack lift\"\r\n94      RTN\r\n\r\n; COMPLEX CLEAR STACK\r\n;\r\n; on entry : n\/a\r\n; on exit  : Z1..Z6 on the complex stack are set to (0 + 0j)\r\n;            LASTZ1 is unchanged\r\n\r\n95      LBL 48          ; [CCLST] operation\r\n\r\n96      RCL 00\r\n97      ISG X\r\n98      \"\"\r\n99      ST+ X\r\n100      E3\r\n101     \/\r\n102     3\r\n103     +\r\n104     SIGN\r\n105     CLX\r\n106     LBL 34\r\n107     STO IND L\r\n108     ISG L\r\n109     GTO 34\r\n110     CF 02           ; no \"no stack lift\"\r\n111     CLST\r\n112     RTN\r\n\r\n; COMPLEX CHANGE SIGN AND COMPLEX CONJUGATE (Complement)\r\n;\r\n;     -(x + y.j) = -x - y.j  (change sign)\r\n;     (x + y.j)* =  x - y.j  (conjugate)\r\n;\r\n; on entry : Z in X,Y registers in the form (x + y.j)\r\n; on exit  : the result is stored as Z1 on the complex stack\r\n;            the result is stored in X,Y in the form (x + y.j)\r\n;            LASTZ1 holds a copy of the operation operand Z\r\n\r\n113     LBL 42          ; [CHSZ] operation\r\n114     SF 10\r\n115     LBL 47          ; [COMPLZ] operation\r\n\r\n116     XEQ 04          ; push (x + y.j) onto complex stack\r\n117     FS? 10\r\n118     CHS\r\n119     X<>Y\r\n120     CHS\r\n121     X<>Y\r\n122     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; CLEAR Z1\r\n;\r\n; on entry : Z in X,Y registers in the form (x + y.j)\r\n; on exit  : Z is pushed up the complex stack as Z1 and Z2\r\n;            Z is X,Y in the form (x + y.j)\r\n;            LASTZ1 is unchanged\r\n\r\n123     LBL 49          ; [CLZ1] operation\r\n\r\n124     XEQ 04          ; push (x + y.j) onto complex stack\r\n125     CLST\r\n126     SF 02           ; \"no stack lift\"\r\n127     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; LAST Z1\r\n;\r\n; on entry : n\/a\r\n; on exit  : the operand from the last numeric operation (except CHSZ)\r\n;              is pushed onto the complex stack\r\n;            the operand from the last numeric operation (except CHSZ)\r\n;              is stored in X,Y in the form (x + y.j)\r\n\r\n128     LBL 88          ; [LASTZ1] operation\r\n\r\n129     FS? 02\r\n130     FS? 22          ; if \"no stack lift\" or \"input from keyboard\"\r\n131     XEQ 41          ;   then perform CENTER^\r\n132     CF 02\r\n133     RCL 02          ; LASTZ1\r\n134     RCL 01\r\n135     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX ADDITION AND SUBTRACTION\r\n;\r\n;     (z + t.j) + (x + y.j) = (x + z) + j.(y + t)\r\n;     (z + t.j) - (x + y.j) = (x - z) + j.(y - t)\r\n;\r\n; on entry : if number was entered on the keyboard,\r\n;              then (x + y.j) as entered in X,Y registers, and\r\n;                   (z + t.j) from Z1 on the complex stack\r\n;              else (x + y.j) from Z1 on the complex stack, and\r\n;                   (z + t.j) from Z2 on the complex stack\r\n; on exit  : the result is stored as Z1 on the complex stack\r\n;            the result is stored in X,Y in the form (x + y.j)\r\n;            LASTZ1 holds a copy of (x + y.j)\r\n\r\n136     LBL 51          ; [C-] operation\r\n137     SF 10\r\n138     LBL 61          ; [C+] operation\r\n\r\n139     XEQ 07          ; get two operands, as (x + j.y) and (z + j.t)\r\n140     FS? 10\r\n141     CHS\r\n142     X<>Y\r\n143     FS? 10\r\n144     CHS\r\n145     ST+ T\r\n146     RDN\r\n147     +\r\n148     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX MULTIPLICATION AND DIVISION\r\n;\r\n;     Z2 * Z1 = (re1 + j.im1) * (re2 + j.im2) =\r\n;             = (re1.re2 - im1.im2 ) + j.(im1.re1 + re1.im2)\r\n;\r\n;     Z2 \/ Z1 = Z2 * 1\/Z1\r\n\r\n149     LBL 81          ; [C\/] operation\r\n150     SF 10\r\n151     LBL 71          ; [C*] operation\r\n\r\n152     XEQ 07          ; get two operands, as (x + j.y) and (z + j.t)\r\n153     FS? 10          ; if division\r\n154     XEQ 31          ;   then compute (x + j.y) = 1 \/ (x + j.y)\r\n155     XEQ 00          ; compute (x + j.y) * ( z + j.t)\r\n156     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX POWER OF A COMPLEX NUMBER\r\n;\r\n;           (x+y.j)      z    -t.phi1    j.(z.phi1 + t.ln(r1))\r\n;     (z+t.j)       =  r1  . e        . e\r\n;\r\n;   where:\r\n;         r1   = sqrt(x^2+y^2)\r\n;         phi1 = .... x + y.j ....????\r\n\r\n157     LBL 17          ; [Z2^Z1] operation\r\n\r\n158     XEQ 07          ; get two operands, as (x + j.y) and (z + j.t)\r\n159     R^\r\n160     R^\r\n161     XEQ 33\r\n162     LN\r\n163     XEQ 00          ; compute (x + j.y) * ( z + j.t)\r\n164     E^X\r\n165     P-R\r\n166     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX PARALLEL CIRCUIT, useful in network theory\r\n;\r\n;            Z1 . Z2\r\n; Z1 \/\/ Z2 = -------    {for |Z1+Z2| <> 0}\r\n;            Z1 + Z2\r\n\r\n167     LBL 32          ; [CPAR] operation\r\n168     XEQ 07          ; get two operands, as (x + j.y) and (z + j.t)\r\n169     XEQ 31          ; compute 1 \/ ( x + j.y)\r\n170     R^\r\n171     R^\r\n172     XEQ 31          ; compute 1 \/ ( x + j.y)\r\n173     X<>Y\r\n174     ST+ T\r\n175     RDN\r\n176     +\r\n177     XEQ 31          ; compute 1 \/ ( x + j.y)\r\n\r\n; COPY (x + y.j) TO COMPLEX STACK\r\n\r\n178     LBL 03          ; [PRGM] keycode\r\n179     STO 03\r\n180     X<>Y\r\n181     STO 04\r\n182     X<>Y\r\n183     RTN\r\n\r\n; MULTIPLY TWO COMPLEX NUMBERS subroutine\r\n;\r\n;     (x + y.j) * (z + t.j) = (x + j.y) * (z + j.im2) =\r\n;                           = (x.z - y.t ) + j.(y.x + x.t)\r\n\r\n184     LBL 00\r\n185     STO L\r\n186     R^\r\n187     ST* L\r\n188     X<> Z\r\n189     ST* Z\r\n190     R^\r\n191     ST* Y\r\n192     ST* Z\r\n193     X<> L\r\n194     +\r\n195     X<> Z\r\n196     -\r\n197     RTN\r\n\r\n; COMPLEX COMMON (base 10) and NATURAL (base e) LOGARITHM\r\n;\r\n;     ln(x + y.j) = ln(r) + j.phi\r\n;\r\n;     Z1\r\n;       log(Z2) = ln(Z2) \/ ln(Z1)\r\n\r\n198     LBL 14          ; [LOG(Z)] operation\r\n199     XEQ 08          ; get operand, as (x + j.y) and update LASTZ\r\n200     LN              ; x=ln(M1), y=phi1\r\n201     GTO 00\r\n\r\n202     LBL 15          ; [LN(Z)] operation\r\n203     XEQ 09          ; push (x + y.j) onto complex stack and update LASTZ\r\n204      E              ; x=1\r\n\r\n205     LBL 00\r\n206     RDN\r\n207     XEQ 33\r\n208     LN\r\n209     R^\r\n210     ST\/ Z\r\n211     \/\r\n212     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX COMMON (base 10) and NATURAL (base e) EXPONENTIAL\r\n;\r\n;     (x + j.y)    x              x\r\n;    e          = e .sin(y) + j.e .cos(y)\r\n\r\n213     LBL 19          ; [n^Z] operation\r\n214     XEQ 08          ; get operand, as (x + j.y) and update LASTZ\r\n215     LN\r\n216     GTO 00          ; reuse part of  [E^Z] operation\r\n\r\n217     LBL 20          ; [E^Z] operation\r\n218     XEQ 09          ; push (x + y.j) onto complex stack and update LASTZ\r\n219      E\r\n\r\n220     LBL 00\r\n221     ST* Z\r\n222     *\r\n223     E^X\r\n224     P-R\r\n225     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX EXPONENTIATION WITH REAL EXPONENT n\r\n\r\n226     LBL 18          ; [Z^n] operation\r\n\r\n227     XEQ 08          ; get operand, as (x + j.y) and update LASTZ\r\n228     RDN\r\n229     XEQ 33\r\n230     R^\r\n231     ST* Z\r\n232     Y^X\r\n233     P-R\r\n234     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX ROOT OF REAL NUMBER n\r\n;        __\r\n;     Z1\/         1\/Z1\r\n;     \\\/ Z2   = Z2\r\n;        __\r\n;     n \/        1\/n   j.(phi\/n)\r\n;     \\\/ Z    = M   . e\r\n\r\n235     LBL 13          ; [Z^1\/n] operation\r\n\r\n236     XEQ 08          ; get operand, as (x + j.y) and update LASTZ\r\n237     RDN\r\n238     XEQ 33\r\n239     R^\r\n240     1\/X\r\n241     Y^X\r\n242     STO N\r\n243     RDN\r\n244     2\r\n245     PI\r\n246     *\r\n247     RCL N\r\n248     X<>Y\r\n249     R^\r\n250     ST\/ T\r\n251     ST\/ Y\r\n252     R^\r\n253     R^\r\n254     LBL 05\r\n255     FC? 00\r\n256     P-R\r\n257     XEQ 10          ; display complex number (x + y.j)\r\n258     AON\r\n259     STOP\r\n260     FC? 00\r\n261     XEQ 33\r\n262     R^\r\n263     ST+ Z\r\n264     RDN\r\n265     DSE Z\r\n266     GTO 05          ; loop back to LBL 05\r\n267     P-R\r\n268     AOFF\r\n269     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX SINE, COSECANT, COSINE AND SECANT\r\n;\r\n;     sin( x + j.y) = sin(x).cosh(y) + j.cos(x).sinh(y)\r\n;     cos( x + j.y) = cos(x).cosh(y) - j.sin(x).sinh(y)\r\n;     sinh(x + j.y) = cos(y).sinh(x) + j.sin(y).cosh(x)\r\n;     cosh(x + j.y) = cos(y).cosh(x) + j.sin(y).sinh(x)\r\n;     csc(x + j.y)  = 1 \/ sin( x + j.y)\r\n;     sec(x + j.y)  = 1 \/ cos( x + j.y)\r\n;     csch(x + j.y) = 1 \/ sinh(x + j.y)\r\n;     sech(x + j.y) = 1 \/ cosh(x + j.y)\r\n;\r\n; Flags used:\r\n;     flag 04, indicates [HYP]\r\n;     flag 10, indicates [SIN], otherwise [COS]\r\n;     flag 14, indicates inverse operation (CSC and COS, aka SIN^-1 and COS^-1)\r\n;\r\n; Reference:\r\n;     https:\/\/en.wikipedia.org\/wiki\/Complex_number#Complex_analysis\r\n\r\n270     LBL 28          ; [CSC(Z)] operation\r\n271     SF 14\r\n\r\n272     LBL 23          ; [SIN(Z)] operation\r\n273     SF 10\r\n\r\n274     LBL 29          ; [SEC(Z)] operation\r\n275     FC? 10\r\n276     SF 14\r\n\r\n277     LBL 24          ; [COS(Z)] operation\r\n\r\n278     XEQ 09          ; push (x + y.j) onto complex stack and update LASTZ\r\n279     FS?C 03         ; ARC?\r\n280     GTO 13\r\n281     XEQ 00          ; calculate cos\/sin\/cosh\/sinh\r\n282     ST* T\r\n283     RDN\r\n284     *\r\n285     CHS\r\n286     FC? 04          ; HYP?\r\n287     FS? 10          ; SIN?\r\n288     CHS\r\n289     FC?C 04         ; HYP?\r\n290     FC? 10          ; COS?\r\n291     X<>Y\r\n292     FS?C 14         ; inverse operation?\r\n293     XEQ 31          ;   then compute Z1 = 1 \/ Z1\r\n294     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; COMPLEX TANGENT AND COTANGENT, doesn't support ARC or HYP variations\r\n;\r\n;     tan(x + j.y) = sin(2.x)  \/ ( cosh(2.y) + cos(2.x) ) +\r\n;                    sinh(2.y) \/ ( cosh(2.y) + cos(2.x) ) . j\r\n;     cot(Z) = 1 \/ tan(Z)\r\n;\r\n; Flags used:\r\n;     F03 indicates [ARC]\r\n;     F04 indicates [HYP]\r\n;     F14 indicates inverse operation (COT aka TAN^-1]\r\n\r\n295     LBL 30          ; [COT(Z)] operation\r\n296     SF 14\r\n297     LBL 25          ; [TAN(Z)] operation\r\n298     XEQ 09\r\n299     FS?C 03         ; ARC?\r\n300     GTO 14\r\n301     2               ; multiply x and y by 2\r\n302     ST* Z\r\n303     *\r\n304     XEQ 00          ; calculate cos\/sin\/cosh\/sinh (F04=0, F10=0)\r\n305     R^\r\n306     +\r\n307     ST\/ Z\r\n308     \/               ; answers is now as (x + y.j)\r\n309     FS?C 04\r\n310     X<>Y\r\n311     FS?C 14         ; inverse operation?\r\n312     XEQ 31          ;   then compute Z1 = 1 \/ Z1\r\n313     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n; TRIGONOMIC OPERATIONS HELPER subroutine\r\n;\r\n; Call with:\r\n;   complex number on the stack as (x + y.j).\r\n;   F04 indicates [HYP]\r\n;   F10 indicates [SIN], otherwise [COS]\r\n;\r\n; This operation returns:\r\n;\r\n;           | [HYP]    [HYP]\r\n;           | [SIN]    [COS]    [SIN]   [COS]\r\n;     ------+----------------------------------\r\n; re  y-reg | sin(y)   sin(y)   sin(x)  sin(x)\r\n; re  z-reg | cosh(x)  sinh(x)  cosh(y) sinh(y)\r\n;     ------+----------------------------------\r\n; im  x-reg | cos(y)   cos(y)   cos(x)  cos(x)\r\n; im  t-reg | sinh(x)  cosh(x)  sinh(y) cosh(y)\r\n;\r\n;            x     -x      2.x\r\n;           e  -  e       e    -  1                    1\r\n; sinh(x) = ---------  =  ---------  ,    csch(x) = -------\r\n;                              x                    sinh(x)\r\n;              2            2.e\r\n;\r\n;            x     -x      2.x\r\n;           e  +  e       e    +  1                   1\r\n; cosh(x) = ---------  =  ---------  ,    sech(x) = -------\r\n;                              x                    cosh(x)\r\n;               2           2.e\r\n; Reference:\r\n;     https:\/\/en.wikipedia.org\/wiki\/Hyperbolic_trig_operations\r\n\r\n314     LBL 00\r\n315     FS? 04          ; HYP?\r\n316     X<>Y            ;\r\n317     2\r\n318     RCL Z\r\n319     ST+ X\r\n320     E^X-1\r\n321     ST+ Y\r\n322     R^\r\n323     E^X\r\n324     ST+ X\r\n325     ST\/ Z\r\n326     \/\r\n327     FS? 10          ; SIN? (not COS)\r\n328     X<>Y            ;\r\n329     R^\r\n330     SIN\r\n331     R^\r\n332     COS\r\n333     RTN\r\n\r\n; INVERSE TRIGONOMIC OPERATIONS, ARC and HYP-ARC\r\n;\r\n;     arcsin(x + y.j) = arcsin(b) + j.sign(y).ln(a + sqrt(a^2-1)\r\n;     arccos(x + y.j) = arccos(b) - j.sign(y).ln(a + sqrt(a^2-1))\r\n;     arccsc(Z)  =    arcsin(1\/Z)\r\n;     arcsec(Z)  =    arccos(1\/Z)\r\n;     arcsinh(Z) = -j.arcsin(j.Z)\r\n;     arccosh(Z) =  j.arccos(Z)\r\n;     arccsch(Z) =  j.arccsc(j.Z)\r\n;     arcsech(Z) =  j.arcsec(Z)\r\n;   where\r\n;     a = ( sqrt( (x+1)^2 + y^2 ) + sqrt( (x-1)^2 + y^2) ) \/ 2\r\n;     b = ( sqrt( (x+1)^2 + y^2 ) - sqrt( (x-1)^2 + y^2) ) \/ 2\r\n;     sign(y) returns 1 when y>=0, othewise returns -1\r\n;\r\n; Flags used:\r\n;     F04 indicates [HYP]\r\n;     F10 indicates [SIN], otherwise [COS]\r\n;     F14 indicates inverse operation (CSC and COS, aka SIN^-1 and COS^-1]\r\n;\r\n; Reference:\r\n;     https:\/\/en.wikipedia.org\/wiki\/Inverse_trigonometric_operation\r\n\r\n334     LBL 13\r\n335     FS?C 14         ; inverse operation?\r\n336     XEQ 31          ; compute Z1 = 1 \/ Z1\r\n337     FS? 04          ; HYP flag\r\n338     FC? 10\r\n339     GTO 00\r\n340     X<>Y\r\n341     CHS\r\n342     LBL 00          ; entered with Z1 as (x + y.j)\r\n343     RCL X\r\n344      E\r\n345     ST- Z\r\n346     +\r\n347     X^2\r\n348     X<>Y\r\n349     X^2\r\n350     X<> Z\r\n351     X^2\r\n352     ST+ Z\r\n353     +\r\n354     SQRT\r\n355     STO Z\r\n356     X<>Y\r\n357     SQRT\r\n358     ST- Z\r\n359     +\r\n360     2\r\n361     ST\/ Z\r\n362     \/               ; X holds a;  Y holds b; Z holds y\r\n363     ENTER^\r\n364     X^2\r\n365     SIGN\r\n366     ST- L\r\n367     X<> L\r\n368     SQRT\r\n369     +\r\n370     LN\r\n371     R^\r\n372     SIGN\r\n373     *\r\n374     FC? 10\r\n375     CHS\r\n376     X<>Y\r\n377     FS? 10\r\n378     ASIN\r\n379     FC? 10\r\n380     ACOS            ; Z1 (x + y.j) now holds the answer to simple ARCSIN or ARCCOS\r\n381     XEQ 61\r\n382     FC?C 04\r\n383     GTO 03          ; we're done for non-HYP operations;  copy to complex stack, and return\r\n384     FS? 10          ; for HYP or inverse-HYP operation, there is a little more\r\n385     CHS\r\n386     X<>Y\r\n387     FC? 10\r\n388     CHS\r\n389     GTO 03          ; copy (x + y.j) to complex stack, and return\r\n\r\n390     LBL 14\r\n391     FS?C 14\r\n392     XEQ 31\r\n393     FS? 04\r\n394     X<>Y\r\n395     FS? 04\r\n396     CHS\r\n397      E\r\n398     ENTER^\r\n399     R^\r\n400     ST- Z\r\n401     +\r\n402     R^\r\n403     ST\/ Z\r\n404     \/\r\n405     STO Z\r\n406     X^2\r\n407     RCL Y\r\n408     X^2\r\n409     SIGN\r\n410     ST+ Y\r\n411     ST+ L\r\n412     X<> L\r\n413     \/\r\n414     LN\r\n415     4\r\n416     \/\r\n417     PI\r\n418     R^\r\n419     ATAN\r\n420     XEQ 61\r\n421     R^\r\n422     ATAN\r\n423     XEQ 61\r\n424     +\r\n425     -\r\n426     2\r\n427     \/\r\n428     FS? 04\r\n429     CHS\r\n430     FS?C 04\r\n431     X<>Y\r\n432     GTO 03\r\n\r\n; VIEW COMPLEX NUMBER Zn\r\n\r\n433     LBL 89          ; [VIEWZn] operation\r\n434     RCL 00\r\n435     X<Y?            ; if n > complex stack depth, recall Z1 and return\r\n436     GTO 14          ; get (x + y.j) from complex stack, and return\r\n437     SIGN\r\n438     +\r\n439     ST+ X\r\n440     SIGN\r\n441     CLX\r\n442     RCL IND L       ; recall imaginary part of Zn\r\n443     DSE L\r\n444     RCL IND L       ; recall real part of Zn\r\n445     FS? 00          ; if notation selected\r\n446     XEQ 33          ;   then convert to polar notation\r\n447     XEQ 10          ; display complex number (x + y.j)\r\n448     PSE             ; pause, but allow number input\r\n449     GTO 14          ; get (x + y.j) from complex stack, and return\r\n\r\n; EXCHANGE COMPLEX STACK REGISTERS\r\n\r\n450     LBL 21          ; [Z1<>Z2] operation\r\n451     XEQ 04          ; push (x + y.j) onto complex stack\r\n452     2\r\n453     LBL 26          ; [Z1<>Zn] operation\r\n454     RCL 00\r\n455     X<Y?\r\n456     GTO 14          ; get (x + y.j) from complex stack, and return\r\n457     X<>Y\r\n458     ST+ X\r\n459     1.003002        ; X register holds 1.003002; Y register holds 2.n,\r\n460     CF 02           ; no \"no stack lift\"\r\n461     GTO 00          ; perform register swap and return\r\n\r\n; COMPLEX STACK ROLL, up or down\r\n;\r\n; Does not roll around\r\n; Uses block rotate trick form PPC Journal V10N3p15a\r\n\r\n462     LBL 22          ; [CR^] operation\r\n463     SF 10\r\n464     LBL 27          ; [CRDN] operation\r\n\r\n465     XEQ 04          ; push (x + y.j) onto complex stack\r\n466     3\r\n467     ENTER^\r\n468     5\r\n469     FS? 10          ; CR^?\r\n470     X<>Y\r\n471     RCL 00          ; complex stack depth (csdepth)\r\n472     DSE X\r\n473     ST+ X\r\n474      E3\r\n475     ST\/ Z\r\n476     X^2\r\n477     \/\r\n478     +               ; for CRDN, X holds 0.005 + 2.(csdepth-1)\/1E6; Y holds 3\r\n479     LBL 00\r\n480     +\r\n481     REGSWAP         ; register swap for sss.dddnnn\r\n\r\n; GET (x + y.j) FROM COMPLEX STACK\r\n\r\n482     LBL 14\r\n483     RCL 04          ; imaginary part of Z1\r\n484     RCL 03          ; real part of Z1\r\n485     RTN\r\n\r\n; COMPLEX 1\/Z1\r\n;\r\n; Formula:\r\n;      1             x                 y\r\n;    -------  =  ---------  -  j . ---------\r\n;    x + y.j     x^2 + y^2         x^2 + y^2\r\n;\r\n; doesn't disturb Z and T\r\n486     LBL 31\r\n487     X^2\r\n488     X<>Y\r\n489     STO M\r\n490     ST* X\r\n491     ST+ Y\r\n492     X<> M\r\n493     CHS\r\n494     X<>Y\r\n495     ST\/ Y\r\n496     ST\/ L\r\n497     X<> L\r\n498     RTN\r\n\r\n; GET TWO OPERANDS as (x + j.y) and (z + j.t), 1st operand is from keyboard, otherwise from Z1\r\n; stack management subroutine for operations with two complex number operands\r\n\r\n499     LBL 07\r\n500     XEQ 06          ; get one operand (x + y.j)\r\n501     FC?C 02\r\n502     FC? 22          ; if \"no stack lift\" or no \"input from keyboard\"\r\n503     XEQ 12          ;   then move complex stack down\r\n504     RCL 04          ; get operand (z + t.j) from (what is now) Z1 on the complex stack\r\n505     RCL 03\r\n506     R^\r\n507     R^\r\n508     GTO 00\r\n\r\n; GET OPERAND, as (x + j.y) and UPDATE LASTZ\r\n; stack management subroutine for operations with one complex and one real number operand\r\n\r\n509     LBL 08          ; called with n in register X\r\n510     FS?C 02         ; if \"no stack lift\"\r\n511     XEQ 12          ;   then move complex stack dow\r\n512     RCL 04          ; copy Z1 to LASTZ\r\n513     STO 02\r\n514     RCL 03\r\n515     STO 01\r\n516     RCL Z           ; n in register X, complex operand as (y + z.j)\r\n517     RTN\r\n\r\n; PUSH (x + y.j) ONTO COMPLEX STACK and UPDATE LASTZ\r\n; stack management subroutine for operations with one complex number operand\r\n\r\n518     LBL 09\r\n519     XEQ 04          ; push (x + y.j) onto complex stack\r\n520     LBL 00\r\n521     STO 01          ; copy to LASTZ1\r\n522     X<>Y\r\n523     STO 02\r\n524     X<>Y\r\n525     RTN\r\n\r\n; COMPLEX ALPHA\/ALPHA ROUTINE\r\n\r\n526     LBL 04          ; [CVIEW] key code [ALPHA]\r\n527     FC?C 02\r\n528     FC? 22\r\n529     FS? 30          ; if both \"no stack lift\" and \"keyboard input\"\r\n530     XEQ 11          ;   then move complex stack up, Z1 > Z2 > Z3 > Z4 > Z5 > Z6\r\n\r\n531     XEQ 06          ; get one operand (x + y.j)\r\n532     STO 03\r\n533     X<>Y\r\n534     STO 04\r\n535     X<>Y\r\n536     RTN\r\n\r\n; GET ONE OPERAND (x + y.j) from keyboard input, otherwise from Z1 on the complex stack \r\n\r\n537     LBL 06\r\n538     FS? 00          ; if keyboard input in polar mode, then convert it to Rectangular\r\n539     FC? 22\r\n540     FS? 30\r\n541     P-R\r\n542     FS? 22          ; keyboard input?\r\n543     RTN\r\n544     RCL 04\r\n545     RCL 03\r\n546     RTN\r\n\r\n; DISPLAY, in rectangular mode \"x + y.j\", or in polar mode \"x <y\" with the angle in degrees\r\n; subroutine that views both parts of the complex number in X and Y in condensed format\r\n; in the display, without disturbing Z, T or the display mode.  ENG 2 was chosen because, to\r\n; display complex numbers in analog electronics.\r\n\r\n547     LBL 10          ; Z1 = x + j.y\r\n548     SIGN            ; save X in LASTX\r\n549     RDN\r\n550     CLA\r\n551     RCLFLAG         ; save flags\r\n552     FIX 2\r\n553     ARCL L\r\n554     RDN\r\n555     FS? 00          ; in Rectangular notation append real part,\r\n556     GTO 00          ; and '+' sign if imaginary part is positive\r\n557     X<0?\r\n558     GTO 00\r\n559     >\"+\"\r\n560     LBL 00\r\n561     R^\r\n562     FS? 00          ; for Polar notation, append angle ('<') sign\r\n563     >\"<\"\r\n564     ARCL Y\r\n565     FC? 00\r\n566     >\"J\"            ; in Rectangular notation append 'J' char\r\n567     AVIEW\r\n568     STOFLAG         ; restore flags\r\n569     X<> L           ; restore X from LASTX\r\n570     RTN\r\n\r\n; ROLL THE COMPLEX STACK, by one position up or down\r\n; subroutine to shift the stack up or down by one complex register\r\n;\r\n; Does not roll around like RDN or R^\r\n; Does not enter or retrieve data.\r\n;\r\n; Example:\r\n;                  | stack lift | stack drop\r\n;    --------------+------------+------------\r\n;    Z6    6 + 6j  |   5 + 5j   |   6 + 6j\r\n;    Z5    5 + 5j  |   4 + 4j   |   6 + 6j\r\n;    Z4    4 + 4j  |   3 + 3j   |   5 + 5j\r\n;    Z3    3 + 3j  |   2 + 2j   |   4 + 4j\r\n;    Z2    2 + 2j  |   1 + 1j   |   3 + 3j\r\n;    Z1    1 + 1j  |   1 + 1j   |   2 + 2j\r\n\r\n571     LBL 11          ; stack lift, Z1 > Z2 > Z3 > Z4 > Z5 > Z6\r\n572     3.005           ;   typically when a new number is moved into Z1\r\n573     GTO 00\r\n574     LBL 12          ; stack drop, Z1 < Z2 < Z3 < Z4 < Z5 < Z6\r\n575     5.003           ;   typically when a operation combines Z1 and Z2\r\n576     LBL 00\r\n577     SIGN\r\n578     RCL 00          ; complex stack depth (csdepth)\r\n579     X<>Y\r\n580     ST- Y\r\n581     RDN\r\n582     ST+ X\r\n583      E6\r\n584     ST\/ Y\r\n585     X<> L\r\n586     +               ; register X is in sss.dddnnn format\r\n587     REGMOVE         ; copies 2*(csdepth-1) registers from sss to ddd\r\n588     RDN\r\n589     RTN\r\n\r\n590     LBL 33\r\n591     R-P\r\n592     LBL 61\r\n593     R^\r\n594     STO N\r\n595     R^\r\n596     STO M\r\n597     RDN\r\n598     X<> Z\r\n599     PI\r\n600     +\r\n601     PI\r\n602     +\r\n603     RCL 15\r\n604     X<>Y\r\n605     LBL 38\r\n606     X<Y?\r\n607     GTO 00\r\n608     PI\r\n609     -\r\n610     PI\r\n611     -\r\n612     GTO 38\r\n\r\n613     LBL 00\r\n614     RCL Z\r\n615     RCL N\r\n616     RCL M\r\n617     R^\r\n618     R^\r\n619     RTN\r\n\r\n; ADJUST BRANCH CUT\r\n\r\n620     LBL 35\t\t; &#91;BCUT&#93;\r\n621     RCL 15\r\n622     \"BC<=\"\r\n623     ARCL X\r\n624     >\"?\"\r\n625     PROMPT\r\n626     STO 15\r\n627     R^\r\n628     R^\r\n629     END<\/pre>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h2>\r\n    References\r\n<\/h2>\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table borders=\"0\">\r\n            <tr>\r\n                <td valign=\"top\">[1]<\/td>\r\n                <td valign=\"top\"><\/td>\r\n                <td valign=\"top\">COMPLEX ARITHMETIC<br \/>\r\n                Frans de Vries, May 1985<br \/>\r\n                <a href=\"http:\/\/www.hp41.org\/LibView.cfm?Command=Image&#038;ItemID=229&#038;FileID=6443\">PPC Journal V12N5, page 4-9<\/a><\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td valign=\"top\">[2]<\/td>\r\n                <td valign=\"top\"><\/td>\r\n                <td valign=\"top\"><a href=\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-xmem-4426\">Complex Arithmetic in Extended Memory for HP-41cv\/cx<\/a>\r\n                Coert Vonk, 1986<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td valign=\"top\">[3]<\/td>\r\n                <td valign=\"top\"><\/td>\r\n                <td valign=\"top\"><a href=\"https:\/\/mathworld.wolfram.com\/BranchCut.html\">Branch Cut<\/a>\r\n                Wolfram.com<\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41. You can adjust the branch cut in the complex plane.","protected":false},"author":41,"featured_media":6617,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[216],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Complex arithmetic with adjustable branch cut on HP-41 - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Complex arithmetic with adjustable branch cut on HP-41 - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2012-03-03T17:06:57+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-25T23:43:14+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png\" \/>\n\t<meta property=\"og:image:width\" content=\"300\" \/>\n\t<meta property=\"og:image:height\" content=\"300\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"13 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png\",\"width\":300,\"height\":300},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#webpage\",\"url\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032\",\"name\":\"Complex arithmetic with adjustable branch cut on HP-41 - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#primaryimage\"},\"datePublished\":\"2012-03-03T17:06:57+00:00\",\"dateModified\":\"2022-04-25T23:43:14+00:00\",\"description\":\"Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Calculator (HP-41)\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/hp41\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Complex arithmetic with adjustable branch cut on HP-41\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Complex arithmetic with adjustable branch cut on HP-41\",\"datePublished\":\"2012-03-03T17:06:57+00:00\",\"dateModified\":\"2022-04-25T23:43:14+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#webpage\"},\"wordCount\":2671,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png\",\"articleSection\":[\"Calculator (HP-41)\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"/\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Complex arithmetic with adjustable branch cut on HP-41 - Coert Vonk","description":"Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032","og_locale":"en_US","og_type":"article","og_title":"Complex arithmetic with adjustable branch cut on HP-41 - Coert Vonk","og_description":"Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41.","og_url":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032","og_site_name":"Coert Vonk","article_published_time":"2012-03-03T17:06:57+00:00","article_modified_time":"2022-04-25T23:43:14+00:00","og_image":[{"width":300,"height":300,"url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"13 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#primaryimage","inLanguage":"en-US","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png","width":300,"height":300},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#webpage","url":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032","name":"Complex arithmetic with adjustable branch cut on HP-41 - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#primaryimage"},"datePublished":"2012-03-03T17:06:57+00:00","dateModified":"2022-04-25T23:43:14+00:00","description":"Scientific calculator program to do complex arithmetic with adjustable branch cut on HP-41.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coert.vonk.one\/category\/sw"},{"@type":"ListItem","position":3,"name":"Calculator (HP-41)","item":"https:\/\/coert.vonk.one\/category\/sw\/hp41"},{"@type":"ListItem","position":4,"name":"Complex arithmetic with adjustable branch cut on HP-41"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Complex arithmetic with adjustable branch cut on HP-41","datePublished":"2012-03-03T17:06:57+00:00","dateModified":"2022-04-25T23:43:14+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#webpage"},"wordCount":2671,"commentCount":0,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/sw\/hp41\/complex-arithmetic-branchcut-5032#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/complex-arithmetic-xmem.png","articleSection":["Calculator (HP-41)"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"/\/author\/cvonk"}]}},"_links":{"self":[{"href":"/\/wp-json\/wp\/v2\/posts\/5032"}],"collection":[{"href":"/\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"/\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/comments?post=5032"}],"version-history":[{"count":5,"href":"/\/wp-json\/wp\/v2\/posts\/5032\/revisions"}],"predecessor-version":[{"id":32633,"href":"/\/wp-json\/wp\/v2\/posts\/5032\/revisions\/32633"}],"wp:featuredmedia":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/media\/6617"}],"wp:attachment":[{"href":"/\/wp-json\/wp\/v2\/media?parent=5032"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"/\/wp-json\/wp\/v2\/categories?post=5032"},{"taxonomy":"post_tag","embeddable":true,"href":"/\/wp-json\/wp\/v2\/tags?post=5032"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}