{"id":26806,"date":"2019-09-12T17:45:38","date_gmt":"2019-09-13T00:45:38","guid":{"rendered":"https:\/\/coertvonk.com\/?p=26806"},"modified":"2022-04-17T18:04:45","modified_gmt":"2022-04-18T01:04:45","slug":"turning-on-the-light-the-hard-way","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806","title":{"rendered":"Google Assistant switches Sonoff S20"},"content":{"rendered":"<p>\r\n    Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant. Sure, you can run to the store and purchase a preconfigured light switch, but what&#8217;s the fun in that and more importantly these switches with their close-source software require access to your home network. \r\n<\/p>\r\n<p>\r\n    Achieving this simple level of automation took more doing than I expected.  By sharing my notes, I hope you can clear the hurdles with ease.\r\n<\/p>\r\n\r\n<h2>\r\n    Goal\r\n<\/h2>\r\n<p>\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/simple-flow-copy2.svg\">\r\n                    <img  title=\"\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/simple-flow-copy2.svg\" alt=\"simplified flow diagram\" width=\"550\" class=\"wp-image-26898\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Simplified flow diagram\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n\r\n    Triggered with the phrase \u201cHey Google\u201d, the Google Assistant is able to feed the words that follow into its database of applets, one of which we will create. Once the applet recognizes the instruction, it sends a command towards our Sonoff smart outlet.  Details of this conversation are something like the one shown in the diagram below.\r\n<\/p>\r\n\r\n<h2>\r\n    Design\r\n<\/h2>\r\n<p>\r\n    We use a $10 Sonoff smart outlet and change the firmware so it can be controlled using MQTT.  To connect Google Assistant to MQTT, we use Kappelt&#8217;s gBridge. \r\n\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/sonoff-s20.png\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/sonoff-s20.png\" alt=\"Sonoff S20\" width=\"200\" class=\"wp-image-26873\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/sonoff-s20.png 1019w, https:\/\/coertvonk.com\/wp-content\/uploads\/sonoff-s20-400x278.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/sonoff-s20-768x533.png 768w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Sonoff S20\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Required hardware:\r\n\r\n    <ul>\r\n        <li>\r\n            Google Assistant enabled device, such as a Google Home or Android Phone.\r\n        <\/a>\r\n        <li>\r\n            <a href=\"https:\/\/itead.cc\/product\/sonoff-s26-wifi-smart-plug\/\" rel=\"noopener noreferrer\" target=\"_blank\">Sonoff S20<\/a> smart outlet connected to e.g. a lamp (any model supported by Tasmota will do),\r\n        <\/li>\r\n        <li>\r\n            a router that can serve as a <a href=\"\/sw\/networking\/dd-wrt-reverse-proxy-https-asus-rt-ac68-pound-letsencrypt-23660\">reverse proxy<\/a> such as DD-WRT,\r\n        <\/li>\r\n        <li>\r\n            a lightweight computer such as the Raspberry Pi 3.\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/circle-data-flow-copy3.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/circle-data-flow-copy3.svg\" alt=\"data flow diagram\" width=\"700\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Data flow diagram (click to enlarge)\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h2>\r\n    Implementation\r\n<\/h2>\r\n<p>\r\n    We will work our way up starting with the Smart Switch all the way to Google Assistant.\r\n<\/p>\r\n\r\n<h3>\r\n    Make Sonoff S20 respond to messages (Tasmota)\r\n<\/h3>\r\n<p>\r\n    The key ingredient of making the Sonoff S20 work with Google Assistant is the MQTT protocol. The abbreviation MQTT stands for Message Queue Telemetry Transport, where the keyword is telemetry, or remote monitoring. By creating topics, you can enable different parts of your application to subscribe to specific streams of data.  The Tasmota firmware includes this MQTT protocol.\r\n\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Tasmota-copy.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Tasmota-copy.svg\" alt=\"Tasmato message flow\" width=\"550\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Tasmato message flow\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The process of flashing new firmware is described in videos such on <a href=\"https:\/\/www.youtube.com\/watch?v=5k_35ppDPho\">youtube.com<\/a> and <a href=\"https:\/\/github.com\/arendst\/Tasmota\">Theo Arend&#8217;s Wiki<\/a>.  In turn, my short summary:\r\n<\/p>\r\n\r\n<h4>\r\n    Flash the firmware\r\n<\/h4>\r\n<p>  \r\n    Here we use the Python based flash tool.\r\n\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Sonoff-S20-FTDI-Friend-lab-pwr-400x400.jpg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Sonoff-S20-FTDI-Friend-lab-pwr-400x400.jpg\" alt=\"Sonoff S20, FTDI Friend, lab power supply\" width=\"200\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Sonoff S20, FTDI Friend, lab power supply\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Follow the steps below.\r\n    <ol>\r\n        <li>Make sure Python 2.7 is installed on your computer<\/li>\r\n        <li>Flash tool\r\n        <ul>\r\n            <li>Download <a href=\"https:\/\/github.com\/espressif\/esptool\/releases\"><code>esptool<\/code><\/a> and expand the archive.<\/li>\r\n            <li>Install the dependencies: <code>python setup.py install<\/code><\/li>\r\n        <\/ul>\r\n        <\/li>\r\n        <li>Connect serial port\r\n        <ul>\r\n            <li><b>Unplug the Sonoff S20 from the outlet<\/b>, take the cover off and connect it to your computer using a USB\/Serial adapter. Make sure the USB\/Serial adapter can supply enough current to the ESP SoC.<\/li>\r\n            <li>Note the serial port that was your operating system assigned (e.g. <code>COM10<\/code>).<\/li>\r\n            <li>Counterintuitive, I had to connect RX-RX and TX-TX.<\/li>\r\n        <\/ul>\r\n        <\/li>\r\n        <li>Tasmota firmware\r\n        <ul>\r\n            <li>Download the Tasmota firmware <a href=\"https:\/\/github.com\/arendst\/Tasmota\/releases\"><code>sonoff.bin<\/code><\/a><\/li>    \r\n            <li>Put the Sonoff S20 in <code>flash mode<\/code> by holding down the push button while connecting the serial port (and hence its power supply).<\/li>\r\n            <li>Clear the flash on the Sonoff S20: <code>esptool.py --port COM10 erase_flash<\/code><\/li>\r\n            <li>Put the Sonoff S20 back in <code>flash mode<\/code>.<\/li>\r\n            <li>Flash the firmware: <code>esptool.py --port COM10 write_flash -fs 1MB -fm dout 0x0 sonoff.bin<\/code><\/li>\r\n            <li>Disconnect and reassemble the Sonoff S20.<\/li>\r\n        <\/ul>\r\n        <\/li>    \r\n    <\/ol>\r\n<\/p>\r\n\r\n<h4>\r\n    Boot\r\n<\/h4>\r\n<p>\r\n    The Wifi Credentials for the Tasmota firmware are configured by putting it in Access Point mode.\r\n    <ol>\r\n        <li>Plug it into the wall and press its button 5 times.<\/li>\r\n        <li>On a mobile device, connect to <code>ESP_xxxx<\/code> via WiFi.  Make sure the\r\n        device stays connected (some will auto-connect to a different network if no internet\r\n        connection is detected).<\/li>\r\n        <li>Configure the Sonoff S20 by connecting to its AP WiFi Network, and use a browser to connect to http:\/\/192.168.4.1 <\/li>\r\n        <li>Setup the Sonoff S20 by scanning for Wifi networks, and configuring its credentials.  While you are at it, set the hostname (e.g. <code>sonoff-socket1<\/code>).  Save and wait for it to reboot.<\/li>\r\n        <li>Connect your mobile device back to your regular WiFi network.<\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h4>\r\n    Configure\r\n<\/h4>\r\n<p>\r\n    By now the Sonoff S20 should have connected to your WiFi.  We connect to its web interface and finish the configuration.\r\n    <ol>\r\n        <li>Open your browser at the IP name\/address assigned, http:\/\/sonoff-socket1<\/li>\r\n        <li>Test by pressing <code>Toggle<\/code> what should switch the relay on\/off.\r\n        <li>Configure module\r\n        <ul>\r\n            <li>Configuration > Configure Module > Module type = <code>Sonoff S2X<\/code><\/li>\r\n            <li>Save and wait for reboot<\/li>\r\n        <\/ul>\r\n        <\/li>\r\n        <li>Configure MQTT\r\n        <ul>\r\n            <li>host = IP name\/address of your Raspberry Pi<\/li>\r\n            <li>port = 1883<\/li>\r\n            <li>topic = <code>sonoff\/socket1<\/code><\/li>\r\n            <li>full topic = <code>%prefix%\/%topic%\/<\/code><\/li>\r\n            <li>Save and wait for reboot<\/li>\r\n        <\/ul>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    MQTT Message Broker (Mosquitto)\r\n<\/h3>\r\n<p>\r\n    As mentioned before, the key protocol is MQTT. In this example, the message runs on a Raspberry Pi on our LAN).\r\n\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Mosquitto-copy.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Mosquitto-copy.svg\" alt=\"Mosquitto message flow\" width=\"550\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Mosquitto message flow\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    To start, install the Eclipse Mosquitto implementation:\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">sudo apt update\r\nsudo apt install -y mosquitto mosquitto-clients\r\nsudo systemctl enable mosquitto.service\r\nsudo systemctl start mosquitto.service\r\nnetstat -lt  # ensure it listens on port 1883<\/pre>\r\n<\/p>\r\n<p>\r\n    Test to see if the MQTT broker is listening on port 1883, using <code>netstat -lt<\/code>.  When you listen to all topics (<code>mosquitto_sub -t '#' -v<\/code>), you should see a periodic status report from the Sonoff S20, such as <code>tele\/sonoff\/socket1\/LWT Online<\/code>.\r\n<\/p>\r\n<p>\r\n    Control the relay on the Sonoff S20, by publishing values to the topic <code>cmnd\/sonoff\/socket1\/power<\/code>\r\n    <ul>\r\n        <li><code>mosquitto_pub -t 'cmnd\/sonoff\/socket1\/power' -m 1<\/code><\/li>\r\n        <li><code>mosquitto_pub -t 'cmnd\/sonoff\/socket1\/power' -m 0<\/code><\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    <b>At this point the roads diverge.<\/b>  The straight and easy path uses the hosted service <a href=\"https:\/\/doc.gbridge.io\/\">gbridge.io<\/a>.  You would continue with their Getting Started guide and be done.  The other choice is to host the MQTT\/Assistant bridge yourself as described in the remainder of this document.\r\n<\/p>\r\n<p>\r\n    This other path is windy but might be more interesting.  It involves hosting the MQTT\/Assistant bridge.  This approach is loosely based on <a href=\"https:\/\/doc.gbridge.io\/selfHosted\/hostItYourself.html\">Self-Hosted gBridge<\/a>, with various changes based on e.g. community contributions.  Without further adieu, the self-hosted bridge is described in the remainder of this document and requires:\r\n    <ul>\r\n        <li>A router you have control over, and can function as a reverse proxy (e.g. DD-WRT).<\/li>\r\n        <li>A public domain name for your router<\/li>\r\n        <li>An SSL certificate for the router (e.g. LetsEncrypt)<\/li>\r\n        <li>A computer that is always on (e.g. Raspberry Pi 3)<\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3 id=\"traverse\">\r\n    Traversing the Router\r\n<\/h3>\r\n<p>\r\n    Google Assistant accesses our MQTT server through our router using HTTPS.  This router therefore must have a public DNS name and a certificate for HTTPS and support reverse proxy.  The reverse proxy translates between Google Assistant&#8217;s HTTPS and HTTP on our LAN.  Instead of the reverse proxy, it might be possible to forward specific ports and do the HTTPS\/HTTP conversion on the Raspberry Pi.\r\n\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Router-copy.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Router-copy.svg\" alt=\"Router message flow\" width=\"550\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Router message flow\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    For this example, we assume a router with DD-WRT firmware that includes <code>dnsmasq<\/code> and <code>pound<\/code>.\r\n<\/p>\r\n\r\n<h4>\r\n    Public DNS name\r\n<\/h4>\r\n<p>\r\n    Start by giving your router a public DNS name.  Google Assistant uses this name when sending commands towards our MQTT server.  In this example, we make a subdomain under an existing web domain.  Another approach would be to use a DDNS service.\r\n<\/p>\r\n<p>\r\n    At your DNS provider, use their DNS Zone Editor to add the subdomain <code>mqtt<\/code>\r\n\r\n    <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">mqtt.domainname.com 1440 IN A your_rtr_public_ip_addr<\/pre>\r\n\r\n    This may take up to 72 hours to propagate.  If you haven&#8217;t done so already, convert your domain&#8217;s certificate to a <i>wildcard certificate<\/i> and download it.  The wild card certificate can be used for of your subdomains.\r\n<\/p>\r\n\r\n<h4>\r\n    Certificate for HTTPS\r\n<\/h4>\r\n<p>\r\n    For Google Assistant to be able verify the identity of your MQTT server we need to install the wildcard certificate that we downloaded in the previous step.  Concatenate the private key, certificate and CA certificate into <code>\/jffs\/etc\/pound\/yourdomain.pem<\/code>\r\n<\/p>\r\n\r\n<h4>\r\n    Reverse proxy\r\n<\/h4>\r\n<p>\r\n    As said, the reverse proxy translates between Google Assistant&#8217;s HTTPS and HTTP on our LAN. This way only your router needs to understand HTTPS.  We will configure it so, that when the router receives an HTTPS (or HTTP) request for URL <code>https:\/\/mqtt.yourdomain.com\/gapi<\/code>, it will forward it as HTTP to the Raspberry Pi.  \r\n<\/p>\r\n<p>\r\n    For the reverse proxy we&#8217;ll loosely follow <a href=\"https:\/\/coertvonk.com\/sw\/networking\/dd-wrt-reverse-proxy-https-asus-rt-ac68-pound-letsencrypt-23660\">DD-WRT Reverse Proxy and HTTPS<\/a>.\r\n<p>\r\n<p>\r\n    To get up and running, we need the binaries, a script that starts it and configuration files. These files are available through <a href=\"https:\/\/github.com\/sandervonk\/esp8266-infrared\">this GitHub page<\/a>. The scripts are based on <a href=\"https:\/\/forum.dd-wrt.com\/phpBB2\/viewtopic.php?t=37958\">Frater&#8217;s post<\/a>.\r\n\r\n    <ol>\r\n        <li>\r\n            <b>Enable JFFS partition<\/b>. From the router&#8217;s GUI, enable JFFS (Administration \u00bb Management). On first use, check the box to &#8220;clean internal flash storage&#8221;. Reboot as needed.\r\n        <\/li>    \r\n        <li>\r\n            Configure DNSMasq on your router, to always give the same name and IP address (based on MAC) to the Sonoff S20 and Raspberry Pi.  This example assume these names are <code>sonoff-socket1<\/code> and <code>mqtt<\/code>.\r\n        <\/li>\r\n        <li>\r\n            <b>Pound binaries<\/b>. Our router&#8217;s firmware didn&#8217;t include <code>pound<\/code> binaries, so we copied it from an older firmware (kongac&#8217;s r33010M)\r\n\r\n            <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">scp rtr2:\/usr\/sbin\/pound rtr2:usr\/sbin\/poundctl \/jffs\/sbin\/\r\nscp rtr2:\/usr\/lib\/libssl.so.1.0.0 rtr2:\/usr\/lib\/libcrypto.so.1.0.0 \/jffs\/lib<\/pre>\r\n        <\/li>\r\n        <li>\r\n            <b>Install startup script<\/b>. Copy the script <code>\/jffs\/sbin\/pound.sh<\/code> and its helper <code>write_pound_cfg<\/code> from GitHub.\r\n        <\/li>\r\n        <li>\r\n            <b>Configure ports to listen on<\/b>. The file <code>\/jffs\/etc\/pound\/pound.pt1<\/code> specifies what ports to listen at.  The example below uses port 80 and 443, so make sure they are not already in use for the DD-WRT UI (change dd-wrt web admin port).\r\n\r\n            <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">TimeOut         120\r\nAlive           30\r\nControl         &quot;\/tmp\/pound.ctl&quot;\r\n\r\nListenHTTPS\r\n        Address 0.0.0.0\r\n        Port 443\r\n        xHTTP 1\r\n        Cert &quot;\/jffs\/etc\/pound\/yourdomain.pem&quot;<\/pre>\r\n        <\/li>\r\n     <li>\r\n         <b>Configure forward rules<\/b>. The file <code>\/jffs\/etc\/pound\/pound.pt2<\/code> specifies where to forward the HTTP request to.\r\n\r\n        <pre class=\"brush: plain; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">Service &quot;mqtt&quot;\r\n                HeadRequire &quot;Host:.mqtt.yourdomain.com.*&quot;\r\n                Url &quot;\/gapi.*&quot;\r\n                BackEnd\r\n                        Address ip_address_of_your_rpi\r\n                        Port 8080\r\n                End\r\n        End\r\nEnd\r\nListenHTTP\r\n        Address 0.0.0.0\r\n        Port 80\r\n        xHTTP 1\r\n        Service &quot;mqtt&quot;\r\n                HeadRequire &quot;Host:.mqtt.yourdomain.com.*&quot;\r\n                Url &quot;\/gapi.*&quot;\r\n                BackEnd\r\n                        Address ip_address_of_your_rpi\r\n                        Port 8080\r\n                End\r\n        End\r\nEnd<\/pre>\r\n        <\/li>\r\n        <li>\r\n            <b>Start <code>pound<\/code><\/b> using <code>\/jffs\/sbin\/pound.sh start<\/code>\r\n        <\/li>\r\n        <li>\r\n            <b>Pointing a web browser to either<\/b>\r\n            <ul>\r\n                <li><code>https:\/\/mqtt.yourdomainhome.com\/gapi<\/code><\/li>\r\n                <li><code>http:\/\/mqtt.yourdomainhome.com\/gapi<\/code><\/li>\r\n            <\/ul>\r\n            Since we haven&#8217;t setup the HTTP\/MQTT bridging software, you will not get the page requested.  The name should however resolve and eventually you&#8217;ll get <code>The service is not available. Please try again later<\/code>.\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h3>\r\n    Adding a skill to Google Assistant\r\n<\/h3>\r\n<p>\r\n    Before we can setup the HTTP\/MQTT bridge, we need to generate some identifiers on Google Cloud.  To do so, we roughly follow the guide from <a href=\"https:\/\/doc.gbridge.io\/selfHosted\/hostItYourself.html\">Kappelt&#8217;s Self-Hosted gBridge<\/a>. \r\n\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Assistant-copy.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Assistant-copy.svg\" alt=\"Google Assistant message flow\" width=\"550\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Google Assistant message flow\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    To get started, head over <a href=\"https:\/\/accounts.google.com\/ServiceLogin?passive=1209600&#038;osid=1&#038;continue=https:\/\/console.actions.google.com\/&#038;followup=https:\/\/console.actions.google.com\/\">Google Actions Console<\/a> using the same account that you use for Google Home. \r\n<\/p>\r\n<p>\r\n    <ol>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?passive=1209600&#038;osid=1&#038;continue=https:\/\/console.actions.google.com\/&#038;followup=https:\/\/console.actions.google.com\/\"><svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\" x=\"0px\" y=\"0px\" width=\"16px\" height=\"16px\" viewbooks=\"941 531.5 16 16\" enable-background=\"new 941 531.5 16 16\" xml:space=\"preserve\"><g><path fill=\"#4285F4\" d=\"M945.09,531.598c3.578-0.655,6.563,2.045,5.702,5.902c-1.285,5.756-10.887,4.248-9.403-2.401 C941.758,533.448,943.148,531.954,945.09,531.598z\"\/><path fill=\"#EA4335\" d=\"M955.494,536.7c0.669,0.452,1.244,1.314,1,2.601c-0.499,2.631-5.453,2.322-4.801-1.2 C951.861,537.19,953.646,535.453,955.494,536.7z\"\/><path fill=\"#FBBC05\" d=\"M953.493,541.902c2.204-0.355,4.312,1.828,3.201,4.102c-1.5,3.072-6.84,1.02-5.202-2.602 c0.053-0.117,0.312-0.955,1.8-1.4C953.376,541.977,953.393,541.918,953.493,541.902z\"\/><\/g><\/svg> Actions<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">\u2630<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">New project<\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n                <li>\r\n                    Project name = <code>gBridge<\/code>\r\n                <\/li>\r\n                <li>\r\n                    Development experience = <code>Smart Home<\/code> \u00bb <code>Smart Home<\/code>\r\n                <\/li>\r\n                <li>\r\n                    Name your Smart Home action\r\n                    <ul>\r\n                        <li>Display name = <i>whatever it accepts is fine<\/i>. <span class=\"key-press-blue-inverted\">Save<\/span><\/li>\r\n                        <li>Return to previous web page<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    Setup account linking\r\n                    <ul>\r\n                        <li><code>No, I only want to allow account creation on my website<\/code> <span class=\"key-press-blue-inverted\">Next<\/span><\/li>\r\n                        <li>Linking type = OAuth, Implicit <span class=\"key-press-blue-inverted\">Next<\/span><\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    OAuth Client Information\r\n                    <ul>\r\n                        <li>Client ID issued by your Action to Google = <i>any random id that you generate<\/i><\/code>, write down this <b>Account Linking Client ID<\/b>\r\n                        <li>Authorization URL = <code>https:\/\/mqtt.yourdomain.com\/gapi\/auth<\/code><\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>\r\n                    Configure your client (optional)\r\n                    <ul>\r\n                        <li><i>Skip this<\/i> <span class=\"key-press-blue-inverted\">Next<\/span><\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n                <li>Testing instructions\r\n                    <ul>\r\n                        <li><i>Skip this<\/i> <span class=\"key-press-blue-inverted\">Save<\/span><\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n            <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?passive=1209600&#038;osid=1&#038;continue=https:\/\/console.actions.google.com\/&#038;followup=https:\/\/console.actions.google.com\/\"><svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\" x=\"0px\" y=\"0px\" width=\"16px\" height=\"16px\" viewBox=\"941 531.5 16 16\" enable-background=\"new 941 531.5 16 16\" xml:space=\"preserve\"><g><path fill=\"#4285F4\" d=\"M945.09,531.598c3.578-0.655,6.563,2.045,5.702,5.902c-1.285,5.756-10.887,4.248-9.403-2.401 C941.758,533.448,943.148,531.954,945.09,531.598z\"\/><path fill=\"#EA4335\" d=\"M955.494,536.7c0.669,0.452,1.244,1.314,1,2.601c-0.499,2.631-5.453,2.322-4.801-1.2 C951.861,537.19,953.646,535.453,955.494,536.7z\"\/><path fill=\"#FBBC05\" d=\"M953.493,541.902c2.204-0.355,4.312,1.828,3.201,4.102c-1.5,3.072-6.84,1.02-5.202-2.602 c0.053-0.117,0.312-0.955,1.8-1.4C953.376,541.977,953.393,541.918,953.493,541.902z\"\/><\/g><\/svg> Actions<\/a><\/li>\r\n            <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">\u2630<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">Overview<\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n            <li>Add action\r\n                <ul>\r\n                    <li>Fulfillment = <code>https:\/\/mqtt.yourdomain.com\/gapi<\/code> <span class=\"key-press-blue-inverted\">Save<\/span><\/li>\r\n                <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?passive=1209600&#038;osid=1&#038;continue=https:\/\/console.actions.google.com\/&#038;followup=https:\/\/console.actions.google.com\/\"><svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\" x=\"0px\" y=\"0px\" width=\"16px\" height=\"16px\" viewBox=\"941 531.5 16 16\" enable-background=\"new 941 531.5 16 16\" xml:space=\"preserve\"><g><path fill=\"#4285F4\" d=\"M945.09,531.598c3.578-0.655,6.563,2.045,5.702,5.902c-1.285,5.756-10.887,4.248-9.403-2.401 C941.758,533.448,943.148,531.954,945.09,531.598z\"\/><path fill=\"#EA4335\" d=\"M955.494,536.7c0.669,0.452,1.244,1.314,1,2.601c-0.499,2.631-5.453,2.322-4.801-1.2 C951.861,537.19,953.646,535.453,955.494,536.7z\"\/><path fill=\"#FBBC05\" d=\"M953.493,541.902c2.204-0.355,4.312,1.828,3.201,4.102c-1.5,3.072-6.84,1.02-5.202-2.602 c0.053-0.117,0.312-0.955,1.8-1.4C953.376,541.977,953.393,541.918,953.493,541.902z\"\/><\/g><\/svg> Actions<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">\u2630<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">Test<\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n                <li>Set your Language<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    Continue on <a href=\"https:\/\/accounts.google.com\/ServiceLogin?service=cloudconsole&#038;passive=1209600&#038;osid=1&#038;continue=https:\/\/console.cloud.google.com\/&#038;followup=https:\/\/console.cloud.google.com\/\">Google Cloud<\/a> with the following steps\r\n    <ol>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?service=cloudconsole&#038;passive=1209600&#038;osid=1&#038;continue=https:\/\/console.cloud.google.com\/&#038;followup=https:\/\/console.cloud.google.com\/\">Cloud<\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n                <li>Select your project (from the <code>All<\/code> list)<\/b>\r\n                <li>Project ID = write down this <b>Google Project ID<\/b>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?service=cloudconsole&#038;passive=1209600&#038;osid=1&#038;continue=https:\/\/console.cloud.google.com\/&#038;followup=https:\/\/console.cloud.google.com\/\">Cloud<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?service=cloudconsole&#038;passive=1209600&#038;osid=1&#038;continue=https:\/\/console.cloud.google.com\/&#038;followup=https:\/\/console.cloud.google.com\/\">\u2630<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">APIs &#038; Services<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">Dashboard<\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n                <li><span class=\"key-press-blue-inverted\">+ ENABLE APS AND SERVICES<\/span><\/li>\r\n                <li><code>HomeGraph API<\/code><\/li>\r\n                <li><span class=\"key-press-blue-inverted\">ENABLE<\/span><\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?service=cloudconsole&#038;passive=1209600&#038;osid=1&#038;continue=https:\/\/console.cloud.google.com\/&#038;followup=https:\/\/console.cloud.google.com\/\">Cloud<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"https:\/\/accounts.google.com\/ServiceLogin?service=cloudconsole&#038;passive=1209600&#038;osid=1&#038;continue=https:\/\/console.cloud.google.com\/&#038;followup=https:\/\/console.cloud.google.com\/\">\u2630<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">APIs &#038; Services<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">Credentials<\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n                <li><span class=\"key-press-blue-inverted\">Create credentials<\/span> \u00bb API Key<\/li>\r\n                <li>Your API key = write down this <b>HomeGraph API Hey<\/b><\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h3>\r\n    Bridging Google Assistant and MQTT (gBridge)\r\n<\/h3>\r\n<p>\r\n    Time to install the MQTT\/HTTP bridge. Here we use a self hosted Kappelt gBridge.  This consist of docker packages that will run on the Raspberry Pi.\r\n<\/p>\r\n<p>\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/gBridge-copy.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/gBridge-copy.svg\" alt=\"gBridge message flow\" width=\"550\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                gBridge message flow\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Start with installing Docker\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">sudo apt-get install libffi-dev pwgen tzdata \r\nsudo pip install docker-compose<\/pre>\r\n<\/p>\r\n<p>\r\n    Create a <code>\/opt\/gbridge\/docker-compose.yum<\/code>, substituting your own <i><your_google_clientid><\/i>, <i><your_google_projectid><\/i>, <i><your_rpi><\/i> and <i><your_gbridge_redisworker_homegraphkey><\/i>.\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">version: '3'\r\nnetworks:\r\n    backend:\r\n    driver: bridge\r\n    web_frontend:\r\n    driver: bridge\r\nservices:\r\n    database:\r\n    image: 'yobasystems\/alpine-mariadb:latest'\r\n    restart: always\r\n    environment:\r\n        MYSQL_RANDOM_ROOT_PASSWORD: 'true'\r\n        MYSQL_ROOT_PASSWORD: &lt;your_mysql_passwd&gt;\r\n        MYSQL_DATABASE: gbridge_db\r\n        MYSQL_USER: gbridge_db\r\n        MYSQL_PASSWORD: &lt;your_mysql_passwd&gt;\r\n    expose:\r\n        - '3306'\r\n    networks:\r\n        - backend\r\n    cache:\r\n    image: 'redis:4'\r\n    restart: always\r\n    expose:\r\n        - '6379'\r\n    networks:\r\n        - backend\r\n    web:\r\n    image: 'pkap\/gbridge-web-nginx:arm32v6-latest'\r\n    restart: always\r\n    ports:\r\n        - '8080:80'\r\n        - '443:443'\r\n    environment: &amp;webapp-environment\r\n        APP_ENV: production\r\n        APP_KEY: 'base64:NTYyZWE3NThjZDYxNzM3Nzg2ZTM2MGQ3NDY5MjY0YTI='\r\n        APP_DEBUG: 'false'\r\n        APP_LOG_LEVEL: warning\r\n        APP_URL: 'http:\/\/localhost'\r\n        DB_CONNECTION: mysql\r\n        DB_HOST: database\r\n        DB_PORT: 3306\r\n        DB_DATABASE: gbridge_db\r\n        DB_USERNAME: gbridge_db\r\n        DB_PASSWORD: &lt;your_mysql_passwd&gt;\r\n        BROADCAST_DRIVER: log\r\n        CACHE_DRIVER: file\r\n        SESSION_DRIVER: file\r\n        SESSION_LIFETIME: 120\r\n        QUEUE_DRIVER: sync\r\n        REDIS_HOST: cache\r\n        REDIS_PASSWORD: 'null'\r\n        REDIS_PORT: '6379'\r\n        MAIL_DRIVER: smtp\r\n        MAIL_HOST: ERROR\r\n        MAIL_PORT: ERROR\r\n        MAIL_USERNAME: ERROR\r\n        MAIL_PASSWORD: ERROR\r\n        MAIL_ENCRYPTION: ERROR\r\n        GOOGLE_CLIENTID: &lt;your_google_clientid&gt;\r\n        GOOGLE_PROJECTID: &lt;your_google_projectid&gt;\r\n    links:\r\n        - database\r\n        - cache\r\n        - web-fpm\r\n    depends_on:\r\n        - database\r\n        - cache\r\n        - web-fpm\r\n    networks:\r\n        - web_frontend\r\n        - backend\r\n    volumes:\r\n        - websrc:\/var\/www\r\n    web-fpm:\r\n    image: pkap\/gbridge-web-fpm:arm32v6-latest\r\n    restart: always\r\n    networks:\r\n        - backend\r\n    volumes:\r\n        - websrc:\/var\/www\r\n    environment: *webapp-environment\r\n    redis-worker:\r\n    image: 'pkap\/gbridge-redis-worker:arm32v6-latest'\r\n    restart: always\r\n    environment:\r\n        GBRIDGE_REDISWORKER_REDIS: 'redis:\/\/cache:6379'\r\n        GBRIDGE_REDISWORKER_MQTT: 'mqtt:\/\/&lt;your_rpi&gt;:1883'\r\n        GBRIDGE_REDISWORKER_MQTTUSER: &quot;&quot;\r\n        GBRIDGE_REDISWORKER_MQTTPASSWORD: &quot;&quot;\r\n        GBRIDGE_REDISWORKER_HOMEGRAPHKEY: &lt;your_gbridge_redisworker_homegraphkey&gt;\r\n    networks:\r\n        - backend\r\n    links:\r\n        - cache\r\n    depends_on:\r\n        - cache\r\nvolumes:\r\n    websrc:<\/pre>\r\n<\/p>\r\n<p>\r\n    If you tried this before but failed, I suggest to start from scratch (per https:\/\/community.gbridge.io\/t\/nginx-config-for-rpi-self-hosted\/115\/11)\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">sudo su\r\ncd \/opt\/gbridge\r\ndocker-compose rm -f web redis-worker web-fpm database cache*\r\ndocker volume rm gbridge_websrc\r\nreboot<\/pre>\r\n<br \/>\r\n\r\nContinue with a clean slate\r\n\r\n<pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">sudo su\r\ncd \/opt\/gbridge\r\ndocker system prune -a\r\napt-get update\r\napt-get upgrade<\/pre>\r\n<\/p>\r\n<p>\r\n    Clear the cookies for the site in your browser (I found this the most common source of generic gBridge error messages in the browser)\r\n<\/p>\r\n<p>\r\n    Bring up the containers\r\n\r\n    docker-compose up\r\n:\r\n:\r\ndatabase_1      | 2019-09-07  3:40:23 0 [Note] Reading of all Master_info entries succeeded\r\ndatabase_1      | 2019-09-07  3:40:23 0 [Note] Added new Master_info &#8221; to hash table\r\ndatabase_1      | 2019-09-07  3:40:23 0 [Note] \/usr\/bin\/mysqld: ready for connections.\r\ndatabase_1      | Version: &#8216;10.3.17-MariaDB&#8217;  socket: &#8216;\/run\/mysqld\/mysqld.sock&#8217;  port: 3306  MariaDB Server\r\n<\/p>\r\n<p>\r\n    Meanwhile in a browser, access mqtt.vonk:8080\/ should show the login page\r\n<\/p>\r\n<p>\r\n    <code>^c<\/code> out of <code>docker-compose up<\/code>, and instead start it detached using <code>docker-compose up --detach<\/code>\r\n<\/p>\r\n<p>\r\n    Setup user and password using <code>docker-compose exec web-fpm php artisan migrate<\/code>.  Should reply with a password and a bunch of <code>Migrating *table<\/code> messages.\r\n<\/p>\r\n<p>\r\n    Login from browser, in my case at http:\/\/mqtt.vonk:8080 gives the login page.  Login with <MY_EMAIL_ADDRESS> and passwd 123456<\/li>, don&#8217;t remember me.\r\n    <ol>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">My Account<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">Change Password<\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n                <li>Use a password with at least one number and at least one special char.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">Devices<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\"><span class=\"key-press-blue-inverted\">+ Device<\/span><\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n                <li>Create a device\r\n                    <ul>\r\n                        <li>Name = <code>soft light<\/code><\/li>\r\n                        <li>Device Type = <code>Light<\/code><\/li>\r\n                        <li>Traits = <code>Select Supported Traits, On and Off<\/code><\/li>\r\n                        <li><span class=\"key-press-blue-inverted\">+ Add<\/span><\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h3>\r\n    MQTT forward\r\n<\/h3>\r\n<p>\r\n    The MQTT topics used by the Tasmota firmware and the gBridge don&#8217;t match.  Solve this by\r\n    <ul>\r\n        <li>forwarding traffic for <code>gBridge\/u1\/#<\/code> to <code>cmnd\/<\/code>, and<\/li>\r\n        <li>from <code>stat\/#<\/code> to <code>gBridge\/u1\/<\/code>.\r\n    <\/ul>\r\n\r\n    here &#8220;gBridge\/u1&#8221; is the the user id of your gBridge account as listed in the <code>http:\/\/mqtt:8080\/profile<\/code>.\r\n<\/p>\r\n<p>\r\n    <div class=\"align-center fancybox\">\r\n        <figure>\r\n            <div class=\"flex-container tight\">\r\n                <a class=\"hide-anchor\" href=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Mosquitto-copy-1.svg\">\r\n                    <img src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/Mosquitto-copy-1.svg\" alt=\"Mosquitto message flow\" width=\"550\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Mosquitto message flow\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    To do so, on the Raspberry Pi, create <code>\/etc\/mosquitto\/conf.d\/gbridge.conf<\/code> as\r\n\r\n    <pre class=\"brush: bash; gutter: true; title: ; toolbar: false; notranslate\" title=\"\">connection gBridge\r\naddress 127.0.0.1:1883\r\ntopic cmnd\/# in 0 &quot;&quot; gBridge\/u1\/\r\ntopic stat\/# out 0 &quot;&quot; gBridge\/u1\/<\/pre>  \r\nRestart the MQTT services, <code>sudo service mosquitto restart<\/code>.\r\n<\/p>\r\n<p>\r\n    Log the messages, <code>mosquitto_sub -v -t '#'<\/code>.\r\n<\/p>\r\n\r\n<h3>\r\n    Add the device to Google Home Hub\r\n<\/h3>\r\n<p>\r\n    The final step is done on a mobile device using the Google Home App.\r\n    <ol>\r\n        <li>\r\n            <ul class=\"breadcrumb\">\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\">Google Home App<\/a><\/li>\r\n                <li><a class=\"nomark hide-anchor\" style=\"display:flex; align-items:center;\" href=\"\"><span class=\"key-press-blue-inverted\">+<\/span><\/a><\/li>\r\n            <\/ul>\r\n            <ul>\t  \r\n            <li>\r\n                Set up a new device.\r\n                <ul>\r\n                    <li><code>Works with Google<\/code><\/li>\r\n                    <li><code>Have something already set up?<\/code><\/li>\r\n                    <li>Select the Google Display Name for your project (that is prefixed with <code>[test]<\/code><\/li>\r\n                <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant. ","protected":false},"author":41,"featured_media":26923,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[435],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Google Assistant switches Sonoff S20 - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Google Assistant switches Sonoff S20 - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2019-09-13T00:45:38+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-18T01:04:45+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"14 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#webpage\",\"url\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806\",\"name\":\"Google Assistant switches Sonoff S20 - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#primaryimage\"},\"datePublished\":\"2019-09-13T00:45:38+00:00\",\"dateModified\":\"2022-04-18T01:04:45+00:00\",\"description\":\"Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coertvonk.com\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"IoT\",\"item\":\"https:\/\/coertvonk.com\/category\/sw\/iot\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Google Assistant switches Sonoff S20\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Google Assistant switches Sonoff S20\",\"datePublished\":\"2019-09-13T00:45:38+00:00\",\"dateModified\":\"2022-04-18T01:04:45+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#webpage\"},\"wordCount\":2532,\"commentCount\":4,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg\",\"articleSection\":[\"IoT\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"http:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Google Assistant switches Sonoff S20 - Coert Vonk","description":"Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806","og_locale":"en_US","og_type":"article","og_title":"Google Assistant switches Sonoff S20 - Coert Vonk","og_description":"Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant.","og_url":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806","og_site_name":"Coert Vonk","article_published_time":"2019-09-13T00:45:38+00:00","article_modified_time":"2022-04-18T01:04:45+00:00","twitter_card":"summary","twitter_image":"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"14 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg"},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#webpage","url":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806","name":"Google Assistant switches Sonoff S20 - Coert Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#primaryimage"},"datePublished":"2019-09-13T00:45:38+00:00","dateModified":"2022-04-18T01:04:45+00:00","description":"Build a setup where Google Assistant switches Sonoff S20. Switch your light on\/off using your voice and the help of Google Assistant.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coertvonk.com\/category\/sw"},{"@type":"ListItem","position":3,"name":"IoT","item":"https:\/\/coertvonk.com\/category\/sw\/iot"},{"@type":"ListItem","position":4,"name":"Google Assistant switches Sonoff S20"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Google Assistant switches Sonoff S20","datePublished":"2019-09-13T00:45:38+00:00","dateModified":"2022-04-18T01:04:45+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#webpage"},"wordCount":2532,"commentCount":4,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/sw\/iot\/turning-on-the-light-the-hard-way-26806#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/icon.svg","articleSection":["IoT"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"http:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/26806"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=26806"}],"version-history":[{"count":10,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/26806\/revisions"}],"predecessor-version":[{"id":32309,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/26806\/revisions\/32309"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/26923"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=26806"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=26806"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=26806"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}