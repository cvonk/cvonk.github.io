{"id":30776,"date":"2015-10-07T10:56:41","date_gmt":"2015-10-07T17:56:41","guid":{"rendered":"https:\/\/coertvonk.com\/?p=30776"},"modified":"2022-04-28T19:41:06","modified_gmt":"2022-04-29T02:41:06","slug":"parameterized-divider-in-verilog","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776","title":{"rendered":"Divider circuit"},"content":{"rendered":"<p>\r\n    Implements a math divider using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#8217;s.\r\n<\/p>\r\n<h2 style=\"counter-reset: h2 6 h3\">\r\n    Divider using logic gates\r\n<\/h2>\r\n\r\n<p>\r\n    <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-logo-implementation-divide.svg\"><img class=\"alignright wp-image-17214\"  title=\"\"  src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"75\" \/><\/a>\r\n\r\n    The <em>attempt-subtraction divider<\/em> was introduced in the inquiry <a href=\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#attemptsubtractiondivider\">How do Computer do Math<\/a>.\\(\\) This most basic divider consists of interconnected Controlled Subtract-Multiplex (<code>csm<\/code>) blocks. Each blocks contains a 1-bit Full Subtractor (<code>fs<\/code>) with the usual inputs <em>a<\/em>, <em>b<\/em> and <em>b<sub>i<\/sub><\/em> and outputs <em>d<\/em> and <em>b<sub>o<\/sub><\/em>. The output select signal, <em>os<\/em>, signal selects between input <em>x<\/em> and and the difference <em>x-y<\/em>.\r\n<\/p>\r\n<p>  \r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <div class=\"circuit-container\">\r\n                    <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/divider\/csm-block.html\">\r\n                        <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/divider\/csm-block.svg\" alt=\"\" width=\"200\" \/>\r\n                        <button class=\"circuit-animate no-print\" style=\"bottom: 0%; left: 0%;\">\r\n                            Animate\r\n                        <\/button>\r\n                    <\/a>\r\n                <\/div>\r\n                <div>\r\n                    $$\r\n                        \\begin{align*}\r\n                            d^\\prime &#038;=x \\oplus y \\oplus b_i\\\\\r\n                            d&#038;=os \\cdot x + \\overline{os} \\cdot d^\\prime\\\\\r\n                            b_o&#038;=\\overline{x} \\cdot y + b_i \\cdot (\\overline{x \\oplus y})\r\n                        \\end{align*}\r\n                    $$\r\n                <\/div>\r\n            <\/div>\r\n            <figcaption>1-bit Controlled Subtract-Multiplex<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Attempt-subtraction divider\r\n<\/h3>\r\n<p>\r\n    A complete 8:4-bit divider can therefore be implemented by a matrix of <code>csm<\/code> modules connected on rows and columns as shown in figure below. Each row performs one &#8220;attempt subtraction&#8221; cycle. Note that the most significant bit is used to drive the Output Select <em>os<\/em> inputs. (For more details see \u201c<a href=\"http:\/\/www.asic-world.com\/digital\/arithmetic4.html\">Combinational arithmetic<\/a>\u201c.)\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <a class=\"hide-anchor fancybox-iframe\" href=\"\/wp-content\/logic-simulation\/divider\/8_4-bit attempt-subtraction.html\">\r\n                    <img class=\"aligncenter\" title=\"(c) Copyright 2017-2022 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/divider\/8_4-bit attempt-subtraction.svg\" alt=\"\" width=\"600\" \/>\r\n                    <button class=\"circuit-animate no-print\" style=\"top: 5%; right: 0%;\">\r\n                        Animate\r\n                    <\/button>\r\n                <\/a>\r\n            <\/div>\r\n        <figcaption>8:4-bit Attempt-Subtraction<\/figcaption><\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Similar to the multipliers, using Verilog HDL we can generate instances of <code>csm<\/code> blocks based on the word length of the dividend (<code>xWIDTH<\/code>) and divisor (<code>yWIDTH<\/code>). To describe the circuit in Verilog HDL, we need to derive the rules that govern the connections between the blocks.\r\n<\/p>\r\n<p>\r\n    Start by numbering the output ports based on their location in the matrix. For this circuit, we have the output signals <em>difference<\/em> (\\(d\\)) and <em>borrow-out<\/em> (\\(b\\)). E.g. \\(d_{13}\\) identifies the difference signal for the block in row <code>1<\/code> and column <code>3<\/code>. Next, we express the input signals as a function of the output signal names (\\(d\\) and \\(b\\)) and do the same for the quotient itself as shown in the table below.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/divider-tbl.png\">\r\n                <img class=\"wp-image-12943\" title=\"(c) Copyright 2016 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/divider-tbl.png\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"400\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/divider-tbl.png 429w, https:\/\/coertvonk.com\/wp-content\/uploads\/divider-tbl-368x400.png 368w, https:\/\/coertvonk.com\/wp-content\/uploads\/divider-tbl-230x250.png 230w, https:\/\/coertvonk.com\/wp-content\/uploads\/divider-tbl-276x300.png 276w, https:\/\/coertvonk.com\/wp-content\/uploads\/divider-tbl-322x350.png 322w\" sizes=\"(max-width: 429px) 100vw, 429px\" \/>\r\n            <\/a>\r\n            <figcaption>\r\n                Signals do, bo, x, y, bi and os\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Based on this table, we can now express the interconnects using Verilog HDL using <code>?:<\/code> expressions.\r\n    generate genvar ii, jj;\r\n    for ( ii = 0; ii <; xWIDTH; ii = ii + 1) begin: gen_ii\r\n        for ( jj = 0; jj <; yWIDTH + 1; jj = jj + 1) begin: gen_jj\r\n            math_divider_csm_block csm( \r\n                .a ( jj <; 1 ? x[xWIDTH-1-ii] : ii > 0 ? d[ii-1][jj-1] : 1&#8217;b0 ),\r\n                .b ( jj <; yWIDTH ? y[jj] : 1'b0 ),\r\n                .bi ( jj > 0 ? b[ii][jj-1] : 1&#8217;b0 ),\r\n                .os ( b[ii][yWIDTH] ),\r\n                .d ( d[ii][jj] ),\r\n                .bo ( b[ii][jj] ) );\r\n        end\r\n    end\r\n    for ( ii = 0; ii <; xWIDTH; ii = ii + 1) begin: gen_p\r\n        assign q[xWIDTH-1-ii] = ~b[ii][yWIDTH];\r\n    end\r\n    for ( jj = 0; jj <;= yWIDTH; jj = jj + 1) begin: gen_r\r\n        assign r[jj] = d[xWIDTH-1][jj];\r\n    end\r\nendgenerate[\/code]\r\n<\/p>\r\n<p>\r\n    The complete Verilog HDL source code along with the test bench and constraints is available at:\r\n\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGAmath\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Results\r\n<\/h3>\r\n<p>\r\n    As usual, the propagation delay \\(t_{pd}\\) depends size \\(N\\) and the value of operands. For a given size \\(N\\), the maximum propagation delay occurs when each subtraction needs to be cancelled.\r\n<\/p>\r\n<p>\r\n    The worst-case propagation delays for the <a href=\"http:\/\/www.terasic.com.tw\/cgi-bin\/page\/archive.pl?Language=English&#038;No=593\">Terasic Altera Cyclone IV DE0-Nano<\/a> are found using the post-map Timing Analysis tool. The values in the table below, assume that the size of both operands is the same. The exact value depends on the model and speed grade of the FPGA, the silicon itself, voltage and the die temperature.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"results\">\r\n                    <tr>\r\n                        <th>\\(N\\)<\/th>\r\n                        <th colspan=\"3\">Timing Analysis<\/th>\r\n                        <th>Measured<\/th>\r\n                    <\/tr>\r\n                    <tr style=\"border-bottom: 1px solid #ddd;\">\r\n                        <th><\/th>\r\n                        <th>slow 85\u00b0C<\/th>\r\n                        <th>slow 0\u00b0C<\/th>\r\n                        <th>fast 0\u00b0C<\/th>\r\n                        <th>actual<\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">4-bits<\/td>\r\n                        <td style=\"text-align: right;\">11.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">10.0 ns<\/td>\r\n                        <td style=\"text-align: right;\">6.8 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">8-bits<\/td>\r\n                        <td style=\"text-align: right;\">37.1 ns<\/td>\r\n                        <td style=\"text-align: right;\">33.2 ns<\/td>\r\n                        <td style=\"text-align: right;\">22.0 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">16-bits<\/td>\r\n                        <td style=\"text-align: right;\">148 ns<\/td>\r\n                        <td style=\"text-align: right;\">132 ns<\/td>\r\n                        <td style=\"text-align: right;\">84.8 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">27-bits<\/td>\r\n                        <td style=\"text-align: right;\">408 ns<\/td>\r\n                        <td style=\"text-align: right;\">365 ns<\/td>\r\n                        <td style=\"text-align: right;\">236 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">32-bits<\/td>\r\n                        <td style=\"text-align: right;\">485 ns<\/td>\r\n                        <td style=\"text-align: right;\">434 ns<\/td>\r\n                        <td style=\"text-align: right;\">279 ns<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-divider-attemptsubtraction-circuit-measurements.svg\">\r\n                    <img class=\"wp-image-16751\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-divider-attemptsubtraction-circuit-measurements.svg\" alt=\"\" width=\"100%\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Propagation delay in attempt-subtraction divider\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Continuing from &#8220;Divider using logic gates&#8221;, the <a href=\"\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778\">next chapter<\/a> shows an implementation of the square root algorithm introduced in <a href=\"\/inquiries\/computer-math\/math-operations-using-gates-30710\">Chapter 7<\/a> of the inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8220;.\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>","protected":false},"excerpt":{"rendered":"Builds an attempt-subtraction divider.","protected":false},"author":41,"featured_media":17214,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[420],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Divider using logic gates - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Implements a math divider using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Divider using logic gates - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Implements a math divider using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-07T17:56:41+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-29T02:41:06+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg\",\"caption\":\"(c) Copyright 2016 Coert Vonk\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#webpage\",\"url\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776\",\"name\":\"Divider using logic gates - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#primaryimage\"},\"datePublished\":\"2015-10-07T17:56:41+00:00\",\"dateModified\":\"2022-04-29T02:41:06+00:00\",\"description\":\"Implements a math divider using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Building math circuits\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\/building-math-circuits\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Divider circuit\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Divider circuit\",\"datePublished\":\"2015-10-07T17:56:41+00:00\",\"dateModified\":\"2022-04-29T02:41:06+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#webpage\"},\"wordCount\":332,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg\",\"articleSection\":[\"Building math circuits\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"http:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Divider using logic gates - Coert Vonk","description":"Implements a math divider using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776","og_locale":"en_US","og_type":"article","og_title":"Divider using logic gates - Coert Vonk","og_description":"Implements a math divider using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","og_url":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776","og_site_name":"Coert Vonk","article_published_time":"2015-10-07T17:56:41+00:00","article_modified_time":"2022-04-29T02:41:06+00:00","twitter_card":"summary","twitter_image":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg","caption":"(c) Copyright 2016 Coert Vonk"},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#webpage","url":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776","name":"Divider using logic gates - Coert Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#primaryimage"},"datePublished":"2015-10-07T17:56:41+00:00","dateModified":"2022-04-29T02:41:06+00:00","description":"Implements a math divider using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coertvonk.com\/category\/hw"},{"@type":"ListItem","position":3,"name":"Building math circuits","item":"https:\/\/coertvonk.com\/category\/hw\/building-math-circuits"},{"@type":"ListItem","position":4,"name":"Divider circuit"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Divider circuit","datePublished":"2015-10-07T17:56:41+00:00","dateModified":"2022-04-29T02:41:06+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#webpage"},"wordCount":332,"commentCount":0,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-divide.svg","articleSection":["Building math circuits"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"http:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30776"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=30776"}],"version-history":[{"count":10,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30776\/revisions"}],"predecessor-version":[{"id":32795,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30776\/revisions\/32795"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/17214"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=30776"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=30776"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=30776"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}