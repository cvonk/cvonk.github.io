{"id":30820,"date":"2015-10-15T18:45:08","date_gmt":"2015-10-16T01:45:08","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=30820"},"modified":"2022-04-29T17:51:42","modified_gmt":"2022-04-30T00:51:42","slug":"message-exchange-protocol","status":"publish","type":"post","link":"/\/hw\/math-talk\/message-exchange-protocol-30820","title":{"rendered":"Message protocol"},"content":{"rendered":"<p>\r\n    Specifies the SPI byte protocol.  We use this to exchange bytes between the Arduino microcontroller and a FPGA. This is the third part of <a href=\"\/category\/math-talk\">Math Talk<\/a>. In this part we describe the protocol used to transfer bytes between the microcontroller and FPGA.\r\n<\/p>\r\n\r\n<h2 style=\"counter-reset: h2 2 h3\">\r\n    Bytes Exchange Protocol\r\n<\/h2>\r\n\r\n<p>\r\n    With the two devices <a href=\"/\/hw\/math-talk\/hardware-2-30810\">physically connected<\/a>, we need a protocol to transfer data. We chose the Serial Peripheral Interface (SPI), a lightweight protocol to connect one master to one or more slaves.\r\n<\/p>\r\n\r\n<h3>\r\n    Master\/slave\r\n<\/h3>\r\n<p>\r\n    The SPI bus is controlled by a master device (typically a microcontroller) that orchestrates the bus access. The master generates the control signals and regulates the data flow. The illustration below shows a master with three slaves. The pinout for <em>SCLK<\/em>, <em>MOSI<\/em>, <em>MISO<\/em> and <em>SS<\/em> can be found on the <a href=\"/\/hw\/math-talk\/hardware-2-30810\">previous page<\/a>. The master uses the <em>Slave Select<\/em> (<em>SS<\/em>) signal to select the slave.\r\n<\/p>\r\n<p>\r\n    <div class=\"align-center\">\r\n        <div class=\"flow-container\">\r\n            <figure>\r\n                <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-system-copy.svg\"><img  title=\"\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-system-copy.svg\" alt=\"\" width=\"400\" class=\"alignnone size-large wp-image-32814\" \/><\/a>\r\n                <figcaption>\r\n                    SPI master with three slaves\r\n                <\/figcaption>\r\n            <\/figure>\r\n        <\/div>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Parameters\r\n<\/h3>\r\n<p>\r\n    SPI is also a protocol with many degrees of freedom. It is important that the master and slave agree on the voltage levels and maximum clock frequency. The SPI clock polarity (CPOL) and clock phase (CPHA) introduce four more degrees of freedom as shown in the table below.\r\n\r\n    <div class=\"flow-container\">\r\n        <table class=\"results\">\r\n            <caption>\r\n                SPI parameters\r\n            <\/caption>\r\n            <tr>\r\n                <th>Mode<\/th>\r\n                <th>CPOL<\/th>\r\n                <th>CPHA<\/th>\r\n                <th>clock idle<\/th>\r\n                <th>data driven<\/th>\r\n                <th>data latched<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td><strong>0<\/strong><\/td>\r\n                <td>0<\/td>\r\n                <td>0<\/td>\r\n                <td>low<\/td>\r\n                <td>falling edge<\/td>\r\n                <td>rising edge<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><strong>1<\/strong><\/td>\r\n                <td>0<\/td>\r\n                <td>1<\/td>\r\n                <td>low<\/td>\r\n                <td>rising edge<\/td>\r\n                <td>falling edge<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><strong>2<\/strong><\/td>\r\n                <td>1<\/td>\r\n                <td>0<\/td>\r\n                <td>high<\/td>\r\n                <td>rising edge<\/td>\r\n                <td>falling edge<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><strong>3<\/strong><\/td>\r\n                <td>1<\/td>\r\n                <td>1<\/td>\r\n                <td>high<\/td>\r\n                <td>falling edge<\/td>\r\n                <td>rising edge<\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    For this article we assume <em>mode 3<\/em>, where the clock is high when idle; data is driving following the falling edge of the clock and latched on the rising edge.\r\n<\/p>\r\n\r\n<h3 id=\"operation\">\r\n    Operation\r\n<\/h3>\r\n<p>\r\n    The protocol is easiest explained with shift registers as shown in the illustration below. The master generates the SPI Clock (<em>SCLK<\/em>) to initiate the information exchange. Data is shifted on one edge of this clock and is sampled on the opposite edge when the data is stable.\r\n    <div class=\"align-center\">\r\n        <div class=\"flow-container\">\r\n            <figure>\r\n                <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-flipflops-copy.svg\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-flipflops-copy.svg\" alt=\"\" width=\"600\" class=\"alignnone size-large wp-image-32813\" \/><\/a>\r\n                <figcaption>\r\n                    SPI Master and Slave as shift registers\r\n                <\/figcaption>\r\n            <\/figure>\r\n        <\/div>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    In mode 3, at the falling edge of <em>SCLK<\/em>, both devices drive their most significant bit (<em>b7<\/em>) on their outgoing data line. On the rising edge, both devices clock in this bit into the least significant bit position (<em>b0<\/em>). After eight <em>SCLK<\/em> cycles, the master and slave have exchanged their values and each device processes the data received (e.g. writing it to memory). In case there is more data to be exchanged, the registers are loaded with new data and the process repeats itself. Once all data is transmitted, the master stops the <em>SCLK<\/em> clock.\r\n<\/p>\r\n\r\n<h3>\r\n    Slave select\r\n<\/h3>\r\n<p>\r\n    For a more complete picture, we need to include the effect of the <em>slave select<\/em> (<em>SS*<\/em>) signal that is used to address the slave devices.\r\n    <div class=\"align-center\">\r\n        <div class=\"flow-container\">\r\n            <figure>\r\n                <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-timing-copy.svg\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-timing-copy.svg\" alt=\"\" width=\"600\" class=\"alignnone size-large wp-image-32812\" \/><\/a>\r\n                <figcaption>\r\n                    SPI bus timing\r\n                <\/figcaption>\r\n            <\/figure>\r\n        <\/div>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Slaves may only drive their output (<em>MISO<\/em>) line when <em>SS*<\/em> is active, otherwise they should tri-stated the output. The protocol can be broken down into the following steps:\r\n    <ol>\r\n        <li>\r\n            The master initiates the communication by activating <em>SS*<\/em>.\r\n            <ul>\r\n                <li>The slave responds by starting to drive its <em>MISO<\/em> output.<\/li>\r\n                <li>Meanwhile the master drives its <em>MOSI<\/em> output.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            The master makes <em>SCLK <\/em>low.\r\n            <ul>\r\n                <li>On this falling edge, the master and slave drive their <em>most significant bit position<\/em> (<em>b7<\/em>) on respectively their <em>MOSI<\/em> and <em>MISO<\/em> outputs.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            The master makes <em>SCLK<\/em> high.\r\n            <ul>\r\n                <li>On this rising edge, the master and slave clock the input from their respectively <em>MISO<\/em> and <em>MOSI<\/em> inputs into the <em>least significant bit position<\/em> (<em>b0<\/em>).<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Go back to step 2. until the <em>least significant bit position <\/em>(<em>b0<\/em>) has been sent.\r\n        <\/li>\r\n        <li>\r\n            When all bits are transmitted, the master deactivates <em>SS*<\/em>.\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Following this definition of the SPI byte protocol, the following pages describe an implementation of this protocol, where an <a href=\"/\/hw\/math-talk\/bytes-exchange-with-arduino-as-master-30816\">Arduino is the master<\/a> and a <a href=\"/\/hw\/math-talk\/byte-exchange-with-a-fpga-as-slave-30818\">FPGA is the slave<\/a>.\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Chapter 6. Introduces the message protocol.","protected":false},"author":41,"featured_media":32835,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[421],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>SPI message protocol - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Specifies the SPI message protocol. This enables the Arduino microcontroller to read and write custom registers on a FPGA.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"SPI message protocol - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Specifies the SPI message protocol. This enables the Arduino microcontroller to read and write custom registers on a FPGA.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-16T01:45:08+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-30T00:51:42+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\" \/>\n\t<meta property=\"og:image:width\" content=\"200\" \/>\n\t<meta property=\"og:image:height\" content=\"168\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\",\"width\":200,\"height\":168},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#webpage\",\"url\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820\",\"name\":\"SPI message protocol - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#primaryimage\"},\"datePublished\":\"2015-10-16T01:45:08+00:00\",\"dateModified\":\"2022-04-30T00:51:42+00:00\",\"description\":\"Specifies the SPI message protocol. This enables the Arduino microcontroller to read and write custom registers on a FPGA.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Math talk\",\"item\":\"https:\/\/coert.vonk.one\/category\/hw\/math-talk\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Message protocol\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Message protocol\",\"datePublished\":\"2015-10-16T01:45:08+00:00\",\"dateModified\":\"2022-04-30T00:51:42+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#webpage\"},\"wordCount\":601,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png\",\"articleSection\":[\"Math talk\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"/\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"SPI message protocol - Coert Vonk","description":"Specifies the SPI message protocol. This enables the Arduino microcontroller to read and write custom registers on a FPGA.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820","og_locale":"en_US","og_type":"article","og_title":"SPI message protocol - Coert Vonk","og_description":"Specifies the SPI message protocol. This enables the Arduino microcontroller to read and write custom registers on a FPGA.","og_url":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820","og_site_name":"Coert Vonk","article_published_time":"2015-10-16T01:45:08+00:00","article_modified_time":"2022-04-30T00:51:42+00:00","og_image":[{"width":200,"height":168,"url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#primaryimage","inLanguage":"en-US","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","width":200,"height":168},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#webpage","url":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820","name":"SPI message protocol - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#primaryimage"},"datePublished":"2015-10-16T01:45:08+00:00","dateModified":"2022-04-30T00:51:42+00:00","description":"Specifies the SPI message protocol. This enables the Arduino microcontroller to read and write custom registers on a FPGA.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coert.vonk.one\/category\/hw"},{"@type":"ListItem","position":3,"name":"Math talk","item":"https:\/\/coert.vonk.one\/category\/hw\/math-talk"},{"@type":"ListItem","position":4,"name":"Message protocol"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Message protocol","datePublished":"2015-10-16T01:45:08+00:00","dateModified":"2022-04-30T00:51:42+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#webpage"},"wordCount":601,"commentCount":0,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/hw\/math-talk\/message-exchange-protocol-30820#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/spi-logo-mathtalk-small.png","articleSection":["Math talk"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coert.vonk.one\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"/\/author\/cvonk"}]}},"_links":{"self":[{"href":"/\/wp-json\/wp\/v2\/posts\/30820"}],"collection":[{"href":"/\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"/\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/comments?post=30820"}],"version-history":[{"count":10,"href":"/\/wp-json\/wp\/v2\/posts\/30820\/revisions"}],"predecessor-version":[{"id":32831,"href":"/\/wp-json\/wp\/v2\/posts\/30820\/revisions\/32831"}],"wp:featuredmedia":[{"embeddable":true,"href":"/\/wp-json\/wp\/v2\/media\/32835"}],"wp:attachment":[{"href":"/\/wp-json\/wp\/v2\/media?parent=30820"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"/\/wp-json\/wp\/v2\/categories?post=30820"},{"taxonomy":"post_tag","embeddable":true,"href":"/\/wp-json\/wp\/v2\/tags?post=30820"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}