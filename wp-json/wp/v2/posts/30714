{"id":30714,"date":"2010-10-21T16:25:22","date_gmt":"2010-10-21T23:25:22","guid":{"rendered":"https:\/\/coertvonk.com\/?p=30714"},"modified":"2022-04-13T23:18:25","modified_gmt":"2022-04-14T06:18:25","slug":"programmable-logic","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714","title":{"rendered":"Programmable logic"},"content":{"rendered":"<p>\r\n    Complexity \u2013 CAD \u2013 Simulation \u2026.\r\n<\/p>\r\n<p>\r\n    Logic devices can be classified into two broad categories\r\n    <ul>\r\n        <li type=\"_moz\">Fixed devices, where the circuits are permanent. Their function cannot be changed. Examples are:\r\n            <ul>\r\n                <li type=\"_moz\">gates (NAND, NOR, XOR),<\/li>\r\n                <li type=\"_moz\">binary counters,<\/li>\r\n                <li type=\"_moz\">multiplexers, and<\/li>\r\n                <li type=\"_moz\">adders.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li type=\"_moz\">Application-Specific Integrated Circuit (<strong>ASIC<\/strong>)\r\n            <ul>\r\n                <li type=\"_moz\">The manufacturer defines a integrated circuit containing transistors, but does not connect them together.<\/li>\r\n                <li type=\"_moz\">The user specifies the metal mask that connects the transistors.<\/li>\r\n                <li type=\"_moz\">The manufacturer uses this mask to finish the ASIC.<\/li>\r\n                <li type=\"_moz\">Introduced by Fairchild in 1967. Have since grown to contain over 100 million gates.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    Programmable logic devices\r\n<\/h3>\r\n\r\n<p>\r\n    Programmable logic devices (PLD), can be changed at any time to perform any number of functions. Prominent flavors of PLDs are:\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/fpga-pal-fuses.png\">\r\n                <img class=\"wp-image-3919\"  title=\"\"  src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png\" alt=\"(c) Copyright 2014-2021 Coert Vonk\" width=\"150\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png 412w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses-400x344.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses-250x215.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses-300x258.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses-350x301.png 350w\" sizes=\"(max-width: 412px) 100vw, 412px\" \/>\r\n            <\/a>\r\n            <figcaption>Programmable array logic<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    <ul>\r\n        <li>Programmable array logic (<strong>PAL<\/strong>)\r\n        <ul>\r\n            <li type=\"_moz\">based on sum-of-products, with programmable \u201cfuses\u201d,<\/li>\r\n            <li type=\"_moz\">used for simple combinational logic (a few 100\u2032s gates),<\/li>\r\n            <li type=\"_moz\">introduced by MMI (Birkner and Chua, 1978).<\/li>\r\n            <li type=\"_moz\">The figure on the right shows an example of an AND function with programmable fuses.<\/li>\r\n        <\/ul>\r\n        <\/li>\r\n        <li type=\"_moz\">Complex programmable logic device (<strong>CPLD<\/strong>)\r\n        <ul>\r\n            <li type=\"_moz\">based on sum-of-products,<\/li>\r\n            <li type=\"_moz\">for medium size combinational logic (10,000\u2032s gates).<\/li>\r\n        <\/ul>\r\n        <\/li>\r\n        <li type=\"_moz\">Field-programmable gate array (<strong>FPGA<\/strong>)\r\n        <ul>\r\n            <li type=\"_moz\">based on blocks containing a look-up tables, full adder and d flip-flop,<\/li>\r\n            <li type=\"_moz\">used for complex combinational or sequential logic such as state machines (1,000,000\u2032s gates),<\/li>\r\n            <li type=\"_moz\">introduced by Xilinx (Freeman, Vonderschmitt) in 1985.<\/li>\r\n        <\/ul>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    A CPLD would be sufficient to implement the combinational circuits discussed so far, however our ultimate goal is to create a modest microprocessor circuit. As we will see later, a microprocessor circuit requires a state machine for which we need a FPGA. As a result the remainder of this text will focus on a FPGAs implementation.\r\n<\/p>\r\n\r\n<h3>\r\n    Interconnected cells\r\n<\/h3>\r\n\r\n<p>\r\n    The core of FPGAs contains a vast array of interconnected logic cells.\r\n<\/p>\r\n<p>\r\n    The exact logic cell architecture depends on the vendor. (refer to FPGA logic cells for typical cell architectures.)\r\n<\/p>\r\n<p>\r\n    The main vendors are:\r\n    <ul>\r\n        <li type=\"_moz\">Xilinx for leading edge products, and<\/li>\r\n        <li type=\"_moz\">Altera (Intel) for lean and efficient devices.<\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    Each logic cell consists of:\r\n    <ul>\r\n        <li type=\"_moz\">a look-up table (LUT), to implement any 4-input Boolean function,<\/li>\r\n        <li type=\"_moz\">a full adder with an additional AND gate, to implement multiplication.<\/li>\r\n        <li type=\"_moz\">a D flip-flop, to implement sequential logic, and<\/li>\r\n        <li type=\"_moz\">a 2-to-1 multiplexer, to bypass the flip-flop if desired<\/li>\r\n    <\/ul>\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/fpga-logic.png\">\r\n                <img class=\"wp-image-3788\" title=\"(c) Copyright 2014-2021 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic.png\" alt=\"(c) Copyright 2014-2021 Coert Vonk\" width=\"211\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic.png 791w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic-400x257.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic-768x494.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic-250x161.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic-300x193.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic-350x225.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic-500x322.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-logic-750x483.png 750w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/>\r\n            <\/a>\r\n            <figcaption>Example logic cell<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Each IO cell consists of:\r\n    <ul>\r\n        <li type=\"_moz\">a D flip-flop, to implement sequential logic, and<\/li>\r\n        <li type=\"_moz\">a 2-to-1 multiplexer, to bypass the flip-flop if desired<\/li>\r\n    <\/ul>\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/fpga-io.png\">\r\n                <img class=\"wp-image-3789\" title=\"(c) Copyright 2014-2021 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-io.png\" alt=\"(c) Copyright 2014-2021 Coert Vonk\" width=\"123\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-io.png 461w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-io-400x366.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-io-250x229.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-io-300x275.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-io-350x320.png 350w\" sizes=\"(max-width: 461px) 100vw, 461px\" \/>\r\n            <\/a>\r\n            <figcaption>Example IO cell<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Programmable interconnects\r\n    <ul>\r\n        <li type=\"_moz\">Reconfigurable interconnects allow the logic cells to be \u201cwired together\u201d.<\/li>\r\n        <li type=\"_moz\">The functionality of an FPGA can be changed by downloading a different configuration.<\/li>\r\n        <li type=\"_moz\">The circuits are often much faster as with discrete components, because the signals stay within the silicon die of the FPGA.<\/li>\r\n    <\/ul>\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n        <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/fpga-prg-interconnect.png\">\r\n            <img class=\"wp-image-3924\" title=\"(c) Copyright 2014-2021 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-prg-interconnect.png\" alt=\"(c) Copyright 2014-2021 Coert Vonk\" width=\"120\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-prg-interconnect.png 354w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-prg-interconnect-300x400.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-prg-interconnect-188x250.png 188w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-prg-interconnect-225x300.png 225w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-prg-interconnect-263x350.png 263w\" sizes=\"(max-width: 354px) 100vw, 354px\" \/>\r\n        <\/a>\r\n        <figcaption>Example programmable interconnect<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The figure below shows a typical matrix organization of the logic cells that are interconnected using programmable interconnects.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n        <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/fpga-matrix3.png\">\r\n            <img class=\"wp-image-3909\" title=\"(c) Copyright 2014-2021 Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3.png\" alt=\"(c) Copyright 2014-2021 Coert Vonk\" width=\"500\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3.png 752w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3-400x252.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3-250x158.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3-300x189.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3-350x221.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3-500x315.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-matrix3-750x473.png 750w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/>\r\n        <\/a>\r\n        <figcaption>Example FPGA<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Lab environment (thanks Dylon)\r\n<\/h3>\r\n\r\n<p>\r\n    <ul>\r\n        <li type=\"_moz\">Altera (now Intel), much better tools.<\/li>\r\n        <li type=\"_moz\">Boards\r\n            <ul>\r\n                <li type=\"_moz\">Xilinx, development boards are easy to find. E.g. Spartan6 ($89 at Avnet) that has a USB-to-UART chip on it so you can plug it right into your computer to download new FPGA code as well as use it as a UART.<\/li>\r\n                <li type=\"_moz\">Alternatively, the Xilinx Spartan3E development board is an old standby that works well.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li type=\"_moz\">Simulator\r\n            <ul>\r\n                <li type=\"_moz\"><a href=\"http:\/\/iverilog.icarus.com\/\">icarus verilog<\/a>g (free simulator, yum install iverilog) and <a href=\"http:\/\/gtkwave.sourceforge.net\/\">GTKWave<\/a> (free waveform viewer, yum install gtkwave) work great. They are just as good as most of the bundled simulators that you\u2019ll find with the tools.<\/li>\r\n                <li type=\"_moz\">a web copy of ModelSim bundled with Xilinx or Altera that wouldn\u2019t be bad either.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li type=\"_moz\"><a type=\"_moz\">Cliff Cummings<\/a> posted papers about Verilog, and book recommendations.<\/li>\r\n        <li type=\"_moz\"><a href=\"https:\/\/opencores.org\/\">OpenCores<\/a> has lots of Verilog and VHDL code for most any kind of core you can imagine.<\/li>\r\n        <li type=\"_moz\">Scripts <a href=\"https:\/\/github.com\/inneralien\/SimShop\">SimShop<\/a> and <a href=\"https:\/\/github.com\/inneralien\/Tizzy\">Tizzy<\/a> for simulation and state machines! SimShop provides an easy scriptable way to set up a simulation environment, and Tizzy allows you to write state machines in .dot and will do a conversion to Verilog for you.<\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    xx\r\n<\/h3>\r\n\r\n<p>\r\n    <ul>\r\n        <li>Xilinx\r\n        <ul>\r\n            <li><a href=\"http:\/\/web.archive.org\/web\/20130206093749\/http:\/\/digilentinc.com\/Data\/Documents\/Tutorials\/Xilinx%20ISE%20Simulator%20(ISim)%20with%20Verilog%20Test%20Fixture%20Tutorial.pdf\">Verilog Test Fixture tutorial<\/a><\/li>\r\n        <\/ul>\r\n        <\/li>\r\n        <li>Advanced digital simulation and synthesis, <a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/support\/programmable\/support-resources\/download\/quartus-max-plus-ii-software-discontinue-notice.html?edition=standard\">Quartus II including ModelSim<\/a>, Altera (free Web version)\r\n        <ul>\r\n            <li><a>Tutorials<\/a> as part of Quartus<\/li>\r\n            <li>Hierarchical schematic design entry<\/li>\r\n            <li><a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/developer\/topic-technology\/fpga-academic\/materials.html\">Other tutorials<\/a><\/li>\r\n        <\/ul>\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    The typical workflow:\r\n<\/h3>\r\n\r\n<p>\r\n    <ul>\r\n        <li>The desired logic is specified using traditional schematics or a hardware description language.<\/li>\r\n        <li>The logic function is compiled into a binary file that can be downloaded into the FPGA.<\/li>\r\n        <li>Test vectors and output verification.<\/li>\r\n        <li type=\"_moz\">The binary file is download the FPGA.<\/li>\r\n    <\/ul>\r\n<\/p>\r\n<p>\r\n    The application-specific integrated circuit (ASIC), is similar to the FPGA, except that it is not reprogrammable. The advantage is higher speed and smaller footprint.\r\n<\/p>\r\n<p>\r\n    Hardware description language (HDL)\r\n    <ol>\r\n        <li type=\"_moz\">Verilog\/VHDL<\/li>\r\n        <li type=\"_moz\">netlist<\/li>\r\n        <li type=\"_moz\">synthesis optimizes the functions<\/li>\r\n        <li type=\"_moz\">mapping to hardware<\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    Build-in components are called macros (counters, RAM, multiplexers, adders, LUT)\r\n    <ol>\r\n        <li type=\"_moz\">See \u201c<a href=\"http:\/\/web.mit.edu\/6.111\/www\/s2004\/LECTURES\/l3.pdf\">Introduction to Verilog<\/a>\u201c<\/li>\r\n        <li type=\"_moz\">In order the obtain reasonable speeds (wires are not ideal), the utilization is typically limited to about 50%.<\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h3>\r\n    Lab work\r\n<\/h3>\r\n\r\n<p>\r\n    FPGA tools for design entry, simulation, synthesis and uploading is available from: (see also <a href=\"https:\/\/www.fpga4fun.com\/FPGAsoftware1.html\">comparison<\/a>)\r\n    <ul>\r\n        <li type=\"_moz\">Altera, <a href=\"https:\/\/www.intel.com\/content\/www\/us\/en\/support\/programmable\/support-resources\/download\/quartus-max-plus-ii-software-discontinue-notice.html?edition=standard\">Quartus II Web Edition<\/a>, includes timing simulation and an embedded logic analyzer (free for small and medium FPGAs)<\/li>\r\n        <li type=\"_moz\">Xilinx, <a href=\"https:\/\/www.xilinx.com\/products\/design-tools\/ise-design-suite\/ise-webpack.html\">ISE WebPack<\/a> (see also <a href=\"https:\/\/www.kennesaw.edu\/\">Schematic tutorial<\/a> and <a href=\"https:\/\/www.kennesaw.edu\/\">Behavior simulation tutorial<\/a>). (free for medium FPGAs)<\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h3>\r\n    What&#8217;s next?\r\n<\/h3>\r\n\r\n<p>\r\n    The logic next step is the Arithmetic Logical Unit that forms the heart of today&#8217;s computers.\r\n<\/p>\r\n\r\n<h3>\r\n    Arithmetic Logical Unit (ALU)\r\n<\/h3>\r\n\r\n<p>\r\n    <ol>\r\n        <li type=\"_moz\">Arithmetic Logical Unit (ALU)\r\n        <ul>\r\n            <li type=\"_moz\">http:\/\/ecen3233.okstate.edu\/Fall%202009\/labs\/Lab05.pdf<\/li>\r\n            <li type=\"_moz\">soft cores for Xilinx, http:\/\/www.1-core.com\/library\/digital\/soft-cpu-cores\/<\/li>\r\n        <\/ul>\r\n        <\/li>\r\n        <li type=\"_moz\">Add Simple picture showing different functions feeding into a multiplexor where the operation is the selector.<\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    Now let us build something with Gate-Level Verilog! \r\n    I also published the <a href=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/fpga-math-verilog-12758\">companion article that implements the functionality using an FPGA<\/a>\r\n<\/p>\r\n<p>\r\n    The inquiry \u201c<a href=\"https:\/\/coertvonk.com\/category\/inquiries\/how-cpu-work\">How do microprocessors work?<\/a>\u201d picks up from here.    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Shows how to build logic circuits using programmable logic.","protected":false},"author":41,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[303],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Programmable logic - Coert Vonk<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Programmable logic - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Shows how to build logic circuits using programmable logic.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2010-10-21T23:25:22+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-14T06:18:25+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"http:\/\/coertvonk.com\/#website\",\"url\":\"http:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"http:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png\",\"width\":412,\"height\":354,\"caption\":\"own work\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#webpage\",\"url\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714\",\"name\":\"Programmable logic - Coert Vonk\",\"isPartOf\":{\"@id\":\"http:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#primaryimage\"},\"datePublished\":\"2010-10-21T23:25:22+00:00\",\"dateModified\":\"2022-04-14T06:18:25+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Logic (Verilog)\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\/logic\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Programmable logic\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#webpage\"},\"author\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Programmable logic\",\"datePublished\":\"2010-10-21T23:25:22+00:00\",\"dateModified\":\"2022-04-14T06:18:25+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#webpage\"},\"wordCount\":918,\"commentCount\":0,\"publisher\":{\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png\",\"articleSection\":[\"Logic (Verilog)\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"http:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"http:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"http:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Programmable logic - Coert Vonk","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714","og_locale":"en_US","og_type":"article","og_title":"Programmable logic - Coert Vonk","og_description":"Shows how to build logic circuits using programmable logic.","og_url":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714","og_site_name":"Coert Vonk","article_published_time":"2010-10-21T23:25:22+00:00","article_modified_time":"2022-04-14T06:18:25+00:00","og_image":[{"url":"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"http:\/\/coertvonk.com\/#website","url":"http:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"http:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png","width":412,"height":354,"caption":"own work"},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#webpage","url":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714","name":"Programmable logic - Coert Vonk","isPartOf":{"@id":"http:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#primaryimage"},"datePublished":"2010-10-21T23:25:22+00:00","dateModified":"2022-04-14T06:18:25+00:00","breadcrumb":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coertvonk.com\/category\/hw"},{"@type":"ListItem","position":3,"name":"Logic (Verilog)","item":"https:\/\/coertvonk.com\/category\/hw\/logic"},{"@type":"ListItem","position":4,"name":"Programmable logic"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#webpage"},"author":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Programmable logic","datePublished":"2010-10-21T23:25:22+00:00","dateModified":"2022-04-14T06:18:25+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#webpage"},"wordCount":918,"commentCount":0,"publisher":{"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/hw\/logic\/programmable-logic-30714#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/fpga-pal-fuses.png","articleSection":["Logic (Verilog)"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"http:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"http:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"http:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"http:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30714"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=30714"}],"version-history":[{"count":9,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30714\/revisions"}],"predecessor-version":[{"id":32277,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30714\/revisions\/32277"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=30714"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=30714"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=30714"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}