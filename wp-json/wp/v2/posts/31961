{"id":31961,"date":"2022-03-03T14:06:27","date_gmt":"2022-03-03T22:06:27","guid":{"rendered":"https:\/\/coert.vonk.one\/?p=31961"},"modified":"2022-05-03T14:30:32","modified_gmt":"2022-05-03T21:30:32","slug":"tools","status":"publish","type":"post","link":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961","title":{"rendered":"Tools"},"content":{"rendered":"<p>\r\n    Describes the development environment for the OPNpool interface as described in <a href=\"https:\/\/github.com\/cvonk\/vscode-starters\/tree\/master\/ESP32\">VSCode-starters ESP32<\/a>, consisting of \r\n    <ul>        \r\n        <li>GNU toolchain<\/li>\r\n        <li>Espressif IoT Development Framework (ESP-IDF)<\/li>\r\n        <li>Microsoft Visual Code Studio IDE<\/li>\r\n        <li>Git version control<\/li>\r\n    <\/ul>\r\n\r\n    <div class=\"flex-container tight\">\r\n        <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode.jpg\"><img  title=\"\" src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode.jpg\" alt=\"\" width=\"500\" class=\"alignnone size-full wp-image-32121\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode.jpg 500w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode-400x219.jpg 400w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h2>\r\n    Git\r\n<\/h2>\r\n<p>\r\n    We use <code>git<\/code> with a repository hosted on <a href=\"https:\/\/github.com\/cvonk\/OPNpool\">GitHub<\/a>.\r\n<\/p>\r\n<p>\r\n    <ol>\r\n        <li>\r\n            Make sure that you can <code>ssh<\/code> to github.com.  On Windows, you may have to install the Windows <a href=\"https:\/\/docs.microsoft.com\/en-us\/windows-server\/administration\/openssh\/openssh_install_firstuse\">OpenSSH Client<\/a>.\r\n        <\/li>\r\n        <li>\r\n            Clone the repository and its submodules to a local directory.  Note the <b><code>--recursive<\/code><\/b> flag.\r\n\r\n            <pre class=\"brush: bash; title: ; toolbar: false; notranslate\" title=\"\">git clone --recursive git@github.com:cvonk\/OPNpool.git<\/pre>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h2>\r\n    EAGLE\r\n<\/h2>\r\n<p>\r\n    The schematics and layout of the printed circuit board were created using <a href=\"https:\/\/www.autodesk.com\/education\/edu-software\/overview\">Autodesk EAGLE<\/a>.  If you wish to edit these files, you will need to install the software.\r\n<\/p>\r\n<p>\r\n    Remember\r\n    <blockquote>\r\n        In Windows, you need to specify the <code>EAGLE_HOME<\/code> environment variable that points to the your <code>EAGLE<\/code> directory. Inside EAGLE it is known as <code>$HOME<\/code> and is used in Control Panel \u00bb Options \u00bb Directories. \r\n    <\/blockquote>\r\n<\/p>\r\n<p>\r\n    The schematic and board layouts are available in the <code>hardware<\/code> directory. Custom parts such as the Wemos LOLIN-D32, DC\/DC converter, JTAG, RS-485 connector can be found in the <code>hardware\/libraries\/OPNpool.lbr<\/code> library.\r\n<\/p>\r\n<p>\r\n    Go to Options then Directories, and add the absolute path of `OPNpool\/hardware\/libraries` to the libraries.\r\n\r\n    <div class=\"flex-container tight\">\r\n        <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-eagle.png\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-eagle-1024x714.png\" alt=\"\" width=\"525\" class=\"alignnone size-large wp-image-32287\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-eagle-1024x714.png 1024w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-eagle-400x279.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-eagle-768x536.png 768w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-eagle.png 1201w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h2>\r\n    ESP Toolchain\r\n<\/h2>\r\n<p>\r\n    These instructions are for Windows, the paths will be slightly different on other operating systems.\r\n<\/p>\r\n<p>\r\n    Before you start, make sure that <a href=\"https:\/\/git-scm.com\/\">Git<\/a> is installed and that you can call <code>git<\/code> from the command line.\r\n\r\n    <div class=\"flex-container tight\">\r\n        <figure>\r\n            <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/vscode-esp-idf-plugin.png\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/vscode-esp-idf-plugin.png\" alt=\"\" width=\"300\" class=\"alignnone size-full wp-image-32276\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/vscode-esp-idf-plugin.png 677w, https:\/\/coert.vonk.one\/wp-content\/uploads\/vscode-esp-idf-plugin-400x382.png 400w\" sizes=\"(max-width: 677px) 100vw, 677px\" \/><\/a>\r\n            <figcaption>\r\n                VScode ESP-IDF plugin\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    If you haven&#8217;t already, install <a href=\"https:\/\/code.visualstudio.com\/\">Microsoft Visual Studio Code<\/a> (VSCode).\r\n\r\n    <div class=\"flex-container tight\">\r\n        <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode-esp-idf.png\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode-esp-idf.png\" alt=\"\" width=\"425\" class=\"alignnone size-full wp-image-32290\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode-esp-idf.png 848w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode-esp-idf-400x291.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-vscode-esp-idf-768x559.png 768w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    From within VSCode:\r\n    <ol>\r\n        <li>\r\n            Add the <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools\">Microsoft&#8217;s C\/C++ extension<\/a>\r\n        <\/li>\r\n        <li>\r\n            Add the Espressif IDF 1.4.0 extension.\r\n        <\/li>\r\n        <li>\r\n            Install the tools and configure the Espressif IDF extension.\r\n            <ul>\r\n                <li>\r\n                    <cspan class=\"hp41-key\">F1<\/cspan> \u00bb <code>ISP-IDF: Configure ESP-IDF<\/code>\r\n                <\/li>\r\n                <li>\r\n                    Select Advanced mode\r\n                <\/li>\r\n                <li>\r\n                    ESP-IDF 4.4 in <code>C:\/espressif<\/code> (goes to subdir <code>esp-idf<\/code>)\r\n                <\/li>\r\n                <li>\r\n                    GNU Tools in <code>C:\/espressif\/bin<\/code>\r\n                <\/li>\r\n                <li>\r\n                    Choose &#8220;Download ESP-IDF Tools&#8221;\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            To speed up compile times, disable Windows Defender&#8217;s real-time scanning of <code>C:\/espressif<\/code>. If you get an &#8220;You&#8217;ll need a new app to open this WindowsDefender link&#8221; prompt, then issue <code>Get-AppxPackage Microsoft.SecHealthUI -AllUsers | Reset-AppxPackage<\/code> from an elevated PowerShell terminal.\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>        \r\n    If you prefer to use a ESP-IDF beta version or the master branch, refer to <a href=\"https:\/\/github.com\/cvonk\/vscode-starters\/tree\/master\/ESP32\">VSCode starter for ESP32<\/a>.\r\n<\/p>\r\n\r\n<h3>\r\n    Start humble\r\n<\/h3>\r\n<p>\r\n    <ol>\r\n        <li>\r\n            From Visual Studio Code, change to an empty folder and copy a simple example project such as <code>blink<\/code>.\r\n            <ul>\r\n                <li>\r\n                    <cspan class=\"hp41-key\">F1<\/cspan> \u00bb ESP-IDF: Show ESP-IDF Example Projects\r\n                    <ul>\r\n                        <li>\r\n                            Get-started \u00bb Blink\r\n                        <\/li>\r\n                        <li>\r\n                            Click on &#8220;Create project using example Blink&#8221;.\r\n                        <\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Connect an ESP32 board to your computer. It will show up as a Serial Port device in the Windows device manager.\r\n        <\/li>\r\n        <li>\r\n            Select the serial port in Visual Studio Code\r\n            <ul>\r\n                <li>\r\n                    <cspan class=\"hp41-key\">F1<\/cspan> \u00bb ESP-IDF: Device configuration\r\n                    <ul>\r\n                        <li>Device Target = ESP32<\/li>\r\n                        <li>Device Port = COM4<\/li>\r\n                        <li>Baud Rate = 115200<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Start a compile-flash-monitor cycle\r\n            <ol>\r\n                <li>\r\n                    <cspan class=\"hp41-key\">F1<\/cspan> \u00bb ESP-IDF: Build, flash and monitor, or use <cspan class=\"hp41-key\">^e<\/cspan> <cspan class=\"hp41-key\">d<\/cspan>. \r\n                <\/li>\r\n                <li>\r\n                    Flash using the &#8220;UART&#8221;.\r\n                <\/li>\r\n            <\/ol>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n<p>\r\n    In case you encounter warnings or errors, refer to the table below.\r\n\r\n    <div class=\"flex-container\">\r\n        <table class=\"error\">\r\n            <tr>\r\n                <th>\r\n                    Message\r\n                <\/th>\r\n                <th>\r\n                    Explanation\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <code>esptool.py failed with exit code 2<\/code>\r\n                <\/td>\r\n                <td>\r\n                    Hints that the baud rate is to high. Try a different\/shorter cable.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <code>no such option: -b<\/code>\r\n                <\/td>\r\n                <td>\r\n                    Change <code>idf.py monitor<\/code> line in <code>.vscode\\tasks.json<\/code> so that the command Monitor&#8221; is behind the options.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <code>CMake Error: Unable to open check cache file for write.<\/code> \r\n                <\/td>\r\n                <td>\r\n                    The directory for the cache file doesn&#8217;t exist. Create it by hand.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <code>IDF_PATH environment variable is different from inferred IDF_PATH.<\/code>.\r\n                <\/td>\r\n                <td>\r\n                    Likely because <code>$IDF_PATH<\/code> is not set in Windows&#8217; system\/user environment. Ignore.\r\n                <\/td>\r\n            <tr>\r\n                <td>\r\n                    <code>Could NOT find Git (missing: GIT_EXECUTABLE)<\/code>\r\n                <\/td>\r\n                <td>\r\n                    Odd because <code>${env:PATH}<\/code> does include <code>C:\\Program Files\\Git\\cmd<\/code> [<a href=\"https:\/\/docs.espressif.com\/projects\/esp-idf\/en\/latest\/esp32\/api-guides\/build-system.html\">build system<\/a>]\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Compiling\r\n<\/h3>\r\n<p>\r\n    You should now be able to compile and link e.g. the &#8220;factory&#8221; application.\r\n<\/p>\r\n<p>\r\n\r\n    Start Visual Studio Code (vscode), in the directory <code>OPNpool\\factory<\/code>.\r\n\r\n    <ol>\r\n        <li>\r\n            Connect an ESP32 board to your computer. In Device Manager, the UART (COM) will show up under the Serial Ports. Select this port in Visual Studio Code:\r\n            <ul>\r\n                <li>\r\n                    <cspan class=\"hp41-key\">F1<\/cspan> \u00bb ESP-IDF: Device configuration\r\n                    <ul>\r\n                        <li>Device Target = ESP32<\/li>\r\n                        <li>Device Port = COM6<\/li>\r\n                        <li>Baud Rate = 115200<\/li>\r\n                    <\/ul>\r\n                <\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            Start a compile-flash-monitor cycle\r\n            <ol>\r\n                <li>\r\n                    <cspan class=\"hp41-key\">F1<\/cspan> \u00bb ESP-IDF: Build, flash and monitor, or using <cspan class=\"hp41-key\">^e<\/cspan> <cspan class=\"hp41-key\">d<\/cspan>. \r\n                <\/li>\r\n                <li>\r\n                    Flash using the &#8220;UART&#8221;.\r\n                <\/li>\r\n            <\/ol>\r\n        <\/li>\r\n    <\/ol>\r\n<\/p>\r\n\r\n<h2>\r\n    Android Studio\r\n<\/h2>\r\n<p>\r\n    The OPNpool provisioning application is available on the <a href=\"\">Play Store<\/a>. The Deploying chapter of this document describes the process in more detail.\r\n<\/p>\r\n<p>\r\n    If you prefer to build it yourself, download and install <a href=\"https:\/\/developer.android.com\/studio\">Google Android Studio<\/a> and its SDK. We&#8217;d recommend trying to build one of the example projects before you building the OPNpool provisioning app.\r\n\r\n    <div class=\"flex-container tight\">\r\n        <a href=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-androidstudio.png\"><img src=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-androidstudio-1024x887.png\" alt=\"\" width=\"525\" class=\"alignnone size-large wp-image-32288\" srcset=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-androidstudio-1024x887.png 1024w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-androidstudio-400x347.png 400w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-androidstudio-768x666.png 768w, https:\/\/coert.vonk.one\/wp-content\/uploads\/opnpool-tools-androidstudio.png 1387w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Build\r\n<\/h3>\r\n<p>\r\n    Open Android Studio in the <code>android<\/code> directory and start the <code>build<\/code> process. Enable Developer mode on you Android device, and enable Wireless Debugging.  Your phone should now be listed as a test device.  Click the button to run the app on your phone.\r\n<\/p>\r\n<p>\r\n    Note that the app targets API 30 (Android 11), but builds with API 31.  This is so that we can request <code>BLUETOOTH_SCAN<\/code> and <code>BLUETOOTH_CONNECT<\/code> permissions for Android 12 devices. For details refer to the <a href=\"https:\/\/developer.android.com\/about\/versions\/12\/behavior-changes-all\">Android 12 Behavior Changes document<\/a>\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                Continue reading to learn about the <a href=\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/debugging-31963\">debugging methods<\/a>.\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Describes the development environment for the pool interface, consisting of the GNU toolchain, ESP-IDF, Visual Code Studio, an Git.","protected":false},"author":41,"featured_media":32091,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[434],"tags":[463,455,461,460],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Development environment for the pool interface - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Describes the development environment for the pool interface, consisting of the GNU toolchain, ESP-IDF, Visual Code Studio, an Git.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Development environment for the pool interface - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Describes the development environment for the pool interface, consisting of the GNU toolchain, ESP-IDF, Visual Code Studio, an Git.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2022-03-03T22:06:27+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-03T21:30:32+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coert.vonk.one\/#website\",\"url\":\"https:\/\/coert.vonk.one\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coert.vonk.one\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#primaryimage\",\"url\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\",\"contentUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#webpage\",\"url\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961\",\"name\":\"Development environment for the pool interface - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#primaryimage\"},\"datePublished\":\"2022-03-03T22:06:27+00:00\",\"dateModified\":\"2022-05-03T21:30:32+00:00\",\"description\":\"Describes the development environment for the pool interface, consisting of the GNU toolchain, ESP-IDF, Visual Code Studio, an Git.\",\"breadcrumb\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coert.vonk.one\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Software\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Embedded\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/embedded\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"OPNpool design\",\"item\":\"https:\/\/coert.vonk.one\/category\/sw\/embedded\/opnpool-design\"},{\"@type\":\"ListItem\",\"position\":5,\"name\":\"Tools\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#article\",\"isPartOf\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#webpage\"},\"author\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Tools\",\"datePublished\":\"2022-03-03T22:06:27+00:00\",\"dateModified\":\"2022-05-03T21:30:32+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#webpage\"},\"wordCount\":711,\"publisher\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg\",\"keywords\":[\"esp-idf\",\"esp32\",\"iot\",\"pool\"],\"articleSection\":[\"OPNpool design\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coert.vonk.one\"],\"url\":\"https:\/\/coert.vonk.one\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Development environment for the pool interface - Coert Vonk","description":"Describes the development environment for the pool interface, consisting of the GNU toolchain, ESP-IDF, Visual Code Studio, an Git.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961","og_locale":"en_US","og_type":"article","og_title":"Development environment for the pool interface - Coert Vonk","og_description":"Describes the development environment for the pool interface, consisting of the GNU toolchain, ESP-IDF, Visual Code Studio, an Git.","og_url":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961","og_site_name":"Coert Vonk","article_published_time":"2022-03-03T22:06:27+00:00","article_modified_time":"2022-05-03T21:30:32+00:00","twitter_card":"summary","twitter_image":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coert.vonk.one\/#website","url":"https:\/\/coert.vonk.one\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coert.vonk.one\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#primaryimage","url":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg","contentUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg"},{"@type":"WebPage","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#webpage","url":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961","name":"Development environment for the pool interface - Coert Vonk","isPartOf":{"@id":"https:\/\/coert.vonk.one\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#primaryimage"},"datePublished":"2022-03-03T22:06:27+00:00","dateModified":"2022-05-03T21:30:32+00:00","description":"Describes the development environment for the pool interface, consisting of the GNU toolchain, ESP-IDF, Visual Code Studio, an Git.","breadcrumb":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coert.vonk.one\/"},{"@type":"ListItem","position":2,"name":"Software","item":"https:\/\/coert.vonk.one\/category\/sw"},{"@type":"ListItem","position":3,"name":"Embedded","item":"https:\/\/coert.vonk.one\/category\/sw\/embedded"},{"@type":"ListItem","position":4,"name":"OPNpool design","item":"https:\/\/coert.vonk.one\/category\/sw\/embedded\/opnpool-design"},{"@type":"ListItem","position":5,"name":"Tools"}]},{"@type":"Article","@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#article","isPartOf":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#webpage"},"author":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Tools","datePublished":"2022-03-03T22:06:27+00:00","dateModified":"2022-05-03T21:30:32+00:00","mainEntityOfPage":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#webpage"},"wordCount":711,"publisher":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coert.vonk.one\/sw\/embedded\/opnpool-design\/tools-31961#primaryimage"},"thumbnailUrl":"https:\/\/coert.vonk.one\/wp-content\/uploads\/poolinterfaceicon_clipped_CC2022-copy.svg","keywords":["esp-idf","esp32","iot","pool"],"articleSection":["OPNpool design"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coert.vonk.one\/#\/schema\/person\/image\/"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coert.vonk.one"],"url":"https:\/\/coert.vonk.one\/author\/cvonk"}]}},"_links":{"self":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31961"}],"collection":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/comments?post=31961"}],"version-history":[{"count":10,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31961\/revisions"}],"predecessor-version":[{"id":32982,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/posts\/31961\/revisions\/32982"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media\/32091"}],"wp:attachment":[{"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/media?parent=31961"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/categories?post=31961"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coert.vonk.one\/wp-json\/wp\/v2\/tags?post=31961"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}