{"id":30973,"date":"2011-12-03T17:34:11","date_gmt":"2011-12-04T01:34:11","guid":{"rendered":"https:\/\/coertvonk.com\/?p=30973"},"modified":"2022-02-07T09:31:29","modified_gmt":"2022-02-07T17:31:29","slug":"design","status":"publish","type":"post","link":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973","title":{"rendered":"Design"},"content":{"rendered":"<p>\r\n    Presents a CPU Design for LC-3 instruction set, that we later implement using Verilog HDL. The illustrations help visualize the design.  The instruction set is based on the book <a href=\"https:\/\/highered.mheducation.com\/sites\/0072467509\/index.html\">Introduction to Computer Systems<\/a> by Patt and Partel. For this text we push the simplicity of this little microprocessor (LC-3) even further as described in <a href=\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/instruction-set-30971\">Instruction Set<\/a>.\r\n<\/p>\r\n<h2>\r\n    Design\r\n<\/h2>\r\n\r\n<p>\r\n    The microprocessor consists of a <em>Data Path<\/em> and a <em>Control Unit<\/em>.  Together they implement the various instruction phases.\r\n<\/p>\r\n<p>\r\n    This section describes an architecture for the LC-3.  It aims at staying true to the von Neumann architecture and instruction cycle names.  However, here we assume the program counter and instruction register are in the data path.\r\n<\/p>\r\n\r\n<h3>\r\n    Data Path\r\n<\/h3>\r\n\r\n<p>\r\n    The schematic below shows the Data Path.  \r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/lc3-data-path3.png\">\r\n                <img class=\"alignnone wp-image-4195\"  title=\"\"  src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3.png\" alt=\"own work\" width=\"600\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3.png 2017w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-400x181.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-768x348.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-1024x464.png 1024w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-250x113.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-300x136.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-350x158.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-500x226.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-data-path3-750x339.png 750w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/>\r\n            <\/a>\r\n            <figcaption>LC3 data path<\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    We use the following conventions\r\n    <ul>\r\n        <li>\r\n            The shaded blocks are modules that implement various functionality.  The module names have been chosen to reflect the <em>instruction phases<\/em>.\r\n        <\/li>\r\n        <li>\r\n            Signals connect the blocks.  A signal can be a single wire, or a collection of wires such as the 16 bits that represent the value of the program counter. Signal names are chosen to overlap with operand names where possible.\r\n        <\/li>\r\n        <li>\r\n            The microprocessor connects to an external memory through the <em>external interface<\/em>.\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h4>\r\n    Modules\r\n<\/h4>\r\n\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"modules\">\r\n            <tr>\r\n                <th>\r\n                    Module\r\n                <\/th>\r\n                <th>\r\n                    Description\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>UpdatePC<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Maintains the program counter, <datasignal>pc<\/datasignal>.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Fetch<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Initiates the bus cycle, to read the instruction pointed to by <datasignal>pc<\/datasignal>.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Decode<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Reads the instruction from the memory bus and extracts its operands.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Registers<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Maintains the register values and processor status register.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>ALU<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Performs arithmetic and logical operations.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Address<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Calculates memory address for memory or control instructions.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>MemoryIF<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Initiates the external memory bus cycle to read or write data.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>DrMux<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Destination register multiplexor, selects the value that will be written to the destination register.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>BusDriver<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Simple arbiter for memory read requests from <module>Fetch<\/module> and <module>MemoryIF<\/module>.\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Signals\r\n<\/h4>\r\n\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"signals\">\r\n            <tr>\r\n                <th>Group<\/th>\r\n                <th>Signal<\/th>\r\n                <th>Description<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\" rowspan=\"3\">\r\n                    Program counters\r\n                <\/td>\r\n                <td><datasignal>pc<\/datasignal><\/td>\r\n                <td>Program Counter<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>nPC<\/datasignal><\/td>\r\n                <td>Next program counter (always has the value <datasignal>pc<\/datasignal><code>+1<\/code>)<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\"><datasignal>tPC<\/datasignal><\/td>\r\n                <td class=\"underline\">Target program counter, for <opcode>JMP<\/opcode> \/ <opcode>BR*<\/opcode>.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\" rowspan=\"4\">\r\n                    Operands\r\n                <\/td>\r\n                <td><datasignal>sr1ID<\/datasignal><\/td>\r\n                <td>Source register 1 identifier.<br \/>Also used as <code>baseRID<\/code> for <opcode>JMP<\/opcode> \/ <opcode>LDR<\/opcode> \/ <opcode>STR<\/opcode><\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>sr2ID<\/datasignal><\/td>\r\n                <td>Source register 2 identifier.<br \/>Also used as <code>srID<\/code> for <opcode>ST<\/opcode> \/ <opcode>STI<\/opcode> \/ <opcode>STR<\/opcode>.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>imm<\/datasignal><\/td>\r\n                <td>Immediate value<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\"><code><datasignal>offset<\/datasignal><\/code><\/td>\r\n                <td class=\"underline\">Memory address offset<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\" rowspan=\"4\">\r\n                    Register values\r\n                <\/td>\r\n                <td><datasignal>sr1<\/datasignal><\/td>\r\n                <td>Value of the register identified by signal <datasignal>sr1ID<\/datasignal><\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>sr2<\/datasignal><\/td>\r\n                <td>Value of the register identified by <code><datasignal>sr2ID<\/datasignal><\/code><\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>dr<\/datasignal><\/td>\r\n                <td>Value written to the register identified by <datasignal>drID<\/datasignal><\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\"><datasignal>psr<\/datasignal><\/td>\r\n                <td class=\"underline\">Value of the processor status register<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td  class=\"underline\" rowspan=\"2\">\r\n                    Intermediate values\r\n                <\/td>\r\n                <td><datasignal>uOut<\/datasignal><\/td>\r\n                <td>Result of the ALU operation<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\"><datasignal>aOut<\/datasignal>=<datasignal>addr<\/datasignal>=<datasignal>tPC<\/datasignal><\/td>\r\n                <td class=\"underline\">Result of the address calculation<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\" rowspan=\"4\">\r\n                    External bus\r\n                <\/td>\r\n                <td><datasignal>eADDR<\/datasignal><\/td>\r\n                <td>Memory address<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>eDIN<\/datasignal><\/td>\r\n                <td>Instruction\/data being read from memory<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>eDOUT<\/datasignal><\/td>\r\n                <td>Data being written from memory<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\"><datasignal>eWEA<\/datasignal><\/td>\r\n                <td class=\"underline\">Write enable signal going to memory.<br \/>Value <code>0<\/code> for read, <code>1<\/code> for write.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td rowspan=\"3\">\r\n                    Internal bus\r\n                <\/td>\r\n                <td><datasignal>iBR0<\/datasignal>, <datasignal>IBR1<\/datasignal><\/td>\r\n                <td>Internal bus request signals<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>iADDR0<\/datasignal>, <datasignal>iADDR1<\/datasignal><\/td>\r\n                <td>Internal memory addresses<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td><datasignal>iWEA0<\/datasignal>, <datasignal>iWEA1<\/datasignal><\/td>\r\n                <td>Internal write enable signals<\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Examples\r\n<\/h4>\r\n\r\n<h5>Read memory<\/h5>\r\n\r\n<p>\r\n    <span style=\"text-decoration: underline;\">Assume<\/span>: the instruction at address <code>3000<\/code> is <code>201F<\/code>. \r\n\r\n<\/p>\r\n<p>\r\n    Assigning the label <code style=\"color: red\">LDv<\/code> to memory location <code>3020<\/code>, this instruction decodes to\r\n\r\n    <div class=\"flex-container tight\">\r\n        <table class=\"assembly\">\r\n            <tr>\r\n                <th>\r\n                    Address\r\n                <\/th>\r\n                <th>\r\n                    Value\r\n                <\/th>\r\n                <th>\r\n                    Label\r\n                <\/th>\r\n                <th>\r\n                    Mnemonic\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    x3000\r\n                <\/td>\r\n                <td>\r\n                    x201F\r\n                <\/td>\r\n                <td><\/td>\r\n                <td>\r\n                    LD r0, LDv\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    x3020\r\n                <\/td>\r\n                <td>\r\n                    x1234\r\n                <\/td>\r\n                <td>\r\n                    LDv\r\n                <\/td>\r\n                <td><\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Issuing a <em>reset<\/em>, triggers the following sequence of events:\r\n    <div class=\"flex-container\">\r\n        <table class=\"example\">\r\n            <tr>\r\n                <th>#<\/th>\r\n                <th>Module<\/th>\r\n                <th>Action<\/th>\r\n                <th>Signals<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>1.<\/td>\r\n                <td>\r\n                    <module>UpdatePC<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Resets the program counter  to its initial value\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>pc=3000<\/datasignal>, <datasignal>nPC=3001<\/datasignal>\r\n                <\/td>    \r\n            <\/tr>\r\n            <tr>\r\n                <td>2.<\/td>\r\n                <td>\r\n                    <module>Fetch<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Starts a read cycle for the instruction\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>br0=1<\/datasignal>,\r\n                    <datasignal>iADDR0=3000<\/datasignal>,\r\n                    <datasignal>iWEA0=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>3.<\/td>\r\n                <td>\r\n                    <module>BusDriver<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Forwards the read cycle to the external memory bus\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eADDR=3000<\/datasignal>,\r\n                    <datasignal>eWEA=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>4.<\/td>\r\n                <td>\r\n                    <module>ExtMemory<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Responds with the instruction\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eDIN=201f<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>5.<\/td>\r\n                <td>\r\n                    <module>Decode<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Extracts the operands\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>offset=1f<\/datasignal>, \r\n                    <datasignal>drID=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>6.<\/td>\r\n                <td>\r\n                    <module>Address<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Adds the <datasignal>offset<\/datasignal> to <datasignal>nPC<\/datasignal>\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>addr=3020<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>7.<\/td>\r\n                <td>\r\n                    <module>MemoryIF<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Starts a read cycle for the data\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>iBR1=1<\/datasignal>,\r\n                    <datasignal>iADDR1=3020<\/datasignal>,\r\n                    <datasignal>iWEA1=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>8.<\/td>\r\n                <td>\r\n                    <module>BusDriver<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Forwards the read cycle to the external memory bus\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eADDR=3020<\/datasignal>,\r\n                    <datasignal>eWEA=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>9.<\/td>\r\n                <td>\r\n                    <module>ExtMemory<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Responds with the data\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eDIN=1234<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>10.<\/td>\r\n                <td>\r\n                    <module>DrMux<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Selects the <datasignal>eDIN<\/datasignal> input\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>dr=1234<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>11.<\/td>\r\n                <td><module>Registers<\/module><\/td>\r\n                <td>Writes the value <datasignal>dr<\/datasignal> to the register identified by <datasignal>drID<\/datasignal><\/td>\r\n                <td><\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h5>\r\n    ALU operation\r\n<\/h5>\r\n\r\n<p>\r\n    <span style=\"text-decoration: underline;\">Assume<\/span>: <datasignal>pc=3003<\/datasignal>, the register <code>R0=1234<\/code> and <code>R1=4321<\/code>. The instruction at the next address <code>3004<\/code> is <code>1801<\/code>.\r\n<\/p>    \r\n<p>\r\n    This instruction decodes to\r\n\r\n    <div class=\"flex-container tight\">\r\n        <table class=\"assembly\">\r\n            <tr>\r\n                <th>\r\n                    Address\r\n                <\/th>\r\n                <th>\r\n                    Value\r\n                <\/th>\r\n                <th>\r\n                    Label\r\n                <\/th>\r\n                <th>\r\n                    Mnemonic\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    x3004\r\n                <\/td>\r\n                <td>\r\n                    x1801\r\n                <\/td>\r\n                <td><\/td>\r\n                <td>\r\n                    ADD R4, R0, R1\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The following sequence of events will happen:\r\n\r\n    <div class=\"flex-container\">\r\n        <table class=\"example\">\r\n            <tr>\r\n                <th>#<\/th>\r\n                <th>Module<\/th>\r\n                <th>Action<\/th>\r\n                <th>Signals<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>1.<\/td>\r\n                <td>\r\n                    <module>UpdatePC<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Increments the program counter\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>pc=3004<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>2.<\/td>\r\n                <td>\r\n                    <module>Fetch<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Starts a read cycle for the instruction\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>iBR0=1<\/datasignal>,\r\n                    <datasignal>iADDR0=3004<\/datasignal>,\r\n                    <datasignal>iWEA0=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>3.<\/td>\r\n                <td>\r\n                    <module>BusDriver<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Forwards the read cycle to the external memory bus\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eADDR=3004<\/datasignal>,\r\n                    <datasignal>eWEA=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>4.<\/td>\r\n                <td>\r\n                    <module>ExtMemory<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Responds with the instruction\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eDIN=1801<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>5.<\/td>\r\n                <td>\r\n                    <module>Decode<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Extracts the operands\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>sr1ID=0<\/datasignal>, \r\n                    <datasignal>sr2ID=1<\/datasignal>,\r\n                    <datasignal>drID=4<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>6.<\/td>\r\n                <td>\r\n                    <module>Registers<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Supplies the values for the registers identified by <datasignal>sr1ID<\/datasignal> and <datasignal>sr2ID<\/datasignal><\/td>\r\n                <td>\r\n                    <datasignal>sr1=1234<\/datasignal>,\r\n                    <datasignal>sr2=4321<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>7.<\/td>\r\n                <td>\r\n                    <module>ALU<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Calculates the sum of <datasignal>sr1<\/datasignal> and <datasignal>sr2<\/datasignal><\/td>.\r\n                <td>\r\n                    <datasignal>uOut=5555<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>8.<\/td>\r\n                <td>\r\n                    <module>DrMux<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Selects the <datasignal>uOut<\/datasignal> input.\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>dr=5555<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>9.<\/td>\r\n                <td>\r\n                    <module>Registers<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Writes the value <datasignal>dr<\/datasignal> to the register identified by <datasignal>drID<\/datasignal>\r\n                <\/td>\r\n                <td><\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h5>\r\n    Write memory\r\n<\/h5>\r\n\r\n<p>\r\n    <span style=\"text-decoration: underline;\">Assume<\/span>: <datasignal>pc=3007<\/datasignal>, register <code>R4=AAAA<\/code> and the label <code style=\"color: red;\">STIa<\/code> refers to data address <code>3024<\/code> containing the value <code>3028<\/code>. The instruction at the next address <code>3008<\/code> is <code>B81D<\/code>. \r\n<\/p>    \r\n<p>\r\n    This instruction decodes to\r\n\r\n    <div class=\"flex-container tight\">\r\n        <table class=\"assembly\">\r\n            <tr>\r\n                <th>\r\n                    Address\r\n                <\/th>\r\n                <th>\r\n                    Value\r\n                <\/th>\r\n                <th>\r\n                    Label\r\n                <\/th>\r\n                <th>\r\n                    Mnemonic\r\n                <\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    x3008\r\n                <\/td>\r\n                <td>\r\n                    xB81D\r\n                <\/td>\r\n                <td><\/td>\r\n                <td>\r\n                    STI R4, STIa\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    x3024\r\n                <\/td>\r\n                <td>\r\n                    x3028\r\n                <\/td>\r\n                <td>\r\n                    STIa\r\n                <\/td>\r\n                <td><\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    x3028\r\n                <\/td>\r\n                <td>\r\n                    xBAD0\r\n                <\/td>\r\n                <td><\/td>\r\n                <td><\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The following sequence of events will happen:\r\n    <div class=\"flex-container\">\r\n        <table class=\"example\">\r\n            <tr>\r\n                <th>#<\/th>\r\n                <th>Module<\/th>\r\n                <th>Action<\/th>\r\n                <th>Signals<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>1.<\/td>\r\n                <td>\r\n                    <module>UpdatePC<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Increments the program counter\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>pc=3008<\/datasignal>,\r\n                    <datasignal>nPC=3009<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>2.<\/td>\r\n                <td>\r\n                    <module>Fetch<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Starts a read cycle for the instruction.\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>iBR0=1<\/datasignal>,\r\n                    <datasignal>iADDR0=3008<\/datasignal>,\r\n                    <datasignal>iWEA0=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>3.<\/td>\r\n                <td>\r\n                    <module>Bus driver<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Forwards the read cycle to the external memory bus.\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eADDR=3008<\/datasignal>,\r\n                    <datasignal>eWEA=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>4.<\/td>\r\n                <td>\r\n                    <module>ExtMemory<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Responds with the instruction.\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eDIN=b81f<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>5.<\/td>\r\n                <td>\r\n                    <module>Decode<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Extracts the operands (<code>sr2ID<\/code> represents the <code>SR<\/code> operand)\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>sr2ID=4<\/datasignal>,\r\n                    <datasignal>offset=1d<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>6.<\/td>\r\n                <td>\r\n                    <module>Registers<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Supplies the value for the register identified by <datasignal>sr2ID<\/datasignal>\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>sr2=aaaa<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>7.<\/td>\r\n                <td>\r\n                    <module>Address<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Adds the <datasignal>offset<\/datasignal> to <datasignal>nPC<\/datasignal>\r\n                <\/td>.\r\n                <td>\r\n                    <datasignal>addr=3024<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>8.<\/td>\r\n                <td>\r\n                    <module>MemoryIF<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Starts a read cycle to retrieve the address where to store the value.\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>iBR1=1<\/datasignal>,\r\n                    <datasignal>iADDR1=3024<\/datasignal>,\r\n                    <datasignal>iWEA1=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>9.<\/td>\r\n                <td>\r\n                    <module>BusDriver<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Forwards the read cycle to the external memory bus.\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eADDR=3024<\/datasignal>,\r\n                    <datasignal>eWEA=0<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>10.<\/td>\r\n                <td>\r\n                    <module>ExtMemory<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Responds with the value\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eDIN=3028<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>11.<\/td>\r\n                <td>\r\n                    <module>MemoryIF<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Starts a write cycle to write the value of register <code>R4<\/code> to address <code>3028<\/code><\/td>\r\n                <td>\r\n                    <datasignal>iBR1=1<\/datasignal>,\r\n                    <datasignal>iADDR1=3028<\/datasignal>,\r\n                    <datasignal>iWEA1=1<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>12.<\/td>\r\n                <td>\r\n                    <module>BusDriver<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Forwards the write cycle to the external memory bus.\r\n                <\/td>\r\n                <td>\r\n                    <datasignal>eADDR=3028<\/datasignal>,\r\n                    <datasignal>eWEA=1<\/datasignal>\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h3>\r\n    Control unit\r\n<\/h3>\r\n\r\n<p>\r\n    Instructions can be broken up into micro instructions.  These can be implemented using a finite state machine (FSM), where each state corresponds to one micro instruction.\r\n<\/p>\r\n<p>\r\n    The finite state machine can be visualized as shown in the figure below.\r\n    <ul>\r\n        <li>\r\n            <em>circles<\/em>, represent the states identified by a unique number and name.\r\n        <\/li>\r\n        <li>\r\n            <em>double circle<\/em>, represents the initial state.\r\n        <\/li>\r\n        <li>\r\n            <em>arrows<\/em>, represent state transitions.  Labels represent the condition that must be met for the transition to occur.\r\n        <\/li>\r\n        <li>\r\n            <em>shading<\/em>, is used to identify the implementation modules.\r\n        <\/li>\r\n        <li>\r\n            <ctrlsignal>eREADY<\/ctrlsignal>, indicates that the external memory finished a read or write operation.\r\n        <\/li>\r\n        <li>\r\n            <ctrlsignal>iType<\/ctrlsignal>, <ctrlsignal>maType<\/ctrlsignal>, <ctrlsignal>indType<\/ctrlsignal> refer to the generalized instruction types generated by <em>Decoder<\/em>.\r\n        <\/li>\r\n    <\/ul>\r\n<\/p>\r\n\r\n<h4>\r\n    State diagram\r\n<\/h4>\r\n\r\n<div class=\"align-center\"><figure><a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/lc3-fsm6.png\"><img class=\"alignnone wp-image-4056\" title=\"lc3 fsm6\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6.png\" alt=\"own work\" width=\"500\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6.png 1384w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-338x400.png 338w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-768x908.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-866x1024.png 866w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-211x250.png 211w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-254x300.png 254w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-296x350.png 296w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-423x500.png 423w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-fsm6-634x750.png 634w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><figcaption>LC3 finite state machine<\/figcaption><\/figure><\/div><\/li>\r\n\r\n<h4>Details<\/h4>\r\n<ul>\r\n    <li>Policies:\r\n    <ul>\r\n        <li><em>State transitions<\/em>, are only possible during the falling edge of the clock signal (from 1 to 0);<\/li>\r\n        <li><em>Outputs<\/em>, to the external memory interface, are driven in response to state transitions;<\/li>\r\n        <li><em>Inputs<\/em>, from the external memory interface, are sampled on the rising edge of the clock signal (from 0 to 1);<\/li>\r\n        <li><em>Control signals<\/em>, change only during the falling edge of the clock signal to minimize glitches.<\/li>\r\n    <\/ul>\r\n    <\/li>\r\n<\/ul>\r\n<ul>\r\n    <li>Each state:\r\n    <ul>\r\n        <li>depends on both input signals and the previous state&#8217;<\/li>\r\n        <li>generates control signals control signals for the data path (with the help of the Decode module).<\/li>\r\n    <\/ul>\r\n    <\/li>\r\n<\/ul>\r\n<ul>\r\n    <li>The control unit consists of two modules:\r\n    <ul>\r\n        <li><em>State<\/em>, implements the state machine, and generates state specific control signals.<\/li>\r\n        <li><em>Decode<\/em>, generalizes the instruction for the state machine, and generates state independent control signals.<\/li>\r\n    <\/ul>\r\n    <\/li>\r\n<\/ul>\r\n<\/li>\r\n\r\n<h4>\r\n    Schematic for the control unit\r\n<\/h4>\r\n<div class=\"align-center\"><figure><a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/lc3-control-unit4.png\"><img class=\"alignnone wp-image-4172\" title=\"lc3 control unit4\" src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4.png\" alt=\"own work\" width=\"600\" srcset=\"https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4.png 2110w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-400x219.png 400w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-768x421.png 768w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-1024x561.png 1024w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-250x137.png 250w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-300x164.png 300w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-350x192.png 350w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-500x274.png 500w, https:\/\/coertvonk.com\/wp-content\/uploads\/lc3-control-unit4-750x411.png 750w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><figcaption>LC3 control unit<\/figcaption><\/figure><\/div><\/li>\r\n<p>\r\n    The next section describes the signals for the control unit in the CPU Design for LC-3 instruction set.\r\n<\/p>\r\n\r\n<h4>\r\n    Signals for the control unit\r\n<\/h4>\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"signals\">\r\n            <tr>\r\n                <th>Group<\/th>\r\n                <th>Signal<\/th>\r\n                <th>Description<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td rowspan=\"2\">\r\n                    External interface\r\n                <\/td>\r\n                <td>\r\n                    <ctrlsignal>eREADY==1<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Indicates that the external memory finished a read or write operation.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\">\r\n                    <ctrlsignal>clock<\/ctrlsignal>\r\n                <\/td>\r\n                <td class=\"underline\">External supplied clock<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td rowspan=\"2\">\r\n                    Internal to the <em>State<\/em> module\r\n                <\/td>\r\n                <td>\r\n                    <ctrlsignal>state<\/ctrlsignal>\r\n                <\/td>\r\n                <td>Current state<\/td>            \r\n            <\/tr>\r\n            <tr>\r\n                <td class=\"underline\">\r\n                    <ctrlsignal>nState<\/ctrlsignal>\r\n                <\/td>\r\n                <td class=\"underline\">Next state as determined by the combinational logic<\/td>            \r\n            <\/tr>\r\n            <tr>\r\n                <td rowspan=\"3\">\r\n                    Generalized instruction types (bundled into <ctrlsignal>cCtrl<\/ctrlsignal>)\r\n                <\/td>\r\n                <td>\r\n                    <ctrlsignal>iType<\/ctrlsignal>\r\n                <\/td>\r\n                <td>Instruction type<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>maType<\/ctrlsignal>\r\n                <\/td>\r\n                <td>Memory access type<\/td>\r\n            <\/tr>            \r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>indType<\/ctrlsignal>\r\n                <\/td>\r\n                <td>Indirect memory access type<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td rowspan=\"9\">\r\n                    Data path control\r\n                <\/td>\r\n                <td>\r\n                    <ctrlsignal>pNext<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Signals <module>UpdatePC<\/module> to change the program counter to <datasignal>tPC<\/datasignal><\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>pEn<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Enables <module>UpdatePC<\/module> to change the program counter.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>fEn<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Enable <module>Fetch<\/module> to start external memory bus cycle to read the instruction.<\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>dEn<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Enables <module>Decode<\/module> to read the instruction from the external memory bus.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>rWe<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Enables <module>Registers<\/module> to store the value of <datasignal>dr<\/datasignal> in the register identified by <datasignal>drID<\/datasignal>.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>uOp<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Chooses the operation and inputs of the <module>ALU<\/module>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>aOp<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Chooses the operation and inputs of the <module>Address<\/module> calculation.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>mOp<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Chooses the memory operation to be performed by <module>MemoryIF<\/module>.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <ctrlsignal>drSrc<\/ctrlsignal>\r\n                <\/td>\r\n                <td>\r\n                    Selects the destination register source input on <module>DrMux<\/module>\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    The next section gives a detailed description of the modules for the CPU Design for LC-3 instruction set.\r\n<\/p>\r\n\r\n<h4>\r\n    Modules (detailed description)\r\n<\/h4>\r\n\r\n<p>\r\n    <div class=\"flex-container\">\r\n        <table class=\"modules\">\r\n            <tr>\r\n                <th>Module<\/th>\r\n                <th>Description<\/th>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>State<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Generates the state specific control signals for each micro instruction being executed.  Refer to the signals described above for details.\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>UpdatePC<\/module>\r\n                <\/td>\r\n                <td>\r\n                    Updates the program counter, <datasignal>pc<\/datasignal>, at the end of each instruction cycle.  The new value is:\r\n                    <ul>\r\n                        <li>\r\n                            <code>3000<\/code> if <em>reset<\/em> is asserted, or\r\n                        <\/li>\r\n                        <li>\r\n                            the value of the <datasignal>tPC<\/datasignal> input, when a <opcode>JMP<\/opcode> or <opcode>BR*<\/opcode> instruction was executed (and its condition was met), or\r\n                        <\/li>\r\n                        <li>\r\n                            otherwise, the previous value of <datasignal>pc+1<\/datasignal>.\r\n                        <\/li>\r\n                    <\/ul>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Fetch<\/module>\r\n                <\/td>\r\n                <td>\r\n                    <ul>\r\n                        <li>\r\n                            Initiates the external bus cycle (<datasignal>iBR0<\/datasignal>, <datasignal>iADDR0<\/datasignal>, <datasignal>iWEA0<\/datasignal>) to read the instruction from the memory location pointed to by <datasignal>pc<\/datasignal>.\r\n                        <\/li>\r\n                        <li>\r\n                            The <em>control unit<\/em> will maintain this state until the external memory reports that the data is available (<ctrlsignal>eREADY<\/ctrlsignal>).\r\n                        <\/li>\r\n                    <\/ul>        \r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Decode<\/module>\r\n                <\/td>\r\n                <td>\r\n                    <ul>\r\n                        <li>\r\n                            Finishes the external bus cycle by reading the instruction from the external memory bus (<datasignal>eDIN<\/datasignal>).\r\n                        <\/li>\r\n                        <li>\r\n                            Decodes the instruction:\r\n                            <ul>\r\n                                <li>\r\n                                    Based on the <em>opcode<\/em> (<code>ir[15:11]<\/code>,  it generalizes the instruction type for the State module (<ctrlsignal>cCtrl<\/ctrlsignal>).\r\n                                <\/li>\r\n                                <li>\r\n                                    Based on the <em>operands<\/em> (<code>ir[10:0]<\/code>), it configures the data path using state independent control signals:\r\n                                    <ul>\r\n                                        <li>\r\n                                            For ALU instructions,\r\n                                            <ctrlsignal>uOp<\/ctrlsignal>,\r\n                                            <datasignal>sr1ID<\/datasignal>,\r\n                                            <datasignal>sr2ID<\/datasignal>,\r\n                                            <datasignal>drSrc<\/datasignal>,\r\n                                            <datasignal>drID<\/datasignal>\r\n                                        <\/li>\r\n                                        <li>\r\n                                            For memory instructions,\r\n                                            <ctrlsignal>aOp<\/ctrlsignal>,\r\n                                            <datasignal>sr1ID<\/datasignal>\r\n                                            (<code>BaseR<\/code> for <opcode>LDR<\/opcode> \/ <opcode>STR<\/opcode>),\r\n                                            <datasignal>sr2ID<\/datasignal>\r\n                                            (<code>sr<\/code> for <opcode>ST<\/opcode> \/ <opcode>STI<\/opcode> \/ <opcode>STR<\/opcode>),\r\n                                            <datasignal>offset<\/datasignal>,\r\n                                            <datasignal>drID<\/datasignal>\r\n                                        <\/li>\r\n                                        <li>\r\n                                            For control instructions,\r\n                                            <ctrlsignal>pNext<\/ctrlsignal>,\r\n                                            <datasignal>sr1<\/datasignal>\r\n                                            (<code>BaseR<\/code> for <opcode>JMP<\/opcode>).\r\n                                        <\/li>\r\n                                    <\/ul>\r\n                                <\/li>\r\n                            <\/ul>\r\n                        <\/li>\r\n                    <\/ul>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Registers<\/module>\r\n                <\/td>\r\n                <td>\r\n                    <ul>\r\n                        <li>\r\n                            Maintains the general purpose register (<code>R0..R7<\/code>).\r\n                        <\/li>\r\n                        <li>\r\n                            Supplies the values for the registers identified by <datasignal>sr1ID<\/datasignal>,\r\n                            <datasignal>sr2ID<\/datasignal>.\r\n                        <\/li>\r\n                        <li>\r\n                            Updates the register specified by <datasignal>drID<\/datasignal> to the value <datasignal>dr<\/datasignal> when <ctrlsignal>rWe<\/ctrlsignal> is asserted.\r\n                        <\/li>\r\n                    <\/ul>            \r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>ALU<\/module>\r\n                <\/td>\r\n                <td>\r\n                    <ul>\r\n                        <li>\r\n                            The input <ctrlsignal>uOp<\/ctrlsignal> selects both the operation type and inputs.\r\n                            <ul>\r\n                                <li>\r\n                                    For <opcode>ADD<\/opcode> do if <code>ir[5]==1<\/code> then <datasignal>uOut=sr1+imm5<\/datasignal>, else <datasignal>uOut=sr1+sr2<\/datasignal>.\r\n                                <\/li>\r\n                                <li>\r\n                                    For <opcode>AND<\/opcode> do if <code>ir[5]==1<\/code> then <datasignal>uOut=sr1&#038;imm5<\/datasignal>, else <datasignal>uOut=sr1&#038;sr2<\/datasignal>.\r\n                                <\/li>\r\n                                <li>\r\n                                    For <opcode>NOT<\/opcode> do <datasignal>uOut=~sr1<\/datasignal>.\r\n                                <\/li>\r\n                            <\/ul>\r\n                        <\/li>\r\n                    <\/ul>            \r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>Address<\/module>\r\n                <\/td>\r\n                <td>\r\n                    <ul>\r\n                        <li>\r\n                            Input <ctrlsignal>aOp<\/ctrlsignal> selects both the calculation type and inputs.\r\n                            <ul>\r\n                                <li>\r\n                                    For <opcode>BR*<\/opcode> do <datasignal>aOut=nPC+offset9<\/datasignal>.\r\n                                <\/li>\r\n                                <li>\r\n                                    For <opcode>LD<\/opcode> \/ <opcode>LDI<\/opcode> \/ <opcode>LEA<\/opcode> \/ <opcode>ST<\/opcode> \/ <opcode>STI<\/opcode>, do <datasignal>aOut=nPC+offset9<\/datasignal>.\r\n                                <\/li>\r\n                                <li>\r\n                                    For <opcode>JMP<\/opcode> \/ <opcode>LDR<\/opcode> \/ <opcode>STR<\/opcode>, do <datasignal>aOut=sr1+offset6<\/datasignal>.\r\n                                <\/li>\r\n                            <\/ul>\r\n                        <\/li>\r\n                        <li>\r\n                            Note that <datasignal>aOut<\/datasignal> is connected to the <datasignal>addr<\/datasignal> input on <module>MemoryIF<\/module>, and the <datasignal>tPC<\/datasignal> input on <module>FetchPC<\/module>.\r\n                        <\/li>\r\n                    <\/ul>\r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>MemoryIF<\/module>\r\n                <\/td>\r\n                <td>\r\n                    <ul>\r\n                        <li>\r\n                            Input <ctrlsignal>mOp<\/ctrlsignal> selects the memory access mode and inputs.\r\n                            <ul>\r\n                                <li>\r\n                                    For <opcode>LDI<\/opcode> \/ <opcode>STI<\/opcode>, under the direction of the <em>Control Unit<\/em>, it first initiates a memory read cycle for <datasignal>addr<\/datasignal> (<datasignal>aOut<\/datasignal>). \r\n                                    The <em>Control Unit<\/em> will maintain this state until the external memory reports that the data is available (<ctrlsignal>eREADY<\/ctrlsignal>).\r\n                                    It then takes the value read from memory (<datasignal>eDIN<\/datasignal>), and\r\n                                    <ul>\r\n                                        <li>\r\n                                            for <opcode>LDI<\/opcode>, it initiates a read cycle for address <datasignal>eDIN<\/datasignal>;\r\n                                        <\/li>\r\n                                        <li>\r\n                                            for <opcode>STI<\/opcode>, it initiates a write cycle to write the value <datasignal>sr2<\/datasignal> to address <datasignal>eDIN<\/datasignal>.\r\n                                        <\/li>\r\n                                    <\/ul>\r\n                                <\/li>\r\n                                <li>\r\n                                    For the other instructions, it takes the address, and\r\n                                    <ul>\r\n                                        <li>\r\n                                            for <opcode>LD<\/opcode> \/ <opcode>LDR<\/opcode>, read the value from <datasignal>addr<\/datasignal> (<datasignal>aOut<\/datasignal>);\r\n                                        <\/li>\r\n                                        <li>\r\n                                            for <opcode>LEA<\/opcode>, do nothing;\r\n                                        <\/li>\r\n                                        <li>\r\n                                            for <opcode>ST<\/opcode> \/ <opcode>STR<\/opcode>, write the value <datasignal>sr2<\/datasignal> to <datasignal>addr<\/datasignal> (<datasignal>aOut<\/datasignal>).\r\n                                        <\/li>\r\n                                    <\/ul>\r\n                                <\/li>\r\n                                <li>\r\n                                    The <em>control unit<\/em> will maintain this state until the external memory reports that the data is available (<ctrlsignal>eREADY<\/ctrlsignal>).\r\n                                <\/li>\r\n                            <\/ul>\r\n                        <\/li>\r\n                    <\/ul>\r\n                \r\n                <\/td>\r\n            <\/tr>\r\n            <tr>\r\n                <td>\r\n                    <module>DrMux<\/module><sup>*<\/sup>\r\n                <\/td>\r\n                <td>\r\n                    <ul>\r\n                        <li>\r\n                            Input <ctrlsignal>drSrc<\/ctrlsignal> selects the value that will be written to the destination register.\r\n                            <ul>\r\n                                <li>\r\n                                    For <opcode>ADD<\/opcode> \/ <opcode>AND<\/opcode> \/ <opcode>NOT<\/opcode> do forward <datasignal>uOut<\/datasignal> to <datasignal>dr<\/datasignal>.\r\n                                <\/li>\r\n                                <li>\r\n                                    For <opcode>LD<\/opcode> \/ <opcode>LDR<\/opcode> \/ <opcode>LDI<\/opcode> do forward <datasignal>deign<\/datasignal> to <datasignal>dr<\/datasignal>.\r\n                                <\/li>\r\n                                <li>\r\n                                    For <opcode>LEA<\/opcode> do forward <datasignal>aOut<\/datasignal> to <datasignal>dr<\/datasignal>.\r\n                                <\/li>\r\n                            <\/ul>\r\n                        <\/li>\r\n                    <\/ul>            \r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    <sup>*<\/sup>) DrMux is an abbreviation for Destination Register Multiplexor.\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n                To continue this CPU Design for LC-3 instruction set, read about its implementation on the <a href=\"\/inquiries\/how-cpu-work\/implementation-30975\">next page<\/a>.\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>\r\n","protected":false},"excerpt":{"rendered":"Chapter 3. Presents a CPU Design for LC-3 instruction set.","protected":false},"author":41,"featured_media":6678,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[418],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>CPU Design for LC-3 instruction set - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Presents a CPU Design for LC-3 instruction set, that we later implement using Verilog HDL. The illustrations help visualize the design.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"CPU Design for LC-3 instruction set - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Presents a CPU Design for LC-3 instruction set, that we later implement using Verilog HDL. The illustrations help visualize the design.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2011-12-04T01:34:11+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-07T17:31:29+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\" \/>\n\t<meta property=\"og:image:width\" content=\"300\" \/>\n\t<meta property=\"og:image:height\" content=\"300\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\",\"width\":300,\"height\":300},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#webpage\",\"url\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973\",\"name\":\"CPU Design for LC-3 instruction set - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#primaryimage\"},\"datePublished\":\"2011-12-04T01:34:11+00:00\",\"dateModified\":\"2022-02-07T17:31:29+00:00\",\"description\":\"Presents a CPU Design for LC-3 instruction set, that we later implement using Verilog HDL. The illustrations help visualize the design.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Inquiries\",\"item\":\"https:\/\/coertvonk.com\/category\/inquiries\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"How does a CPU work?\",\"item\":\"https:\/\/coertvonk.com\/category\/inquiries\/how-cpu-work\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Design\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Design\",\"datePublished\":\"2011-12-04T01:34:11+00:00\",\"dateModified\":\"2022-02-07T17:31:29+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#webpage\"},\"wordCount\":1858,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png\",\"articleSection\":[\"How does a CPU work?\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"https:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"CPU Design for LC-3 instruction set - Coert Vonk","description":"Presents a CPU Design for LC-3 instruction set, that we later implement using Verilog HDL. The illustrations help visualize the design.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973","og_locale":"en_US","og_type":"article","og_title":"CPU Design for LC-3 instruction set - Coert Vonk","og_description":"Presents a CPU Design for LC-3 instruction set, that we later implement using Verilog HDL. The illustrations help visualize the design.","og_url":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973","og_site_name":"Coert Vonk","article_published_time":"2011-12-04T01:34:11+00:00","article_modified_time":"2022-02-07T17:31:29+00:00","og_image":[{"width":300,"height":300,"url":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","type":"image\/png"}],"twitter_card":"summary","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","width":300,"height":300},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#webpage","url":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973","name":"CPU Design for LC-3 instruction set - Coert Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#primaryimage"},"datePublished":"2011-12-04T01:34:11+00:00","dateModified":"2022-02-07T17:31:29+00:00","description":"Presents a CPU Design for LC-3 instruction set, that we later implement using Verilog HDL. The illustrations help visualize the design.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Inquiries","item":"https:\/\/coertvonk.com\/category\/inquiries"},{"@type":"ListItem","position":3,"name":"How does a CPU work?","item":"https:\/\/coertvonk.com\/category\/inquiries\/how-cpu-work"},{"@type":"ListItem","position":4,"name":"Design"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Design","datePublished":"2011-12-04T01:34:11+00:00","dateModified":"2022-02-07T17:31:29+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#webpage"},"wordCount":1858,"commentCount":0,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/inquiries\/how-cpu-work\/design-30973#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/school-microprocessor.png","articleSection":["How does a CPU work?"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"https:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30973"}],"collection":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=30973"}],"version-history":[{"count":5,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30973\/revisions"}],"predecessor-version":[{"id":31209,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30973\/revisions\/31209"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/6678"}],"wp:attachment":[{"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=30973"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=30973"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=30973"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}