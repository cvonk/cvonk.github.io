{"id":30778,"date":"2015-10-08T10:59:26","date_gmt":"2015-10-08T17:59:26","guid":{"rendered":"https:\/\/coertvonk.com\/?p=30778"},"modified":"2022-04-28T19:41:13","modified_gmt":"2022-04-29T02:41:13","slug":"parameterized-square-root-in-verilog","status":"publish","type":"post","link":"http:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778","title":{"rendered":"Square root circuit"},"content":{"rendered":"<p>\r\n    Implements a math square root using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#8217;s.\r\n<\/p>\r\n<h2 style=\"counter-reset: h2 7 h3\">\r\n    Square root using logic gates\r\n<\/h2>\r\n\r\n<p>\r\n    <a class=\"hide-anchor fancybox\" href=\"\/wp-content\/uploads\/math-logo-implementation-sqrt.svg\"><img class=\"alignright wp-image-17215\"  title=\"\"  src=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg\" alt=\"(c) Copyright 2016 Coert Vonk\" width=\"75\" \/><\/a>\r\n\r\n    The square root method implemented here is a simplification of <span class=\"a\">Samavi and <\/span><span class=\"a\"><a href=\"https:\/\/www.academia.edu\/2688190\/An_Optimized_Square_Root_Algorithm_for_Implementation_in_FPGA_Hardware\">Sutikno<\/a> improvements of the non-restoring digit recurrence square root algorithm. For details about this method, refer to <a href=\"https:\/\/coertvonk.com\/inquiries\/computer-math\/math-operations-using-gates-30710#sqrt\">Chapter 7<\/a> of the inquiry &#8220;<a href=\"\/category\/inquiries\/computer-math\">How do Computers do Math?<\/a>&#8220;. \\(\\)<\/span>\r\n<\/p>\r\n\r\n<h3>\r\n    Simplified Samovi Square Root\r\n<\/h3>\r\n<p>\r\n    The square root of an integer can be calculated using a circuit of Controlled Subtract-Multiplex (<code>csm<\/code>) blocks. The blocks were introduced as part of the <a href=\"http:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-divider-in-verilog-30776\">divider implementation<\/a>. The square root circuit for an 8-bits value is given in shown below.\r\n<\/p>\r\n<p>\r\n    Each row performs one &#8220;attempt subtraction&#8221; cycle. For a start, the top row attempts to subtracts binary 01. If the answer would be negative, the most significant bit of the output will be &#8216;1&#8217;. This msb drives the drives the Output Select (\\(os\\)) inputs that effectively cancels the subtraction if the result would be negative.\r\n\r\n    <div class=\"flex-container\">\r\n        <figure>\r\n            <div class=\"circuit-container\">\r\n                <img class=\"aligncenter\" title=\"(c) Copyright 2017 by Coert Vonk\" src=\"https:\/\/coertvonk.com\/wp-content\/logic-simulation\/squareroot\/8-bit simplified-Samovi.svg\" alt=\"\" width=\"600\" \/>\r\n                <button class=\"circuit-animate no-print\" style=\"top: 12%; right: 0%;\">\r\n                    Animate\r\n                <\/button>\r\n            <\/div>\r\n            <figcaption>\r\n                8-bit simplified-Samovi square-root\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n<p>\r\n    Similar to the divider, using Verilog HDL we can generate instances of <code>csm<\/code> blocks based on the word length of the radicand (<code>xWIDTH<\/code>) . Once more, to describe the circuit in Verilog HDL, we need to derive the rules that govern the connections between the blocks.\r\n<\/p>\r\n<p>\r\n    Start by numbering the output ports based on their location in the matrix. For this circuit, we have the output signals <em>difference<\/em> \\(d\\) and <em>borrow-out<\/em> \\(b\\). E.g. \\(d_{13}\\) identifies the difference signal for the block in row <code>1<\/code> and column <code>3<\/code>. Next, we express the input signals as a function of the output signal names \\(d\\) and \\(b\\) and do the same for the quotient itself as shown in the table below.\r\n<\/p>\r\n<p>\r\n    2BD\r\n<\/p>\r\n<p>\r\n    Based on this table, we can now express the interconnects using Verilog HDL using <code>?:<\/code> expressions.\r\n\r\n    <pre class=\"brush: verilog; title: ; toolbar: false; notranslate\" title=\"\">generate genvar ii, jj;\r\n: 2BD\r\nendgenerate<\/pre>\r\n<\/p>\r\n<p>\r\n    The complete Verilog HDL source code along with the test bench and constraints is available at:\r\n\r\n    <div class=\"flex-container tight\">\r\n         <a class=\"hide-anchor\" href=\"https:\/\/github.com\/cvonk\/FPGAmath\">\r\n             <img src=\"https:\/\/socialify.git.ci\/cvonk\/FPGAmath\/image?description=1&#038;issues=1&#038;language=1&#038;name=1&#038;owner=1&#038;pattern=Circuit%20Board&#038;stargazers=1&#038;theme=Light\" width=\"500\" \/>\r\n         <\/a>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h4>\r\n    Results\r\n<\/h4>\r\n<p>\r\n    As usual, the propagation delay \\(t_{pd}\\) depends size \\(N\\) and the value of operands. For a given size \\(N\\), the maximum propagation delay occurs when each subtraction needs to be cancelled.\r\n<\/p>\r\n<p>\r\n    Post-map Timing Analysis reveals the worst-case propagation delays. The values in the table below, assume that the size of both operands is the same. The exact value depends on the model and speed grade of the FPGA, the silicon itself, voltage and the die temperature.\r\n\r\n    <div style=\"text-align: center;\">\r\n        <figure>\r\n            <div class=\"flex-container\">\r\n                <table class=\"results\">\r\n                    <tr>\r\n                        <th>\\(N\\)<\/th>\r\n                        <th colspan=\"3\">Timing Analysis<\/th>\r\n                        <th>Measured<\/th>\r\n                    <\/tr>\r\n                    <tr style=\"border-bottom: 1px solid #ddd;\">\r\n                        <th><\/th>\r\n                        <th>slow 85\u00b0C<\/th>\r\n                        <th>slow 0\u00b0C<\/th>\r\n                        <th>fast 0\u00b0C<\/th>\r\n                        <th>actual<\/th>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">4-bits<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">8-bits<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">16-bits<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">27-bits<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td style=\"text-align: right;\">32-bits<\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                        <td style=\"text-align: right;\"><\/td>\r\n                    <\/tr>\r\n                <\/table>\r\n                <a class=\"hide-anchor fancybox\" href=\"#\">\r\n                    <img class=\"wp-image-16751\" src=\"https:\/\/coertvonk.com\/category\/hw\/building-math-circuits\" alt=\"\" width=\"100%\" \/>\r\n                <\/a>\r\n            <\/div>\r\n            <figcaption>\r\n                Propagation delay for simplified-Samovi square-root\r\n            <\/figcaption>\r\n        <\/figure>\r\n    <\/div>\r\n<\/p>\r\n\r\n<h2 style=\"counter-reset: h2 8 h3\">\r\n    Conclusion\r\n<\/h2>\r\n\r\n<p>\r\n    Judging from the number of research papers popping up each year, we can deduce that this is a still active field.\r\n<\/p>\r\n<p>\r\n    Add elementary functions such as sin, cos, tan, exponential, and logarithm.\r\n<\/p>\r\n<p>\r\n    <div class=\"continue-container no-print\">\r\n        <div class=\"continue-content\">\r\n            <div class=\"continue-text\">\r\n    Suggestion for further reading\r\n    <ul>\r\n        <li>\r\n            Digital Computer Arithmetic Datapath Design Using Verilog HDL, by J. Stine, 2003.\r\n        <\/li>\r\n        <li>\r\n            Computer Arithmetic: Algorithms and Hardware Designs, by Parhami, 1999 and 2009.\r\n        <\/li>\r\n        <li>\r\n            Guide to FPGA Implementation of Arithmetic Functions, by Deschamps, Sutter and Cant\u00f3, 2012.\r\n        <\/li>\r\n        <li>\r\n            <a href=\"http:\/\/courses.csail.mit.edu\/6.111\/f2004\/handouts\/L09_L10.pdf\">Arithmetic Circuits<\/a>,\r\n            <a href=\"https:\/\/ocw.mit.edu\/courses\/6-111-introductory-digital-systems-laboratory-spring-2006\/pages\/lecture-notes\/\">Structures<\/a> and\r\n            <a href=\"http:\/\/courses.csail.mit.edu\/6.111\/f2008\/handouts\/L09.pdf\">Multipliers &#038; Pipelining<\/a>, Introductory Digital Systems laboratory, by MIT, 2004-2008.\r\n        <\/li>\r\n        <li>\r\n            <a href=\"https:\/\/arxiv.org\/pdf\/1004.4710.pdf\">Modern Computer Arithmetic<\/a>, by Brent and Zimmermann, 2010.\r\n        <\/li>\r\n        <li>\r\n            <a href=\"http:\/\/courses.csail.mit.edu\/6.111\/f2008\/handouts\/L08.pdf\">Arithmetic Circuits and Multipliers<\/a>, MIT\r\n        <\/li>\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>    \r\n<\/p>","protected":false},"excerpt":{"rendered":"The method implemented here is a simplification of Samavi&#8217;s and Sutikno&#8217;s improvements of the non-restoring digit recurrence square root algorithm.","protected":false},"author":41,"featured_media":17215,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_mi_skip_tracking":false},"categories":[420],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Square root using logic gates - Coert Vonk<\/title>\n<meta name=\"description\" content=\"Implements a math square root using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Square root using logic gates - Coert Vonk\" \/>\n<meta property=\"og:description\" content=\"Implements a math square root using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA&#039;s.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778\" \/>\n<meta property=\"og:site_name\" content=\"Coert Vonk\" \/>\n<meta property=\"article:published_time\" content=\"2015-10-08T17:59:26+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-29T02:41:13+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Coert Vonk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/coertvonk.com\/#website\",\"url\":\"https:\/\/coertvonk.com\/\",\"name\":\"Coert Vonk\",\"description\":\"Embedded Software Engineer\",\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/coertvonk.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg\",\"contentUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg\",\"caption\":\"(c) Copyright 2016 Coert Vonk\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#webpage\",\"url\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778\",\"name\":\"Square root using logic gates - Coert Vonk\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#primaryimage\"},\"datePublished\":\"2015-10-08T17:59:26+00:00\",\"dateModified\":\"2022-04-29T02:41:13+00:00\",\"description\":\"Implements a math square root using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.\",\"breadcrumb\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Vonk Family\",\"item\":\"https:\/\/coertvonk.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Hardware\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Building math circuits\",\"item\":\"https:\/\/coertvonk.com\/category\/hw\/building-math-circuits\"},{\"@type\":\"ListItem\",\"position\":4,\"name\":\"Square root circuit\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#article\",\"isPartOf\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#webpage\"},\"author\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"headline\":\"Square root circuit\",\"datePublished\":\"2015-10-08T17:59:26+00:00\",\"dateModified\":\"2022-04-29T02:41:13+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#webpage\"},\"wordCount\":525,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\"},\"image\":{\"@id\":\"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#primaryimage\"},\"thumbnailUrl\":\"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg\",\"articleSection\":[\"Building math circuits\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e\",\"name\":\"Coert Vonk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/coertvonk.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"contentUrl\":\"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g\",\"caption\":\"Coert Vonk\"},\"logo\":{\"@id\":\"https:\/\/coertvonk.com\/#personlogo\"},\"description\":\"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.\",\"sameAs\":[\"https:\/\/coertvonk.com\"],\"url\":\"http:\/\/coertvonk.com\/author\/cvonk\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Square root using logic gates - Coert Vonk","description":"Implements a math square root using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778","og_locale":"en_US","og_type":"article","og_title":"Square root using logic gates - Coert Vonk","og_description":"Implements a math square root using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","og_url":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778","og_site_name":"Coert Vonk","article_published_time":"2015-10-08T17:59:26+00:00","article_modified_time":"2022-04-29T02:41:13+00:00","twitter_card":"summary","twitter_image":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg","twitter_misc":{"Written by":"Coert Vonk","Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/coertvonk.com\/#website","url":"https:\/\/coertvonk.com\/","name":"Coert Vonk","description":"Embedded Software Engineer","publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/coertvonk.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#primaryimage","inLanguage":"en-US","url":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg","contentUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg","caption":"(c) Copyright 2016 Coert Vonk"},{"@type":"WebPage","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#webpage","url":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778","name":"Square root using logic gates - Coert Vonk","isPartOf":{"@id":"https:\/\/coertvonk.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#primaryimage"},"datePublished":"2015-10-08T17:59:26+00:00","dateModified":"2022-04-29T02:41:13+00:00","description":"Implements a math square root using a circuit of logic gates. Written in parameterized Verilog HDL for Altera and Xilinx FPGA's.","breadcrumb":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Vonk Family","item":"https:\/\/coertvonk.com\/"},{"@type":"ListItem","position":2,"name":"Hardware","item":"https:\/\/coertvonk.com\/category\/hw"},{"@type":"ListItem","position":3,"name":"Building math circuits","item":"https:\/\/coertvonk.com\/category\/hw\/building-math-circuits"},{"@type":"ListItem","position":4,"name":"Square root circuit"}]},{"@type":"Article","@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#article","isPartOf":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#webpage"},"author":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"headline":"Square root circuit","datePublished":"2015-10-08T17:59:26+00:00","dateModified":"2022-04-29T02:41:13+00:00","mainEntityOfPage":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#webpage"},"wordCount":525,"commentCount":0,"publisher":{"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e"},"image":{"@id":"https:\/\/coertvonk.com\/hw\/building-math-circuits\/parameterized-square-root-in-verilog-30778#primaryimage"},"thumbnailUrl":"https:\/\/coertvonk.com\/wp-content\/uploads\/math-logo-implementation-sqrt.svg","articleSection":["Building math circuits"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/coertvonk.com\/#\/schema\/person\/5eeda746b43b88312a0621fdc226c70e","name":"Coert Vonk","image":{"@type":"ImageObject","@id":"https:\/\/coertvonk.com\/#personlogo","inLanguage":"en-US","url":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","contentUrl":"http:\/\/1.gravatar.com\/avatar\/193315b96c6661985694e2ecd91f2996?s=96&d=mm&r=g","caption":"Coert Vonk"},"logo":{"@id":"https:\/\/coertvonk.com\/#personlogo"},"description":"Passionately curious and stubbornly persistent. Enjoys to inspire and consult with others to exchange the poetry of logical ideas.","sameAs":["https:\/\/coertvonk.com"],"url":"http:\/\/coertvonk.com\/author\/cvonk"}]}},"_links":{"self":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30778"}],"collection":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/users\/41"}],"replies":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/comments?post=30778"}],"version-history":[{"count":10,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30778\/revisions"}],"predecessor-version":[{"id":32796,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/posts\/30778\/revisions\/32796"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media\/17215"}],"wp:attachment":[{"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/media?parent=30778"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/categories?post=30778"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/coertvonk.com\/wp-json\/wp\/v2\/tags?post=30778"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}